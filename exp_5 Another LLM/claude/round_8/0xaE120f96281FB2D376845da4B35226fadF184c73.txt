I want you to help me find new gas-wasting patterns for Solidity. Gas is a unique pricing mechanism in Solidity, which measures the amount of computational resources put into the execution of Solidity codes. Gas is paid in money, so saving gas is saving money. The goal of gas optimization is to find an equivalent code instruction sequence that produces the same output while consuming less gas. This may misalign from how people typically write codes, since the gas pricing mechanism is less intuitive and code writers do not often keep it in mind. For example, storage variables in Solidity are expensive in terms of gas, while memory is not, so unnecessary storage operations should be avoided when possible, but programmers from other languages might not be aware of this. 

First, I will give you a list of known gas-wasting patterns as an example. The list is numbered, with each bullet point specifying one gas-wasting pattern and an explanation of why this pattern wastes gas. Please be creative and see if my provided codes contain any gas-wasting patterns beyond the provided ones. The list is as follows:

1. Repeated computation of the same expresasion: including repetitive reads of the same expensive storage variable (e.g. Overuse of expensive storage variables). This could be solved by introducing an intermediate variable to hold the value
2. Variable refactoring: by refactoring variable types and thus adjusting memory layout, we could save gas by saving the amount of storage space needed
3. Redundant operations with same effects: redundant operations that overwrite the effect of the previous operation, making the previous useless
4. Pre-computable operations on constants: performing comparisons (or other operations) to constants is useless and could be pre-computed
5. Simplifiable conditional operations: expressions that involve logical operations that could be simplified to reduce the amount of computational workload.
6. "Loop fusion." If two loops have the same starting and stopping conditions with the same increment steps, then we could consider combining them into one, if they have no dependencies. 
7. "Repeated computations in a loop." If there are expressions that produce the same outcome in each iteration of a loop, we could move it out of the loop and execute only once, which saves computation.
8. "Opaque predicate." If the outcome of a predicate could be inferred to be true/false without execution, then we could just replace it with the corresponding value to save the compuation during runtime.

Next, I will give you a chunk of Solidity codes from which you will find gas-inefficient patterns:
contract SocialAIEngaged {
    function _charge_fee(uint project_id, uint256 amount, uint256 sai_fee, uint256 gas_fee_of_prev_tx, bool is_eth) internal {
        // Is this a valid project
        require(projects[project_id].active, "Not active");

        // Check for enough balance
        uint256 total_eth = 0;

        if (is_eth) {
            // The fee equal the total amount of ETH + fees
            total_eth = amount + sai_fee + gas_fee_of_prev_tx;

        } else {
            // Check if the token address is set otherwise tokens cannot be reserved
            require(projects[project_id].token != address(0), "Token not set");

            // In case of a token, we have to charge ETH seperately
            total_eth = sai_fee + gas_fee_of_prev_tx;
            
            // Check for enough tokens
            uint token_balance = IERC20(projects[project_id].token).balanceOf(address(this));
            uint tokens_available = token_balance - projects[project_id].tokens_reserved;
            require(amount <= tokens_available, "TOKEN: not enough avaiable");
            
            // Reserve the tokens
            projects[project_id].tokens_reserved += amount;
        }
        
        // Check for enough ETH and reduce balance
        require(total_eth <= projects[project_id].eth_balance, "ETH: Not enough balance");
        projects[project_id].eth_balance -= total_eth;

        // Update the fee reserved for the SAI ecosystem
        sai_reserved += sai_fee;
        gas_reserved += gas_fee_of_prev_tx;

        // Should we send ETH
        if (gas_reserved >= send_gas_at) {
            payable(DAPP_controller).transfer(gas_reserved);
            gas_reserved = 0;
        }        
    }

    function _swap_eth_for_tokens(address token, uint256 ethAmount, address to) internal returns (uint tokensBought) {
        // Define the token to swap and the path to swap it
        address[] memory path = new address[](2);
        path[0] = uniswapRouter.WETH();
        path[1] = token;

        // Swap the ETH for the token, and check how much we gained 
        uint balBefore = IERC20(token).balanceOf(address(this));
        uniswapRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: ethAmount}(0, path, to, block.timestamp+1);
        tokensBought = IERC20(token).balanceOf(address(this)) - balBefore;
    }

    function _check_merkle_tree(bytes32 airdrop_hash, bytes32[] memory _witnesses, uint256 path) internal view returns(bool) {
        bytes32 merkleRoot = merkle_root_hash[airdrop_hash];  
        require(merkleRoot != bytes32(0), "No merkle airdrop");  
        bytes32 node = keccak256(abi.encodePacked(uint8(0x00), msg.sender));
        for (uint16 i = 0; i < _witnesses.length; i++) {
            if ((path & 0x01) == 1) {
                node = keccak256(abi.encodePacked(uint8(0x01), _witnesses[i], node));
            } else {
                node = keccak256(abi.encodePacked(uint8(0x01), node, _witnesses[i]));
            }
            path /= 2;
        }
        return node == merkleRoot;
    }

    function _finalize_airdrop(bytes32 airdrop_hash, uint project_id) internal {
        Airdrop memory current_drop = airdrops[airdrop_hash];
        uint refund = current_drop.drops_left * current_drop.amount;
        if (current_drop.is_eth) {
            projects[project_id].eth_balance += refund;
        } else {
            // can reset the reserved tokens
            projects[project_id].tokens_reserved -= refund;
        }
        delete airdrops[airdrop_hash];
    }

    function DAPP_create_SAI_engaged_project(uint project_id, address wallet, address token) external only_DAPP {
        require(projects[project_id].owner == address(0), "Already exists");
    
        // Create the project struct
        Project memory p = Project(project_id, token, wallet, 0, 0, true);
        projects[project_id] = p;
        
        // Approve if token address is given 
         if (token != address(0)) {
            IERC20(token).approve(UNISWAP_ROUTER_ADDRESS, 2**256 - 1);
        }
    }

    // EXTERNAL PROJECT INTERACTIONS
    function DAPP_buyback_and_burn(uint project_id, uint256 amount, uint256 sai_fee, uint256 gas_prev_tx) external only_DAPP {
        // Check whether this tx can be executed and adjust the projects balance
        _charge_fee(project_id, amount, sai_fee, gas_prev_tx, true);
        address token = projects[project_id].token;
        require(token != address(0), "Token not set");
        _swap_eth_for_tokens(token, amount, DEAD); 
    }
    function DAPP_add_lp_and_burn(uint project_id, uint amount, uint256 sai_fee, uint256 gas_prev_tx) external only_DAPP  {
        _charge_fee(project_id, amount, sai_fee, gas_prev_tx, true); 
        // Use half of the ETH to buy tokens 
        address token = projects[project_id].token;
        require(token != address(0), "Token not set");
        uint256 tokensOut = _swap_eth_for_tokens(token, amount/2, address(this));        
        // Add the tokens to the pool 
        uniswapRouter.addLiquidityETH{value: amount/2}(token, tokensOut, 0, 0, DEAD, block.timestamp);
    }

    // PERSONAL - LOTTERIES

    mapping(bytes32 => uint256) public lottery_amount;
    mapping(bytes32 => bool)    public lottery_is_eth;

    }



Now I want you to help me find new gas-wasting patterns from the above codes and the list of example patterns. Please be creative and think outside the box beyond the patterns listed above. Please put the new gas-wasting patterns in bullet points, using Latex syntax. Also please answer the following questions for each of the found patterns:

1. How did you find this pattern? Could you explain the reasoning process, step by step, behind the discovery?
2. What should I do, step by step, to fix the found gas-wasting patterns? Could you explain the reasoning process, step by step, behind the reason why such a fix works?
3. On a score of 0 to 5, please rate this new pattern in terms of how much it is sacrificing readability, security, and maintainability in exchange for gas optimization (5 is the least impacted. For example, "Readability: 5; Security: 4; Maintainability: 1" means no effect on security while maintainability is largely affected.)

Here are some additional requirements:
1. If you think my prompt to you has any issues (e.g. ambiguity or lack of information), please tell me how I should improve it the next time.
2. Please reflect on your reasoning process and tell me how you could do better next time in terms of completing the given task. If you found any issues, please also make corresponding improvements to your output this time and tell me what you did and why such improvement is necessary, in a step-by-step manner.