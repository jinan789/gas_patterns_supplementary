\section*{Analysis of Provided Solidity Code}

Here are some potential gas-wasting patterns I found in the provided Solidity code, along with my reasoning process, suggested fixes, and ratings for readability, security, and maintainability:

1. Repeated calculations of `tokens_purchased` in `buyTokensUSDT` and `buyTokensUSD` functions.
   1. I noticed that the calculation of `tokens_purchased` is identical in both functions, involving multiple multiplication and division operations. This repetition wastes gas.
   2. To fix this, we can create a separate internal function that takes `usdAmount` as a parameter and returns the calculated `tokens_purchased`. Then, we can call this function in both `buyTokensUSDT` and `buyTokensUSD` to avoid duplicating the calculation.
   3. Readability: 4 (the code will be slightly more modular); Security: 5 (no impact on security); Maintainability: 4 (easier to maintain with a shared function).

2. Redundant check for `presaleEnded` in `buyTokensNative`, `buyTokensUSDT`, and `buyTokensUSD` functions.
   1. Each of these functions checks if `presaleEnded` is true and reverts if so. However, the `presaleEnded` variable is only set to true inside these functions when `tokens_for_presale_left <= 0`. This means that the initial check is redundant and wastes gas.
   2. To fix this, we can remove the `require(!presaleEnded, "Presale has ended")` statement from each function. The presale will still end when `tokens_for_presale_left <= 0`, and the redundant check will be eliminated.
   3. Readability: 4 (slightly cleaner code); Security: 5 (no impact on security); Maintainability: 4 (fewer lines of code to maintain).

3. Inefficient use of `isAddressInvestor` function in `claimTokens`.
   1. The `claimTokens` function calls `isAddressInvestor(msg.sender)` twice: once to check if the address is an investor and again to get the number of tokens to distribute. This duplicate call wastes gas.
   2. To fix this, we can store the result of `isAddressInvestor(msg.sender)` in a variable and use that variable for both the check and the token distribution.
   3. Readability: 4 (slightly more verbose but clearer); Security: 5 (no impact on security); Maintainability: 4 (avoids duplicate calls).

4. Unnecessary boolean variable in `owner` modifier.
   1. The `owner` modifier declares a boolean variable `isOwner`, sets it to true if the caller is the `presale_owner`, and then requires `isOwner` to be true. This is an unnecessary use of a boolean variable that wastes gas.
   2. To fix this, we can directly use the condition `msg.sender == presale_owner` in the `require` statement, eliminating the need for the `isOwner` variable.
   3. Readability: 4 (slightly simpler code); Security: 5 (no impact on security); Maintainability: 4 (fewer lines of code).

Regarding your prompt, it provides a good overview of gas optimization in Solidity and includes a helpful list of known gas-wasting patterns. One suggestion for improvement would be to provide more context about the specific contract and its purpose, as that could help in identifying additional gas-wasting patterns that are specific to the contract's design and requirements.