I want you to help me find new gas-wasting patterns for Solidity. Gas is a unique pricing mechanism in Solidity, which measures the amount of computational resources put into the execution of Solidity codes. The goal of gas optimization is to find an equivalent code instruction sequence that produces the same output while consuming less gas, which may misalign from the way people typically write codes, since code writers aim for readability and maintainability, while gas optimization might seem a little unintuitive to newcomers. For example, storage variables in Solidity are expensive in terms of gas, while memory is not, so storage operations should be avoided whenever possible. Gas is paid in real money, so saving gas is saving money.

First, I will give you a list of known gas-wasting patterns. The list is numbered, with each bullet point specifying one gas-wasting pattern, which is followed by an explanation of why this pattern wastes gas. I want you to read through these and learn how to find new gas-wasting patterns from it. The list is as follows:

1. Repeated computation of the same expression: including repetitive reads of the same expensive storage variable (e.g. Overuse of expensive storage variables). This could be solved by introducing an intermediate variable to hold the value.
 
2. Extractable code chunks: if there are multiple chunks of codes that perform the same/similar functionalities, then we could abstract them into one function (or modifier) to save deployment costs 

3. Variable refactoring: by refactoring variable types and thus adjusting memory layout, we could save gas by saving the amount of storage space needed

4. Redundant operations with same effects: redundant operations that overwrite the effect of the previous operation, making the previous useless

5. Pre-computable operations on constants: performing comparisons (or say other operations) to constants is useless and could be pre-computed

6. Persistent conditional checks: some of the condition checks may always evaluate to true or always evaluate to false, which could be directly replaced by their evaluated values

7. Simplifiable conditional operations: expressions that involve logical operations that could be simplified to reduce the amount of computational workload.


Next, I will give you a chunk of Solidity codes from which you will find gas-inefficient patterns; note that I have removed simple functions from the contract and only kept complex ones, with the hope that you could focus on the most complicated function codescontract DigiMonkzStaking is ERC721x, DefaultOperatorFiltererUpgradeable {
    function gen1IndividualStake(uint16 _tokenId) private {
        require(genesis111.ownerOf(_tokenId) == msg.sender);
        require(isGen1Staked[_tokenId] == false);

        // genesis111.transferFrom(msg.sender, address(this), _tokenId);
        genesis111.setNFTLock(_tokenId);

        uint256 artifact = artifactPerGen1Nft[_tokenId];
        NftInfo memory stakingNft = NftInfo(
            _tokenId,
            block.timestamp,
            0,
            artifact
        );
        gen1InfoPerStaker[msg.sender][_tokenId] = stakingNft;
        gen1StakedArray[msg.sender].push(_tokenId);
        isGen1Staked[_tokenId] = true;

        // emit Stake(_tokenId);
    }
    function gen1Stake(uint16[] memory _tokenIds) external returns (bool) {
        uint256 tokenLen = _tokenIds.length;
        for (uint256 i = 0; i < tokenLen; i++) {
            gen1IndividualStake(_tokenIds[i]);
        }
        return true;
    }

    function gen2IndividualStake(uint16 _tokenId) private {
        require(genesis2.ownerOf(_tokenId) == msg.sender);
        require(isGen2Staked[_tokenId] == false);

        // genesis2.transferFrom(msg.sender, address(this), _tokenId);
        genesis2.setNFTLock(_tokenId);

        uint256 artifact = artifactPerGen2Nft[_tokenId];
        NftInfo memory stakingNft = NftInfo(
            _tokenId,
            block.timestamp,
            0,
            artifact
        );
        gen2InfoPerStaker[msg.sender][_tokenId] = stakingNft;
        gen2StakedArray[msg.sender].push(_tokenId);
        isGen2Staked[_tokenId] = true;

        // emit Stake(_tokenId);
    }
    function gen2Stake(uint16[] memory _tokenIds) external returns (bool) {
        uint256 tokenLen = _tokenIds.length;
        for (uint256 i = 0; i < tokenLen; i++) {
            gen2IndividualStake(_tokenIds[i]);
        }
        return true;
    }

    function gen1IndividualUnstake(uint16 _tokenId) private {
        require(genesis111.ownerOf(_tokenId) == msg.sender);

        uint256 len = gen1StakedArray[msg.sender].length;
        require(len != 0);

        uint256 idx = len;
        for (uint16 i = 0; i < len; i++) {
            if (gen1StakedArray[msg.sender][i] == _tokenId) {
                idx = i;
            }
        }
        require(idx != len);

        // genesis111.transferFrom(address(this), msg.sender, _tokenId);
        genesis111.setNFTUnLock(_tokenId);

        // uint256 stakedTime = gen1InfoPerStaker[msg.sender][idx].stakedAt;
        if (idx != len - 1) {
            gen1StakedArray[msg.sender][idx] = gen1StakedArray[msg.sender][
                len - 1
            ];
        }

        delete gen1InfoPerStaker[msg.sender][_tokenId];
        gen1StakedArray[msg.sender].pop();
        isGen1Staked[_tokenId] = false;

        // emit Unstake(_tokenId, stakedTime, block.timestamp);
    }

    function gen1Unstake(uint16[] memory _tokenIds) external returns (bool) {
        uint256 tokenLen = _tokenIds.length;
        for (uint256 i = 0; i < tokenLen; i++) {
            gen1IndividualUnstake(_tokenIds[i]);
        }
        return true;
    }

    function gen2IndividualUnstake(uint16 _tokenId) private {
        require(genesis2.ownerOf(_tokenId) == msg.sender);

        uint256 len = gen2StakedArray[msg.sender].length;
        require(len != 0);

        uint256 idx = len;
        for (uint16 i = 0; i < len; i++) {
            if (gen2StakedArray[msg.sender][i] == _tokenId) {
                idx = i;
            }
        }
        require(idx != len);

        // genesis111.transferFrom(address(this), msg.sender, _tokenId);
        genesis2.setNFTUnLock(_tokenId);

        // uint256 stakedTime = gen1InfoPerStaker[msg.sender][idx].stakedAt;
        if (idx != len - 1) {
            gen2StakedArray[msg.sender][idx] = gen2StakedArray[msg.sender][
                len - 1
            ];
        }

        delete gen2InfoPerStaker[msg.sender][_tokenId];
        gen2StakedArray[msg.sender].pop();
        isGen2Staked[_tokenId] = false;

        // emit Unstake(_tokenId, stakedTime, block.timestamp);
    }

    function gen2Unstake(uint16[] memory _tokenIds) external returns (bool) {
        uint256 tokenLen = _tokenIds.length;
        for (uint256 i = 0; i < tokenLen; i++) {
            gen2IndividualUnstake(_tokenIds[i]);
        }
        return true;
    }

    function getArtifactForGen1(uint16 _tokenId) public returns (uint256) {
        require(genesis111.ownerOf(_tokenId) == msg.sender);

        uint256 stakedTime = gen1InfoPerStaker[msg.sender][_tokenId].stakedAt;
        uint256 lastClaimedTime = gen1InfoPerStaker[msg.sender][_tokenId]
            .lastClaimedAt;
        require(stakedTime != 0);

        uint256 artifact;
        uint256 period;
        uint256 currentTime = block.timestamp;

        if (_tokenId >= 0 && _tokenId <= 10) {
            period = 12 days;
        } else if (_tokenId >= 11 && _tokenId <= 111) {
            period = 15 days;
        }

        if (lastClaimedTime >= stakedTime) {
            artifact =
                (currentTime - stakedTime) /
                period -
                (lastClaimedTime - stakedTime) /
                period;
        } else {
            artifact = (currentTime - stakedTime) / period;
        }
        require(artifact > 0);

        artifactPerGen1Nft[_tokenId] += artifact;
        gen1InfoPerStaker[msg.sender][_tokenId].lastClaimedAt = currentTime;
        gen1InfoPerStaker[msg.sender][_tokenId].artifact += artifact;

        return artifact;
    }

Now that I have given you the necessary information, I want you to help me find new gas-wasting patterns from the above codes, based on what you learn from the list of patterns. Please be creative and think out of the box beyond the patterns listed above. Please put the new gas wasting patterns in bullet points (in the form of '1.', '2.', etc), and answer the following questions for each of the found patterns (in sub-bullet-points under each bullet point):

1. How did you find this pattern? Could you explain the reasoning process, step by step, behind the discovery?

2. What should I do, step by step, to fix the found gas-wasting patterns? Could you explain the reasoning process, step by step, behind the reason why such a fix works?

3. On a score of 0 to 5, could you please tell me how would you rate this found new pattern, in terms of how much it is sacrificing readability, security, and maintainability in exchange for gas optimization (5 is the least impacted. For example, Security score of 5 means implementing the found gas-optimization pattern would have no effect on security, whereas 1 means it would reduce security)? Please format your answer as in "Readability: 5; Security: 4; Maintainability: 3". Please also provide explanations.

Here are some additional requirements:
1. If you think my prompt to you has any issues (e.g. ambiguity or lack of information), please tell me how I should improve it in the next time.
2. please help me format your answer in the form of a Latex section (e.g. \section*{Analysis of Provided Solidity Code}), since I want to assert it to a Latex document.