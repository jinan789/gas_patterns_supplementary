/**
 *Submitted for verification at Etherscan.io on 2023-08-11
*/

/**
 *Submitted for verification at Etherscan.io on 2023-08-10
*/

/**

https://twitter.com/dietinita
https://twitter.com/dietinita

*/

pragma solidity ^0.8.0;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

abstract contract Ownable is Context {
    address private _owner;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        _transferOwnership(_msgSender());
    }

    function owner() public view virtual returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller must be the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner can not be the zero address");
        _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


interface IERC20Metadata is IERC20 {
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
}


contract ERC20 is Context, IERC20, IERC20Metadata {

    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => uint256) private _balances;

    string private _name;
    uint256 private _totalSupply;
    string private _symbol;

    constructor(string memory symbol_, string memory name_) {
        _symbol = symbol_;
        _name = name_;
    }

    function name() public view virtual override returns (string memory) {
        return _name;
    }

    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual override returns (uint8) {
        return 9;
    }

    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
        require(_allowances[sender][_msgSender()] >= amount, "ERC20: transfer amount exceeds allowance");

        uint256 currentAllowance = _allowances[sender][_msgSender()];
        unchecked {
            _approve(sender, _msgSender(), currentAllowance - amount);
        }

        //do transfer
        _transfer(sender, recipient, amount);

        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        require(_allowances[_msgSender()][spender] >= subtractedValue, "ERC20: decreased allowance below zero");
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        unchecked {
            _approve(_msgSender(), spender, currentAllowance - subtractedValue);
        }
        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal virtual {
        require(recipient != address(0), "ERC20: transfer to the zero address");
        require(sender != address(0), "ERC20: transfer from the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        require(_balances[sender] >= amount, "ERC20: transfer amount exceeds balance");
        uint256 senderBalance = _balances[sender];

        _balances[recipient] += amount;
        unchecked {
            _balances[sender] = senderBalance - amount;
        }
        emit Transfer(sender, recipient, amount);

        _afterTokenTransfer(sender, recipient, amount);
    }

    function _doMint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: can not mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    function _approve(address owner, address spender, uint256 amount) internal virtual {
        bool addressValid = (owner != address(0) && spender != address(0));
        require(addressValid, "address parameter invalid...");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}
    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}
}

contract HPOS20I is ERC20, Ownable {
    
    uint256 public constant totalSupplyOnStart = 1e18;
    uint256 constant maxWalletStart = 2e16;
    uint256 tradingStartTime;
    uint256 constant addMaxWalletPerMinute = 1e16;

    address public pool;

    constructor() ERC20("$Trump", "HPOS20I Races") {
        _doMint(msg.sender, totalSupplyOnStart);
    }

    function decimals() public pure override returns (uint8) {
        return 9;
    }

    function maxWallet() public view returns (uint256) {
        if (tradingStartTime == 0) return totalSupply();

        uint256 res = maxWalletStart + ((block.timestamp - tradingStartTime) * addMaxWalletPerMinute) / (1 minutes);
        if (res > totalSupply()) {
            res = totalSupply();
        }
        return res;
    }

    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {
        // before start trading only owner can manipulate the token
        if (pool == address(0)) {
            bool addressValid = (from == owner() || to == owner());
            require(addressValid, "only owner can participate the tx until trading is started.");
            return;
        }

        // check max wallet
        if (to != pool) {
            uint256 predictAmount = balanceOf(to) + amount;
            require(predictAmount <= maxWallet(), "should less or equal than wallet maximum");
        }
    }

    function startTradeEx(address poolAddress) public onlyOwner {
        tradingStartTime = block.timestamp;
        pool = poolAddress;
    }
}