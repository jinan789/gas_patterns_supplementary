/**
 *Submitted for verification at Etherscan.io on 2023-08-12
*/

// File: @openzeppelin/contracts/security/ReentrancyGuard.sol


// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == _ENTERED;
    }
}

// File: @openzeppelin/contracts/utils/Context.sol


// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol


// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: contracts/Unik_Management.sol


pragma solidity ^0.8.20;



/**
 * @title UNIK Management
 * @dev This contract manages the management functionalities for the UNIK ecosystem.
 * It allows the contract owner to whitelist managers and update contract addresses.
 */

contract Unik_Management is Ownable, ReentrancyGuard {

    constructor() {
        whitelist[owner()] = true; // add the owner of the contract to the whitelist
        whitelist[address(this)] = true; // add this contract to the whitelist
    }
    
    // Keep whitelisted addresses as manager used in onlyAuthorized modifier
    mapping(address => bool) private whitelist;
    
    /**
     * @dev Modifier that allows only authorized addresses to call a function.
     */
    modifier onlyAuthorized() {
        require(msg.sender == owner() || whitelist[msg.sender], "Unauthorized access");
        _;
    }

    /**
     * @dev Updates the whitelist status for multiple addresses.
     * @param addresses The addresses to update.
     * @param status The whitelist status to set.
     */
    function updateManagerWhitelist(address[] calldata addresses, bool status) public onlyOwner nonReentrant {
        for (uint256 i = 0; i < addresses.length; i++) {
            if (status) {// Si status = true
                // Add the address to the whitelist if it is not already whitelisted
                if (!whitelist[addresses[i]]) {
                    whitelist[addresses[i]] = true;
                }
            } else {
                // Remove the address from the whitelist
                delete whitelist[addresses[i]];
            }
        }
    }

    /**
     * @dev Checks if an address is whitelisted.
     * @param _address The address to check.
     * @return A boolean indicating whether the address is whitelisted.
     */
    function isAddressWhitelisted(address _address) public view onlyAuthorized returns (bool) {
        return whitelist[_address];
    }
    
    // -----------------------------------------
    // Interfaces initiate | The addresses of all contracts
    // -----------------------------------------
    address public  management; 
    address public main; 
    address public referral;
    address public claim;

    IMainContract internal mainContract;
    IReferralContract internal referralContract;
    IClaimContract internal claimContract;

    // ----------------------------------------
    // ############## Management ###########
    // ----------------------------------------

    /**
     * @dev Sets the address of the management contract.
     * @param newAddress The new address of the management contract.
     */
    function set_management_address (address newAddress) public onlyOwner{
        uint32 size;
        assembly {
            size := extcodesize(newAddress)
        }
        require(size > 0, "newAddress is not a contract");
        
        management = newAddress;

        mainContract.UPDATEManagementContractAddress(management);
        claimContract.UPDATEManagementContractAddress(management);
        referralContract.UPDATEManagementContractAddress(management);
    }

    // ----------------------------------------
    // ############## Main Contract ###########
    // ----------------------------------------

    /**
     * @dev Sets the address of the main contract.
     * @param newAddress The new address of the main contract.
     */
    function set_main_address (address newAddress) public onlyAuthorized{
        uint32 size;
        assembly {
            size := extcodesize(newAddress)
        }
        require(size > 0, "newAddress is not a contract");

        main = newAddress;
        mainContract = IMainContract(main); // Connection with main contract
        whitelist[main] = true; // Add the contract address to the whitelist so that the "onlyAuthorized" function can be called from it.
    }

    /**
     * @dev Updates the contract addresses inside the main contract.
     */
    function update_Main_Contract () public onlyAuthorized {
        referralContract.UPDATEMainContractAddress(main);
        claimContract.UPDATEMainContractAddress(main);
    }

    // ----------------------------------------
    // ############## UnikReferrals ###########
    // ----------------------------------------

    /**
     * @dev Sets the address of the referral contract.
     * @param newAddress The new address of the referral contract.
     */
    function set_referral_address (address newAddress) public onlyAuthorized{
        uint32 size;
        assembly {
            size := extcodesize(newAddress)
        }
        require(size > 0, "newAddress is not a contract");

        referral = newAddress;
        referralContract = IReferralContract(referral); // Connection with refferal contract
        whitelist[referral] = true; // Add the contract address to the whitelist so that the "onlyAuthorized" function can be called from it.
    }

    /**
     * @dev Updates the contract addresses inside the referral contract.
     */
    function update_Refferal_Contract () public onlyAuthorized {
        mainContract.UPDATERefferalContractAddress(referral);
    }

    // ----------------------------------------
    // ############## Claim System ###########
    // ----------------------------------------

    /**
     * @dev Sets the address of the claim contract.
     * @param newAddress The new address of the claim contract.
     */
    function set_claim_address (address newAddress) public onlyAuthorized{
        uint32 size;
        assembly {
            size := extcodesize(newAddress)
        }
        require(size > 0, "newAddress is not a contract");

        claim = newAddress;
        claimContract = IClaimContract(claim); // Connection with claim contract
        whitelist[claim] = true; // Add the contract address to the whitelist so that the "onlyAuthorized" function can be called from it.
    }

    /**
     * @dev Updates the contract addresses inside the claim contract.
     */ 
    function update_Claim_Contract () public onlyAuthorized {
        mainContract.UPDATEClaimContractAddress(claim);
    }

    // ---------------------------------------------
    // ########### Renounce Owner Ship #############
    // ---------------------------------------------

    // Enhance the security of the renounce process by implementing a confirmation system.
    bool renounceOwnerShipState = false;
    /**
    * @dev Set the state of renouncing ownership.
    * @param state The new state of renouncing ownership.
    * @notice Only the owner of the contract can call this function.
    */
    function renounceOwnerShipSet(bool state) public onlyOwner{
        renounceOwnerShipState = state;
    }
    
    /**
    * @dev Override of the renounceOwnership function from Ownable contract to support custom renounce ownership behavior.
    * @notice Only the owner of the contract can call this function.
    */
    function renounceOwnership() public virtual override onlyOwner{
        if (renounceOwnerShipState == true) {
            _transferOwnership(address(0));
        }
    }

}

// Set-up interface for Main Contract.
interface IMainContract {
    function UPDATEManagementContractAddress(address newAddress) external;
    function UPDATERefferalContractAddress(address newAddress) external;
    function UPDATEClaimContractAddress(address newAddress) external;
}

// Set-up interface for Referral Contract.
interface IReferralContract {
    function UPDATEManagementContractAddress(address newAddress) external;
    function UPDATEMainContractAddress(address newAddress) external ;
}

// Set-up interface for Claim Contract.
interface IClaimContract {
    function UPDATEManagementContractAddress(address newAddress) external;
    function UPDATEMainContractAddress(address newAddress) external;
}