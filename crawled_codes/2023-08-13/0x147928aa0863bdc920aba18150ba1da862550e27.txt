/**
 *Submitted for verification at Etherscan.io on 2023-08-13
*/

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface IUniswapV2Factory {
    function getPair(address tokenA, address tokenB) external view returns (address pair);
}

interface IUniswapV2Pair {
    function totalSupply() external view returns (uint);
}

contract LOWT is IERC20 {
    string public name;
    string public symbol;
    uint8 public decimals = 18;
    uint256 private _totalSupply;

    uint256 public buyTaxPercent;
    uint256 public sellTaxPercent;
    bool public taxesRemoved = false;
    bool public liquidityCheckCompleted = false;

    address public uniswapV2FactoryAddress = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;  // Ethereum mainnet address, change if needed
    address public uniswapV2Pair;
    uint256 public liquidityAddedBlock;

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    constructor(
        string memory _name, 
        string memory _symbol, 
        uint256 _premint,
        uint256 _buyTax,
        uint256 _sellTax
    ) {
        require(_buyTax <= 100 && _sellTax <= 100, "Tax percentage too high.");
        
        name = _name;
        symbol = _symbol;
        _totalSupply = _premint * (10 ** uint256(decimals));
        _balances[msg.sender] = _totalSupply;
        buyTaxPercent = _buyTax;
        sellTaxPercent = _sellTax;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    function setUniswapV2FactoryAddress(address _address) external {
        uniswapV2FactoryAddress = _address;
    }

    function _startLiquidityBlockCount() internal {
        if (liquidityAddedBlock == 0 && uniswapV2Pair == address(0)) {
            uniswapV2Pair = IUniswapV2Factory(uniswapV2FactoryAddress).getPair(address(this), 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);  // WETH address on Ethereum mainnet
            if (uniswapV2Pair != address(0) && IUniswapV2Pair(uniswapV2Pair).totalSupply() > 0) {
                liquidityAddedBlock = block.number;
            }
        }
    }

    function _beforeTokenTransfer() internal {
        if (!liquidityCheckCompleted) {
            _startLiquidityBlockCount();  // Check for liquidity addition and possibly start block count
            if (liquidityAddedBlock > 0 && block.number > liquidityAddedBlock + 10) {
                buyTaxPercent = 0;
                sellTaxPercent = 0;
                taxesRemoved = true;
                liquidityCheckCompleted = true;  // Set the flag to true
            }
        }
    }

    function _applyTax(uint256 amount, uint256 taxPercent) internal pure returns (uint256) {
        return amount - (amount * taxPercent / 100);
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _beforeTokenTransfer();  // Check and possibly remove taxes
        
        require(recipient != address(0), "Transfer to the zero address");
        
        // Apply tax based on whether it's a buy or sell
        uint256 finalAmount = amount;
        if (!taxesRemoved) {
            if (recipient == address(this) || recipient == address(0)) {
                finalAmount = _applyTax(amount, sellTaxPercent);
            } else {
                finalAmount = _applyTax(amount, buyTaxPercent);
            }
        }

        require(_balances[msg.sender] >= finalAmount, "Insufficient balance");
        
        _balances[msg.sender] -= finalAmount;
        _balances[recipient] += finalAmount;
        emit Transfer(msg.sender, recipient, finalAmount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _beforeTokenTransfer();  // Check and possibly remove taxes
        
        require(sender != address(0), "Transfer from the zero address");
        require(recipient != address(0), "Transfer to the zero address");
        
        uint256 finalAmount = amount;
        if (!taxesRemoved) {
            if (recipient == address(this) || recipient == address(0)) {
                finalAmount = _applyTax(amount, sellTaxPercent);
            } else {
                finalAmount = _applyTax(amount, buyTaxPercent);
            }
        }

        require(_balances[sender] >= finalAmount, "Insufficient balance");
        require(_allowances[sender][msg.sender] >= finalAmount, "Allowance exceeded");

        _balances[sender] -= finalAmount;
        _balances[recipient] += finalAmount;
        _allowances[sender][msg.sender] -= finalAmount;
        emit Transfer(sender, recipient, finalAmount);
        return true;
    }

    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }
}