// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "./FeeControllerI.sol";

/// @notice Fee configuration for a FundingCollection
contract FeeController is FeeControllerI, Ownable {

    uint256 private openEditionFee;
    uint256 private paidMintFeeBp; // basis points out of 10000
    uint256 private minimumPriceForScalingFee;
    address private feePayoutAddress; // lore fees go here
    mapping(address => uint256) public feeDiscountsBp;

    constructor(address owner, address _feePayoutAddress) {
        _transferOwnership(owner);
        openEditionFee = 0.000777 ether;
        paidMintFeeBp = 250;//2.5%
        minimumPriceForScalingFee = 0.03108 ether;
        feePayoutAddress = _feePayoutAddress;
    }

    function setPaidMintFeeBp(uint256 _paidMintFeeBp) public onlyOwner {
        paidMintFeeBp = _paidMintFeeBp;
    }

    function setOpenEditionFee(uint256 _openEditionFee) public onlyOwner {
        openEditionFee = _openEditionFee;
    }

    function setMinimumPriceForScalingFee(uint256 _minimumPriceForScalingFee) public onlyOwner {
        minimumPriceForScalingFee = _minimumPriceForScalingFee;
    }

    // 50% = 5000
    function setFeeDiscountBp(address nft, uint256 discountBp) external onlyOwner {
        feeDiscountsBp[nft] = discountBp;
    }

    function setFeePayoutAddress(address _feePayoutAddress) external onlyOwner {
        feePayoutAddress = _feePayoutAddress;
    }

    function transferOwnership(address newOwner) public override onlyOwner {
        _transferOwnership(newOwner);
    }

    function getPaidMintFeeBp(address nft) external view returns (uint256){
        uint256 discountBp = feeDiscountsBp[nft];

        if (discountBp > 0) {
            return paidMintFeeBp * discountBp / 10_000;
        }
        return paidMintFeeBp;
    }

    function getMintFee(address nft, uint256 price, uint256 quantity) external view returns (uint256){
        uint256 discountBp = feeDiscountsBp[nft];
        uint256 fee;
        uint256 totalPrice = price * quantity;
        if (totalPrice <= minimumPriceForScalingFee) {
            fee = openEditionFee;
        } else {
            fee = paidMintFeeBp * totalPrice / 10_000;
        }
        if (discountBp > 0) {
            return fee * discountBp / 10_000;
        }
        return fee;
    }

    function getMinimumPriceForScalingFee() external view returns (uint256){
        return minimumPriceForScalingFee;
    }

    function getFeePayoutAddress() external view returns (address) {
        return feePayoutAddress;
    }
}