/*

TELEGRAM: https://t.me/cueclash
TWITTER: https://twitter.com/SafuBird
WEBSITE: https://safubird.com



                                  @@@@@@  @@@@
      ,,,,,,            ,,,,,,,,  &&&&* @@@@@@@@
      ,,,,,,,,.       ,,,,,,,,,,  &&&&* @@@@@@,,,,,,,,,,,,
        .,,,,,,,,,,,,,,,,,,,,,,,  &&&&%%  @@@@@@@@* ,,,,,
        .,,,,,,,,,,,,,,,,,,,,,,,    %&&&&&
          ,,,,,,,,,,,,,,,,,,    (&  %&&&  /((((((((((((
          ,,,,,,,,,,,,,,,,        ####, ((
              .,,,,,,,        ############

*/

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.21;

import "./IERC20.sol";
import "./SafeMath.sol";
import "./Context.sol";
import "./Ownable.sol";
import "./IUniswapV2Factory.sol";
import "./IUniswapV2Router02.sol";

interface IUniswapV2Pair {
    function sync() external;
}

contract SAFUBird is Context, IERC20, Ownable {
    using SafeMath for uint256;
    IUniswapV2Router02 public router;

    address public pair;

    mapping(address => uint256) private balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => bool) private _isExcludedFromFee;

    string private constant _name = "SAFU Bird";
    string private constant _symbol = "SAFUBIRD";
    uint8 private constant _decimals = 18;

    uint256 private _tTotal = 300000000 * 10 ** _decimals;

    uint256 public _mWalletAmount = 2000000 * 10 ** _decimals;
    uint256 public _mAmtTx = 2000000 * 10 ** _decimals;
    uint256 public sThreshold = 1000000 * 10 ** _decimals;
    uint256 public fSwap;

    address public liquidityWalletAddress;
    address public marketingWalletAddress;
    bool public isTradingOpen = false;

    struct BuyFee {
        uint256 percentLiquidity;
        uint256 percentMarketing;
    }

    struct SellFee {
        uint256 percentLiquidity;
        uint256 percentMarketing;
    }

    BuyFee public feeBuyStruct;
    SellFee public feeSellStruct;

    uint256 private liquidityPercentFee;
    uint256 private marketingPercentFee;

    bool private _isInSwapFlag;

    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiquidity);

    constructor (address markAddress, address liqAddress) {
        marketingWalletAddress = markAddress;
        liquidityWalletAddress = liqAddress;

        balances[_msgSender()] = _tTotal;

        feeBuyStruct.percentLiquidity = 3;
        feeBuyStruct.percentMarketing = 3;

        feeSellStruct.percentLiquidity = 3;
        feeSellStruct.percentMarketing = 3;

        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
        address _uniPair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());

        router = _uniswapV2Router;
        pair = _uniPair;

        _isExcludedFromFee[msg.sender] = true;
        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[address(0x00)] = true;
        _isExcludedFromFee[address(0xdead)] = true;


        emit Transfer(address(0), _msgSender(), _tTotal);
    }

    function openTrading() external onlyOwner {
        isTradingOpen = true;
    }

    function name() public pure returns (string memory) {
        return _name;
    }

    function symbol() public pure returns (string memory) {
        return _symbol;
    }

    function decimals() public pure returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);
        return true;
    }

    function excludeFromFees(address account, bool excluded) public onlyOwner {
        _isExcludedFromFee[address(account)] = excluded;
    }

    receive() external payable {}

    function subtractFeesFromBuy(uint256 amount, address from) private returns (uint256) {
        uint256 liquidityFeeToken = amount * feeBuyStruct.percentLiquidity / 100;
        uint256 marketingFeeTokens = amount * feeBuyStruct.percentMarketing / 100;

        balances[address(this)] += liquidityFeeToken + marketingFeeTokens;
        emit Transfer(from, address(this), marketingFeeTokens + liquidityFeeToken);
        return (amount - liquidityFeeToken - marketingFeeTokens);
    }

    function subtractFeesFromSell(uint256 amount, address from) private returns (uint256) {
        uint256 liquidityFeeToken = amount * feeSellStruct.percentLiquidity / 100;
        uint256 marketingFeeTokens = amount * feeSellStruct.percentMarketing / 100;

        balances[address(this)] += liquidityFeeToken + marketingFeeTokens;
        emit Transfer(from, address(this), marketingFeeTokens + liquidityFeeToken);
        return (amount - liquidityFeeToken - marketingFeeTokens);
    }

    function isExcludedFromFee(address account) public view returns (bool) {
        return _isExcludedFromFee[account];
    }

    function seeFeeStruct(uint256 _buyMarketingFee, uint256 _buyLiquidityFee, uint256 _sellMarketingFee, uint256 _sellLiquidityFee) public onlyOwner {
        require(_buyMarketingFee + _buyLiquidityFee < 500 || _sellLiquidityFee + _sellMarketingFee < 500, "Can't change fee higher than 24%");

        feeBuyStruct.percentLiquidity = _buyLiquidityFee;
        feeBuyStruct.percentMarketing = _buyMarketingFee;

        feeSellStruct.percentLiquidity = _sellLiquidityFee;
        feeSellStruct.percentMarketing = _sellMarketingFee;
    }

    function setTotalTransactionAmount(uint256 _maxTx, uint256 _maxWallet) public onlyOwner {
        require(_maxTx + _maxWallet > _tTotal / 1000, "Should be bigger than 0,1%");
        _mAmtTx = _maxTx;
        _mWalletAmount = _maxWallet;
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");

        balances[from] -= amount;
        uint256 transferAmount = amount;

        bool takeFee;

        if (!isTradingOpen) {
            require(_isExcludedFromFee[from] || _isExcludedFromFee[to], "Trading is not active.");
        }
        if (!_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {
            takeFee = true;
        }

        if (takeFee) {
            if (to != pair) {
                require(amount <= _mAmtTx, "Transfer Amount exceeds the maxTxnsAmount");
                require(balanceOf(to) + amount <= _mWalletAmount, "Transfer amount exceeds the maxWalletAmount.");
                transferAmount = subtractFeesFromBuy(amount, to);
            }

            if (from != pair) {
                require(amount <= _mAmtTx, "Transfer Amount exceeds the maxTxnsAmount");
                transferAmount = subtractFeesFromSell(amount, from);
                fSwap += 1;

                if (balanceOf(address(this)) >= sThreshold && !_isInSwapFlag) {
                    _isInSwapFlag = true;
                    swapAndAddLiquidity(sThreshold);
                    _isInSwapFlag = false;
                    fSwap = 0;
                }

                if (fSwap > 5 && !_isInSwapFlag) {
                    _isInSwapFlag = true;
                    swapAndAddLiquidity(balanceOf(address(this)));
                    _isInSwapFlag = false;
                    fSwap = 0;
                }
            }

            if (to != pair && from != pair) {
                require(amount <= _mAmtTx, "Transfer Amount exceeds the maxTxnsAmount");
                require(balanceOf(to) + amount <= _mWalletAmount, "Transfer amount exceeds the maxWalletAmount.");
            }
        }

        balances[to] += transferAmount;
        emit Transfer(from, to, transferAmount);
    }

    function swapAndAddLiquidity(uint256 amount) private {
        uint256 contractBalance = amount;
        uint256 liquidityTokens = contractBalance * (feeBuyStruct.percentLiquidity + feeSellStruct.percentLiquidity) / (feeBuyStruct.percentMarketing + feeBuyStruct.percentLiquidity + feeSellStruct.percentMarketing + feeSellStruct.percentLiquidity);
        uint256 marketingTokens = contractBalance * (feeBuyStruct.percentMarketing + feeSellStruct.percentMarketing) / (feeBuyStruct.percentMarketing + feeBuyStruct.percentLiquidity + feeSellStruct.percentMarketing + feeSellStruct.percentLiquidity);
        uint256 totalTokensToSwap = liquidityTokens + marketingTokens;

        uint256 tokensForLiquidity = liquidityTokens.div(2);
        uint256 amountToSwapForETH = contractBalance.sub(tokensForLiquidity);
        uint256 initialETHBalance = address(this).balance;
        swapTokensForEth(amountToSwapForETH);
        uint256 ethBalance = address(this).balance.sub(initialETHBalance);

        uint256 ethForLiquidity = ethBalance.mul(liquidityTokens).div(totalTokensToSwap);
        addLiquidity(tokensForLiquidity, ethForLiquidity);
        payable(marketingWalletAddress).transfer(address(this).balance);
    }

    function swapTokensForEth(uint256 tokenAmount) private {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = router.WETH();

        _approve(address(this), address(router), tokenAmount);

        router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            address(this),
            block.timestamp
        );
    }

    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
        _approve(address(this), address(router), tokenAmount);

        router.addLiquidityETH{value: ethAmount} (
            address(this),
            tokenAmount,
            0,
            0,
            liquidityWalletAddress,
            block.timestamp
        );
    }
}