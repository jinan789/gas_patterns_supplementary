// SPDX-License-Identifier: MIT

pragma solidity 0.8.3;

/**
 * @title An Ether or token balance scanner
 * @author Maarten Zuidhoorn
 * @author Luit Hollander
 */
contract BalanceScanner {
  struct Result {
    bool success;
    bytes data;
  }

  /**
   * @notice Get the Ether balance for all addresses specified
   * @param addresses The addresses to get the Ether balance for
   * @return results The Ether balance for all addresses in the same order as specified
   */
  function etherBalances(address[] calldata addresses) external view returns (Result[] memory results) {
    results = new Result[](addresses.length);

    for (uint256 i = 0; i < addresses.length; i++) {
      results[i] = Result(true, abi.encode(addresses[i].balance));
    }
  }

  /**
   * @notice Get the ERC-20 token balance of `token` for all addresses specified
   * @dev This does not check if the `token` address specified is actually an ERC-20 token
   * @param addresses The addresses to get the token balance for
   * @param token The address of the ERC-20 token contract
   * @return results The token balance for all addresses in the same order as specified
   */
  function tokenBalances(address[] calldata addresses, address token) external view returns (Result[] memory results) {
    results = new Result[](addresses.length);

    for (uint256 i = 0; i < addresses.length; i++) {
      bytes memory data = abi.encodeWithSignature("balanceOf(address)", addresses[i]);
      results[i] = staticCall(token, data, 20000);
    }
  }

  /**
   * @notice Get the ERC-20 token balance from multiple contracts for a single owner
   * @param owner The address of the token owner
   * @param contracts The addresses of the ERC-20 token contracts
   * @return results The token balances in the same order as the addresses specified
   */
  function tokensBalance(address owner, address[] calldata contracts) external view returns (Result[] memory results) {
    results = new Result[](contracts.length);

    bytes memory data = abi.encodeWithSignature("balanceOf(address)", owner);
    for (uint256 i = 0; i < contracts.length; i++) {
      results[i] = staticCall(contracts[i], data, 20000);
    }
  }

  /**
   * @notice Get the ERC-20 allowances for one contract and multiple spenders for a single owner
   * @param owner The address of the token owner
   * @param _contract The address of the ERC-20 token contract
   * @param spenders The spenders to query allowances to spend owner's funds for in the specified ERC-20 token contract
   * @return results The erc20 allowances in the same order as the spender addresses specified
   */
  function spendersAllowances(
    address owner,
    address _contract,
    address[] calldata spenders
  ) public view returns (Result[] memory results) {
    results = new Result[](spenders.length);

    for (uint256 i = 0; i < spenders.length; i++) {
      bytes memory data = abi.encodeWithSignature("allowance(address,address)", owner, spenders[i]);
      results[i] = staticCall(_contract, data, 20000);
    }
  }

  /**
   * @notice Get the ERC721 owner addresses for multiple tokenIds from a single contractAddress
   * @param token The address of the contract
   * @param tokenIds The tokenIds we want to fetch owner for
   * @return results The list of owner addresses of each tokenId
   */
  function ownersOfTokenIdsForToken(address token, uint256[] calldata tokenIds)
    public
    view
    returns (Result[] memory results)
  {
    results = new Result[](tokenIds.length);

    for (uint256 i = 0; i < tokenIds.length; i++) {
      bytes memory data = abi.encodeWithSignature("ownerOf(uint256)", tokenIds[i]);
      results[i] = staticCall(token, data, 20000);
    }
  }

  /**
   * @notice Get the ERC721 token URI for multiple tokenIds from a single contractAddress
   * @param token The address of the contract
   * @param tokenIds The tokenIds we want to fetch owner for
   * @return results The list of owner addresses of each tokenId
   */
  function tokenURIsOfTokenIdsForToken(address token, uint256[] calldata tokenIds)
    public
    view
    returns (Result[] memory results)
  {
    results = new Result[](tokenIds.length);

    for (uint256 i = 0; i < tokenIds.length; i++) {
      bytes memory data = abi.encodeWithSignature("tokenURI(uint256)", tokenIds[i]);
      results[i] = staticCallStringify(token, data, 20000);
    }
  }

  /**
   * @notice Get the ERC721 owner addresses for multiple tokenIds from multiple contractAddresses
   * @param contracts The array of contract addresses to fetch owners of tokenId from
   * @param tokenIds The 2D array of tokenIds to fetch owners for
   * @return results The list of owner addresses of each tokenId and contractAddress
   */

  function ownersOfTokenIdsForTokens(address[] calldata contracts, uint256[][] calldata tokenIds)
    external
    view
    returns (Result[][] memory results)
  {
    require(contracts.length == tokenIds.length, "Contracts and tokenIds array length mismatch");

    results = new Result[][](contracts.length);
    for (uint256 i = 0; i < contracts.length; i++) {
      results[i] = ownersOfTokenIdsForToken(contracts[i], tokenIds[i]);
    }
  }

  /**
   * @notice Get the ERC-20 allowances for multiple contract and multiple spenders for a single owner
   * @param owner The address of the token owner
   * @param contracts The addresses of the ERC-20 token contracts
   * @param spenders The spenders to query allowances to spend owner's funds for in the specified ERC-20 token contract
   * @return results The erc20 allowances in the same order as the spender addresses specified
   */
  function spendersAllowancesForTokens(
    address owner,
    address[] calldata contracts,
    address[][] calldata spenders
  ) external view returns (Result[][] memory results) {
    require(contracts.length == spenders.length, "Contracts and spenders array length mismatch");

    results = new Result[][](contracts.length);
    for (uint256 i = 0; i < contracts.length; i++) {
      results[i] = spendersAllowances(owner, contracts[i], spenders[i]);
    }
  }

  /**
   * @notice Get the ERC721 token metadata URIs for multiple tokenIds from multiple contractAddresses
   * @param contracts The array of contract addresses to fetch owners of tokenId from
   * @param tokenIds The 2D array of tokenIds to fetch owners for
   * @return results The list of token metadata URIs of each tokenId and contractAddress
   */

  function tokenURIsofTokenIdsForTokens(address[] calldata contracts, uint256[][] calldata tokenIds)
    external
    view
    returns (Result[][] memory results)
  {
    require(contracts.length == tokenIds.length, "Contracts and tokenIds array length mismatch");

    results = new Result[][](contracts.length);
    for (uint256 i = 0; i < contracts.length; i++) {
      results[i] = tokenURIsOfTokenIdsForToken(contracts[i], tokenIds[i]);
    }
  }

  /**
   * @notice Get the ERC1155 balance of an accountAddress and tokenId for multiple contractAddress
   * @param tokens The array of contract addresses to fetch balances from
   * @param accounts The array of account addresses to fetch balances for
   * @param tokenIds The array of tokenIds to fetch balances for
   * @return results The list of balances of each owner addresses and tokenId
   */
  function balanceOfAccountAndTokenIdForTokens(
    address[] calldata tokens,
    address[][] calldata accounts,
    uint256[][] calldata tokenIds
  ) external view returns (Result[] memory results) {
    require(tokens.length == accounts.length && tokens.length == tokenIds.length, "Arrays length mismatch");

    results = new Result[](tokens.length);
    for (uint256 i = 0; i < tokens.length; i++) {
      bytes memory data = abi.encodeWithSignature("balanceOfBatch(address[],uint256[])", accounts[i], tokenIds[i]);

      results[i] = staticCall(tokens[i], data, 20000);
    }
  }

  /**
   * @notice Call multiple contracts with the provided arbitrary data
   * @param contracts The contracts to call
   * @param data The data to call the contracts with
   * @return results The raw result of the contract calls
   */
  function call(address[] calldata contracts, bytes[] calldata data) external view returns (Result[] memory results) {
    return call(contracts, data, gasleft());
  }

  /**
   * @notice Call multiple contracts with the provided arbitrary data
   * @param contracts The contracts to call
   * @param data The data to call the contracts with
   * @param gas The amount of gas to call the contracts with
   * @return results The raw result of the contract calls
   */
  function call(
    address[] calldata contracts,
    bytes[] calldata data,
    uint256 gas
  ) public view returns (Result[] memory results) {
    require(contracts.length == data.length, "Length must be equal");
    results = new Result[](contracts.length);

    for (uint256 i = 0; i < contracts.length; i++) {
      results[i] = staticCall(contracts[i], data[i], gas);
    }
  }

  /**
   * @notice Static call a contract with the provided data
   * @param target The address of the contract to call
   * @param data The data to call the contract with
   * @param gas The amount of gas to forward to the call
   * @return result The result of the contract call
   */
  function staticCall(
    address target,
    bytes memory data,
    uint256 gas
  ) private view returns (Result memory) {
    uint256 size = codeSize(target);

    if (size > 0) {
      (bool success, bytes memory result) = target.staticcall{ gas: gas }(data);
      if (success) {
        return Result(success, result);
      }
    }

    return Result(false, "");
  }

  /**
   * @notice Static call a contract with the provided data
   * @param target The address of the contract to call
   * @param data The data to call the contract with
   * @param gas The amount of gas to forward to the call
   * @return result The result of the contract call
   */
  function staticCallStringify(
    address target,
    bytes memory data,
    uint256 gas
  ) private view returns (Result memory) {
    uint256 size = codeSize(target);

    if (size > 0) {
      string memory decodedResult;
      (bool success, bytes memory result) = target.staticcall{ gas: gas }(data);
      if (success) {
        decodedResult = abi.decode(result, (string));
        return Result(success, bytes(decodedResult));
      }
    }

    return Result(false, "");
  }

  /**
   * @notice Get code size of address
   * @param _address The address to get code size from
   * @return size Unsigned 256-bits integer
   */
  function codeSize(address _address) private view returns (uint256 size) {
    // solhint-disable-next-line no-inline-assembly
    assembly {
      size := extcodesize(_address)
    }
  }
}