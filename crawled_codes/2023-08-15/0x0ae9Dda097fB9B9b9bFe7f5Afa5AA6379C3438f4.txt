// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {ReentrancyGuard} from "@openzeppelin/contracts/security/ReentrancyGuard.sol";

/**
 * @title P2PEscrow
 * @author Vamsi Krishna Srungarapu
 * @notice Smart Contract aiding two users to swap tokens while acting as an escrow
 */
contract P2PEscrow is Ownable, ReentrancyGuard {
    using SafeERC20 for IERC20;

    // Events emitted during the contract functions execution
    event OrderDeposit(bytes16 indexed orderId);
    event OrderSuccessful(bytes16 indexed orderId);
    event RefundedOrder(bytes16 indexed orderId);
    event CancelledOrder(bytes16 indexed orderId);

    // End of Events

    // errors
    error OrderFailure(OrderFailureReason reason);
    error RefundFailure(RefundFailureReason reason);
    error CancelOrderFailure(CancelOrderFailureReason reason);

    enum OrderType {
        MARKET_ORDER,
        LIMIT_ORDER
    }
    enum OrderStatus {
        AWAITING_DELIVERY,
        SUCCESS,
        REFUNDED,
        CANCELLED
    }
    enum OrderFailureReason {
        INVALID_STATE,
        INSUFFICIENT_BALANCE,
        DUPLICATE_ORDER,
        INVALID_ORDER_DETAILS
    }
    enum RefundFailureReason {
        REFUND_ONLY_AFTER_TIMEOUT,
        INVALID_STATE
    }
    enum CancelOrderFailureReason {
        ONLY_ORDER_CREATOR_CANCEL,
        INVALID_STATE
    }
    // Order struct saving the state of order details
    struct Order {
        address sender;
        uint96 swapTokenAmount;
        uint96 tokenAmount;
        uint32 timeoutTime;
        uint16 tokenId;
        uint16 swapTokenId;
        OrderStatus status;
        OrderType orderType;
    }

    // Default order time out duration in
    // seconds saved at contract level
    uint32 public orderTimeoutDuration;
    // Mapping between order id and the order object
    mapping(bytes16 => Order) orderMap;
    // List of whitelisted token addresses
    address[] tokens;

    constructor(address[] memory _tokens) {
        // Set default order time out to 300 seconds
        orderTimeoutDuration = 300;
        tokens = _tokens;
    }

    /**
     * Helper function for transferring asset from user in to the smart contract
     * @param user address from which the tokens are pulled in to this contract
     * @param asset token address which is being pulled from the user
     * @param amount amount of token address that is being pulled from user
     */
    function _pullTokens(address user, address asset, uint256 amount) private {
        if (asset == address(0)) return;
        IERC20(asset).safeTransferFrom(user, address(this), amount);
    }

    /**
     * Helper function for transferring asset from this smart contract to user
     * @param user asset receiving address
     * @param asset token address which is sent to user
     * @param amount amount of token address that is being sent to user
     */
    function _pushTokens(address user, address asset, uint256 amount) private {
        if (asset == address(0)) return;
        IERC20(asset).safeTransfer(user, amount);
    }

    /**
     * Helper function for transferring asset from sender to receiver
     * @param sender token sending address
     * @param receiver token receiving address
     * @param asset token address which is being sent from sender to receiver
     * @param amount amount of token address that is being sent from sender to receiver
     */
    function _sendTokens(
        address sender,
        address receiver,
        address asset,
        uint256 amount
    ) private {
        if (asset == address(0)) return;
        IERC20(asset).safeTransferFrom(sender, receiver, amount);
    }

    /**
     * Set the default time out duration. Only contract owner can invoke this functionality
     * @param timeoutDuration default time out duration in seconds
     */
    function setOrderTimeout(uint32 timeoutDuration) external onlyOwner {
        orderTimeoutDuration = timeoutDuration;
    }

    /**
     * @notice executes a market order or limit order
     * @dev execute a market order or a limit order. A user who wants to
     * trade in and a user who wants to trade out should use the same order id.
     * A valid combination can be as below:
     * Let us assume that block.timestamp is less than given timeout time while placing the order
     * User 1 --> (tokenId: 1, tokenAmount: 1_000_000, swapTokenId: 2, swapTokenAmount: 2_000_000, timeoutTime: 1686927958, orderId: o1, orderType: 0)
     * User 2 --> (tokenId: 2, tokenAmount: 2_000_000, swapTokenId: 1, swapTokenAmount: 1_000_000, timeoutTime: 1686927958, orderId: o1, orderType: 0)
     * Now, when user 1 executes the order, tokenId:1 amount is deposited into the escrow amount.
     * Later when user 2 executes the order before the timeoutTime: 1686927958,
     *  tokenId:1 amount is moved from escrow to user and tokenId: 2 amount is moved from user 2 to user 1
     * @param tokenId id of the token that user wants to trade in
     * @param tokenAmount amount of token user wants to trade in
     * @param swapTokenId id of the token that a user wants to trade out
     * @param swapTokenAmount amount of token user wants to trade out
     * @param timeoutTime expiry time of the order
     * @param orderId unique order id
     * @param orderType can be market order or limit order
     */
    function executeOrder(
        uint16 tokenId,
        uint96 tokenAmount,
        uint16 swapTokenId,
        uint96 swapTokenAmount,
        uint32 timeoutTime,
        bytes16 orderId,
        OrderType orderType
    ) private nonReentrant returns (bytes16) {
        require(tokenId < tokensLength(), "invalid tokenId");
        require(swapTokenId < tokensLength(), "invalid swap token id");

        if (orderMap[orderId].sender == msg.sender)
            revert OrderFailure(OrderFailureReason.DUPLICATE_ORDER);

        if (orderMap[orderId].sender == address(0)) {
            orderMap[orderId].sender = msg.sender;
            orderMap[orderId].tokenId = tokenId;
            orderMap[orderId].swapTokenId = swapTokenId;
            orderMap[orderId].tokenAmount = tokenAmount;
            orderMap[orderId].swapTokenAmount = swapTokenAmount;
            orderMap[orderId].timeoutTime = timeoutTime;
            orderMap[orderId].status = OrderStatus.AWAITING_DELIVERY;
            orderMap[orderId].orderType = orderType;

            emit OrderDeposit(orderId);
            _pullTokens(msg.sender, tokens[tokenId], tokenAmount);

            return orderId;
        }

        if (orderMap[orderId].status != OrderStatus.AWAITING_DELIVERY)
            revert OrderFailure(OrderFailureReason.INVALID_STATE);
        if (block.timestamp > orderMap[orderId].timeoutTime)
            revert OrderFailure(OrderFailureReason.INVALID_STATE);
        if (
            orderMap[orderId].tokenId != swapTokenId ||
            orderMap[orderId].tokenAmount != swapTokenAmount ||
            orderMap[orderId].swapTokenId != tokenId ||
            orderMap[orderId].swapTokenAmount != tokenAmount ||
            orderMap[orderId].orderType != orderType
        ) revert OrderFailure(OrderFailureReason.INVALID_ORDER_DETAILS);

        orderMap[orderId].status = OrderStatus.SUCCESS;
        emit OrderSuccessful(orderId);

        address swapToken = tokens[swapTokenId];
        _pushTokens(msg.sender, swapToken, swapTokenAmount);

        _sendTokens(
            msg.sender,
            orderMap[orderId].sender,
            tokens[tokenId],
            tokenAmount
        );

        return orderId;
    }

    /**
     * @notice executes a market order
     * @dev see executeOrder comments. this function is just a wrapper on top of executeOrder
     * @param tokenId id of the token that user wants to trade in
     * @param tokenAmount amount of token user wants to trade in
     * @param swapTokenId id of the token that a user wants to trade out
     * @param swapTokenAmount amount of token user wants to trade out
     * @param orderId unique order id
     */
    function marketOrder(
        uint16 tokenId,
        uint96 tokenAmount,
        uint16 swapTokenId,
        uint96 swapTokenAmount,
        bytes16 orderId
    ) external returns (bytes16) {
        return
            executeOrder(
                tokenId,
                tokenAmount,
                swapTokenId,
                swapTokenAmount,
                uint32(block.timestamp + orderTimeoutDuration),
                orderId,
                OrderType.MARKET_ORDER
            );
    }

    /**
     * @notice executes a limit order
     * @dev see executeOrder comments. this function is just a wrapper on top of executeOrder
     * @param tokenId id of the token that user wants to trade in
     * @param tokenAmount amount of token user wants to trade in
     * @param swapTokenId id of the token that a user wants to trade out
     * @param swapTokenAmount amount of token user wants to trade out
     * @param timeoutTime expiry time of the order
     * @param orderId unique order id
     */
    function limitOrder(
        uint16 tokenId,
        uint96 tokenAmount,
        uint16 swapTokenId,
        uint96 swapTokenAmount,
        uint32 timeoutTime,
        bytes16 orderId
    ) external returns (bytes16) {
        return
            executeOrder(
                tokenId,
                tokenAmount,
                swapTokenId,
                swapTokenAmount,
                timeoutTime,
                orderId,
                OrderType.LIMIT_ORDER
            );
    }

    /**
     * @notice Cancel a waiting order
     * @dev a user who created the order first with the given order id or the smart contract owner can only cancel the order
     * @param orderId order id that has to be cancelled
     */
    function cancelOrder(bytes16 orderId) external {
        Order memory order = orderMap[orderId];
        if (!(msg.sender == order.sender || msg.sender == owner()))
            revert CancelOrderFailure(
                CancelOrderFailureReason.ONLY_ORDER_CREATOR_CANCEL
            );
        if (order.status != OrderStatus.AWAITING_DELIVERY)
            revert CancelOrderFailure(CancelOrderFailureReason.INVALID_STATE);

        orderMap[orderId].status = OrderStatus.CANCELLED;
        emit CancelledOrder(orderId);

        _pushTokens(order.sender, tokens[order.tokenId], order.tokenAmount);
    }

    /**
     * fetch order details by order id
     * @param orderId order id
     */
    function getOrder(bytes16 orderId) external view returns (Order memory) {
        require(orderMap[orderId].sender != address(0), "invalid order id");
        return orderMap[orderId];
    }

    /**
     * get index of the whitelisted token address
     * @param token whitelisted token address
     */
    function getTokenIndex(address token) external view returns (int) {
        for (uint i = 0; i < tokens.length; i++) {
            if (tokens[i] == token) return int(i);
        }
        return -1;
    }

    /**
     * get whitelisted token address by index
     * @param index whitelisted token index
     */
    function getTokenAddressByIndex(
        uint index
    ) external view returns (address) {
        require(index < tokensLength(), "invalid index");
        return tokens[index];
    }

    /**
     * @notice The smart contract owner can add tokens to the contract and whitelist them
     * for using in executing the market order or limit order
     * @param inputTokens tokens that have to be whitelisted
     */
    function addTokens(address[] calldata inputTokens) external onlyOwner {
        for (uint i = 0; i < inputTokens.length; i++) {
            tokens.push(inputTokens[i]);
        }
    }

    /**
     * @notice helper function to find the total number of whitelisted
     * tokens in the smart contract
     */
    function tokensLength() public view returns (uint) {
        return tokens.length;
    }
}