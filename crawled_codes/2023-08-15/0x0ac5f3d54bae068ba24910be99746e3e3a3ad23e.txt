// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.20;

/*
▄▄███▄▄·███████ ███████ ███    ██ ██████  
██      ██      ██      ████   ██ ██   ██ 
███████ ███████ █████   ██ ██  ██ ██   ██ 
     ██      ██ ██      ██  ██ ██ ██   ██ 
███████ ███████ ███████ ██   ████ ██████  
  ▀▀▀                                     

Website: https://www.sendit.finance/
Twitter: https://twitter.com/SenditERC
Telegram: https://t.me/SendItETH
Youtube: https://www.youtube.com/@SenditERC
Gitbook: https://sendit-usdsend.gitbook.io/project-overview/
*/

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol";
import "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol";

contract SendIt is ERC20("SendIt", "$SEND"), Ownable {

    // Uniswap
    IUniswapV2Factory public constant UNISWAP_FACTORY =
    IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);

    IUniswapV2Router02 public constant UNISWAP_ROUTER = 
    IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);

    // Variables
    address public immutable UNISWAP_V2_PAIR;

    uint256 constant TOTAL_SUPPLY = 1_000_000_000 ether;
    address constant BURN_ADDRESS = address(0xdead);
    uint256 public tradingOpenedOnBlock;

    bool private swapping;
    uint256 public tokenSwapThreshold;

    address public marketingWallet;
    address public treasuryWallet;

    bool public limitsInEffect = true;
    bool public tradingActive = false;
    bool public swapEnabled = false;
    bool public fetchFees = true;

    uint256 public maxBuyAmount;
    uint256 public maxSellAmount;
    uint256 public maxWalletAmount;

    uint256 public buyTotalFees;
    uint256 public buyTreasuryFee;
    uint256 public buyMarketingFee;
    uint256 public buyLiquidityFee;

    uint256 public sellTotalFees;
    uint256 public sellTreasuryFee;
    uint256 public sellMarketingFee;
    uint256 public sellLiquidityFee;

    uint256 public tokensForTreasury;
    uint256 public tokensForMarketing;
    uint256 public tokensForLiquidity;

    // Mappings
    mapping(address => bool) private _isExcludedFromFees;
    mapping(address => bool) public _isExcludedMaxTransactionAmount;

    // Events
    event EnabledTrading(bool tradingActive);
    event RemovedLimits();
    event ExcludeFromFees(address indexed account, bool isExcluded);
    event UpdatedMaxBuyAmount(uint256 newAmount);
    event UpdatedMaxSellAmount(uint256 newAmount);
    event UpdatedMaxWalletAmount(uint256 newAmount);
    event UpdatedTreasuryWallet(address indexed newWallet);
    event UpdatedMarketingWallet(address indexed newWallet);
    event MaxTransactionExclusion(address _address, bool excluded);

    event SwapAndLiquify(
        uint256 tokensSwapped,
        uint256 ethReceived,
        uint256 tokensIntoLiquidity
    );

    constructor(){

        _mint(msg.sender, TOTAL_SUPPLY);

        _approve(address(this), address(UNISWAP_ROUTER), ~uint256(0));

        _excludeFromMaxTransaction(address(UNISWAP_ROUTER), true);

    
        UNISWAP_V2_PAIR = UNISWAP_FACTORY.createPair(
            address(this),
            UNISWAP_ROUTER.WETH()
        );

        maxBuyAmount = (totalSupply() * 10) / 1_000; // 1% max buy
        maxSellAmount = (totalSupply() * 10) / 1_000; // 1% max sell
        maxWalletAmount = (totalSupply() * 20) / 1_000; // 2% max holdings
        tokenSwapThreshold = (totalSupply() * 50) / 10_000; // 0.5% swapToEth threshold 

        treasuryWallet = msg.sender;
        marketingWallet = 0x06DEF56753307215fdfCe5D8f983B3d9Aaf73D3C;

        _excludeFromMaxTransaction(msg.sender, true);
        _excludeFromMaxTransaction(address(this), true);
        _excludeFromMaxTransaction(address(0xdead), true);
        excludeFromFees(msg.sender, true);
        excludeFromFees(address(this), true);
        excludeFromFees(address(0xdead), true);
    }

    receive() external payable {}



    /**
     * @dev Updates max `buy`, `sell` & `hold` amounts.
     * WARNING: These limits disable when executing removeLimits function
     *
     * functionality:
     * - prevents user from purchasing over 1% of supply
     * - prevents user from selling over 1% of supply
     * - prevents user from holding over 2% of supply
     */
    function updateMaxBuyAmount(uint256 newNum) external onlyOwner {
        require(
            newNum >= ((totalSupply() * 1) / 1_000),
            "SENDIT ERROR: Cannot set max buy amount lower than 0.1%"
        );
        maxBuyAmount = newNum;
        emit UpdatedMaxBuyAmount(maxBuyAmount);
    }

    function updateMaxSellAmount(uint256 newNum) external onlyOwner {
        require(
            newNum >= ((totalSupply() * 1) / 1_000),
            "SENDIT ERROR: Cannot set max sell amount lower than 0.1%"
        );
        maxSellAmount = newNum;
        emit UpdatedMaxSellAmount(maxSellAmount);
    }

    function updateMaxWalletAmount(uint256 newNum) external onlyOwner {
        require(
            newNum >= ((totalSupply() * 3) / 1_000),
            "SENDIT ERROR: Cannot set max wallet amount lower than 0.3%"
        );
        maxWalletAmount = newNum;
        emit UpdatedMaxWalletAmount(maxWalletAmount);
    }

    function updateSwapTokensAtAmount(uint256 newAmount) external onlyOwner {
        require(
            newAmount >= (totalSupply() * 1) / 100_000,
            "SENDIT ERROR: Swap amount cannot be lower than 0.001% total supply."
        );
    
        tokenSwapThreshold = newAmount;
    }

    function removeLimits() external onlyOwner {
        limitsInEffect = false;
        emit RemovedLimits();
    }



    /**
     * @dev Exclude address controls.
     *
     * functionality:
     * - grants override to fees & txn limits
     */
    function _excludeFromMaxTransaction(
        address updAds,
        bool isExcluded
    ) private {
        _isExcludedMaxTransactionAmount[updAds] = isExcluded;
        emit MaxTransactionExclusion(updAds, isExcluded);
    }

    function excludeFromFees(address account, bool excluded) public onlyOwner {
        _isExcludedFromFees[account] = excluded;
        emit ExcludeFromFees(account, excluded);
    }



    /**
     * @dev Retrieves appropriate tax rate.
     *
     * functionality:
     * - returns tax rate depending on tier current block is in
     */
    function getFees() internal {
        require(
            tradingOpenedOnBlock > 0, "SENDIT ERROR: Trading not live"
        );
        uint256 currentBlock = block.number;
        uint256 lastTierOneBlock = tradingOpenedOnBlock + 10;
        uint256 lastTierTwoBlock = tradingOpenedOnBlock + 20;
        if(currentBlock <= lastTierOneBlock) {
            buyTotalFees = 25;
            sellTotalFees = 25;
        } else if(currentBlock > lastTierOneBlock && currentBlock <= lastTierTwoBlock) {
            buyTotalFees = 15;
            sellTotalFees = 15;
        } else {
            buyTotalFees = 4;
            sellTotalFees = 4;
            fetchFees = false;
        }
        // Buy fees
        buyLiquidityFee = buyTotalFees / 4;
        buyMarketingFee = buyTotalFees / 4;
        buyTreasuryFee = buyTotalFees / 2;
        // Sale fees
        sellLiquidityFee = sellTotalFees / 4;
        sellMarketingFee = sellTotalFees / 4;
        sellTreasuryFee = sellTotalFees / 2;
    }



    /**
     * @dev Set trading status live.
     * WARNING: Once enabled, can never be turned off
     *
     * functionality:
     * - opens token for trading
     */
    function openTrading() public onlyOwner {
        require(tradingOpenedOnBlock == 0, "SENDIT ERROR: Token state is already live !");
        tradingOpenedOnBlock = block.number;
        tradingActive = true;
        swapEnabled = true;
        emit EnabledTrading(tradingActive);
    }



    /**
     * @dev Edits team wallets & fee recipients.
     * WARNING: Cannot be called if contract is renounced
     *
     * functionality:
     * - sets marketing wallet address
     * - sets treasury wallet address
     */
    function setMarketingWallet(address _marketingWallet) external onlyOwner {
        require(_marketingWallet != address(0), "SENDIT ERROR: _marketingWallet address cannot be 0");
        marketingWallet = payable(_marketingWallet);
        emit UpdatedMarketingWallet(_marketingWallet);
    }

    function setTreasuryWallet(address _treasuryWallet) external onlyOwner {
        require(_treasuryWallet != address(0), "SENDIT ERROR: _treasuryWallet address cannot be 0");
        treasuryWallet = payable(_treasuryWallet);
        emit UpdatedTreasuryWallet(_treasuryWallet);
    }

    /**
     * @dev Governs the trading protocol.
     *
     * functionality:
     * - retrieves & collects tax rates
     * - enforces trading limits & restrictions
     */
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal override {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "SENDIT ERROR: amount must be greater than 0");

        if (limitsInEffect) {
            if (
                from != owner() &&
                to != owner() &&
                to != address(0) &&
                to != address(0xdead)
            ) {
                if (!tradingActive) {
                    require(
                        _isExcludedMaxTransactionAmount[from] ||
                            _isExcludedMaxTransactionAmount[to],
                        "SENDIT ERROR: Trading is not active."
                    );
                    require(from == owner(), "SENDIT ERROR: Trading is enabled");
                }

                //when buy
                if (
                    from == UNISWAP_V2_PAIR && !_isExcludedMaxTransactionAmount[to]
                ) {
                    require(
                        amount <= maxBuyAmount,
                        "SENDIT ERROR: Buy transfer amount exceeds the max buy."
                    );
                    require(
                        amount + balanceOf(to) <= maxWalletAmount,
                        "SENDIT ERROR: Cannot Exceed max wallet"
                    );
                }
                //when sell
                else if (
                    to == UNISWAP_V2_PAIR && !_isExcludedMaxTransactionAmount[from]
                ) {
                    require(
                        amount <= maxSellAmount,
                        "SENDIT ERROR: Sell transfer amount exceeds the max sell."
                    );
                } else if (
                    !_isExcludedMaxTransactionAmount[to] &&
                    !_isExcludedMaxTransactionAmount[from]
                ) {
                    require(
                        amount + balanceOf(to) <= maxWalletAmount,
                        "SENDIT ERROR: Cannot Exceed max wallet"
                    );
                }
            }
        }

        uint256 contractTokenBalance = balanceOf(address(this));

        bool canSwap = contractTokenBalance >= tokenSwapThreshold;

        if (
            canSwap &&
            swapEnabled &&
            !swapping &&
            !(from == UNISWAP_V2_PAIR) &&
            !_isExcludedFromFees[from] &&
            !_isExcludedFromFees[to]
        ) {
            swapping = true;
            swapBack();
            swapping = false;
        }

        bool takeFee = true;
        // if any account belongs to _isExcludedFromFee account then remove the fee
        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {
            takeFee = false;
        }

        uint256 fees = 0;
        // only take fees on Trades, not on wallet transfers

        if (takeFee) {
            
            // Determine current fee rate if last tier block not surpassed
            if(fetchFees){
               getFees(); 
            }
            

            // on sell
            if (to == UNISWAP_V2_PAIR && sellTotalFees > 0) {
                fees = (amount * sellTotalFees) / 100;
                tokensForLiquidity += (fees * sellLiquidityFee) / sellTotalFees;
                tokensForTreasury += (fees * sellTreasuryFee) / sellTotalFees;
                tokensForMarketing += (fees * sellMarketingFee) / sellTotalFees;
            }
            // on buy
            else if (from == UNISWAP_V2_PAIR && buyTotalFees > 0) {
                fees = (amount * buyTotalFees) / 100;
                tokensForLiquidity += (fees * buyLiquidityFee) / buyTotalFees;
                tokensForTreasury += (fees * buyTreasuryFee) / buyTotalFees;
                tokensForMarketing += (fees * buyMarketingFee) / buyTotalFees;
            }

            if (fees > 0) {
                super._transfer(from, address(this), fees);
            }

            amount -= fees;
        }

        super._transfer(from, to, amount);
    }


    /**
     * @dev Adds liquidity & swaps back.
     *
     * functionality:
     * - performs swaps to add liquidity & collect taxes
     */ 
    function swapTokensForEth(uint256 tokenAmount) private {
        // generate the uniswap pair path of token -> weth
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = UNISWAP_ROUTER.WETH();

        // make the swap
        UNISWAP_ROUTER.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of ETH
            path,
            address(this),
            block.timestamp
        );
    }

    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
        // add the liquidity
        UNISWAP_ROUTER.addLiquidityETH{value: ethAmount}(
            address(this),
            tokenAmount,
            0, // slippage is unavoidable
            0, // slippage is unavoidable
            treasuryWallet,
            block.timestamp
        );
    }

    function swapBack() private {

        uint256 contractBalance = balanceOf(address(this));

        uint256 totalTokensToSwap = tokensForLiquidity + tokensForTreasury + tokensForMarketing;

        if (contractBalance == 0 || totalTokensToSwap == 0) {
            return;
        }

        if (contractBalance > tokenSwapThreshold) {
            contractBalance = tokenSwapThreshold;
        }

        bool success;

        uint256 liquidityTokens = (contractBalance * tokensForLiquidity) /
            totalTokensToSwap /
            2;
            
        swapTokensForEth(contractBalance - liquidityTokens);

        uint256 ethBalance = address(this).balance;
        uint256 ethForLiquidity = ethBalance;

        uint256 ethForTreasury = (ethBalance * tokensForTreasury) /
            (totalTokensToSwap - (tokensForLiquidity / 2));

        uint256 ethForMarketing = (ethBalance * tokensForMarketing) /
            (totalTokensToSwap - (tokensForLiquidity / 2));


        ethForLiquidity -= (ethForTreasury + ethForMarketing);

        tokensForLiquidity = 0;
        tokensForTreasury = 0;
        tokensForMarketing = 0;

        if (liquidityTokens > 0 && ethForLiquidity > 0) {
            addLiquidity(liquidityTokens, ethForLiquidity);
        }

        (success, ) = address(marketingWallet).call{value: ethForMarketing}("");
        (success, ) = address(treasuryWallet).call{value: address(this).balance}("");
    }


    /**
     * @dev Emergency withdrawl functions for stuck tokens / eth.
     * WARNING: Cannot be called if contract is renounced
     *
     * functionality:
     * - withdraws Eth to owner wallet
     * - withdraws taxed $SEND tokens to owner wallet
     */   
    function withdrawStuckToken(address _token) external {
        require(
            msg.sender == owner() || msg.sender == treasuryWallet || msg.sender == marketingWallet,
            "SENDIT ERROR: Not authorized"
        );
        if (_token == address(0x0)) {
            payable(owner()).transfer(address(this).balance);
            return;
        }
        ERC20 erc20token = ERC20(_token);
        uint256 balance = erc20token.balanceOf(address(this));
        erc20token.transfer(owner(), balance);
    }


    function withdrawStuckEth() external onlyOwner {
        (bool success, ) = owner().call{value: address(this).balance}("");
        require(success, "SENDIT ERROR: failed to withdraw funds");
    }
    


}