/**
 *Submitted for verification at Etherscan.io on 2023-08-05
*/

// Welcome to The Tax Game. Upon going live the taxes will be sent to the burn address. Every 10 minute window that passes 
// will create a new controller of the taxes aka the new Tax Man. The largest buy without selling (fuck you Jared) will have 
// their wallet address set as the new wallet that taxes are sent to. If a 10 minute window passes without any buys the 
// tax wallet gets reset to the burn address. Happy playing and may the taxes be ever in your favor.

// t.me/TheTaxGamePortal
// https://twitter.com/taxgame_erc20
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract TAXMAN is IERC20 {
    string private _name = "The Tax Game";
    string private _symbol = "TAXMAN";
    uint8 private _decimals = 18;
    uint256 private _totalSupply = 100000000 * 10**18;
    address private _owner;
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    
    uint256 public buyTaxPercentage = 5;
    uint256 public sellTaxPercentage = 5;
    address public taxWallet;

    bool public tradingStarted = false;

    constructor() {
        _owner = msg.sender;
        _balances[msg.sender] = _totalSupply;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);
        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");

        if (!tradingStarted && sender != _owner) {
            require(sender == _owner, "Trading has not started yet");
        }

        uint256 taxPercentage = sender == _owner ? buyTaxPercentage : sellTaxPercentage;
        uint256 taxAmount = (amount * taxPercentage) / 100;
        uint256 finalAmount = amount - taxAmount;

        _balances[sender] -= amount;
        _balances[recipient] += finalAmount;
        _balances[taxWallet] += taxAmount;

        emit Transfer(sender, recipient, finalAmount);
        emit Transfer(sender, taxWallet, taxAmount);
    }

    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function startTrading() public {
        require(msg.sender == _owner, "Only the owner can start trading");
        tradingStarted = true;
    }

    function setTaxWallet(address walletAddress) public {
        require(msg.sender == _owner, "Only the owner can set the tax wallet");
        require(walletAddress != address(0), "Invalid wallet address");
        taxWallet = walletAddress;
    }

    function renounceOwnership(address burnAddress) public {
        require(msg.sender == _owner, "Only the owner can renounce ownership");
        require(burnAddress != address(0), "Invalid burn address");
        _owner = burnAddress;
    }
}