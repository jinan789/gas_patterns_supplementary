// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.19;

import {ERC20} from "solmate/tokens/ERC20.sol";
import {Owned} from "solmate/auth/Owned.sol";
import {SafeTransferLib} from "solmate/utils/SafeTransferLib.sol";

import {Token} from "./Token.sol";

import {PoolAddress} from "./libraries/PoolAddress.sol";

import {INonfungiblePositionManager as IUniManager} from "./interfaces/INonfungiblePositionManager.sol";
import {ISwapRouter} from "./interfaces/ISwapRouter.sol";
import {IUniV3Pool} from "./interfaces/IUniV3Pool.sol";

/* 
This contract seeds Uniswap V3 liquidity pools in permanent unremovable ranges.
It allows for collection of trading fees and token buybacks.
 */
contract LiquidityManager {
    using SafeTransferLib for ERC20;

    IUniManager public constant manager = IUniManager(0xC36442b4a4522E871399CD717aBDD847Ab11FE88);
    ISwapRouter public constant router = ISwapRouter(0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45);
    Token public immutable token;
    uint256 public burnRatio = 75;
    address public treasury = msg.sender;
    uint256[] public positions;

    event TreasuryChanged(address indexed newTreasury);

    struct SeedLiquidityParams {
        address pairToken;
        int24 tickLower;
        int24 tickUpper;
    }

    constructor(Token _token) {
        token = _token;
        _approve(address(token), address(manager));
    }

    function seedLiquidity(SeedLiquidityParams[] memory params) external {
        require(block.timestamp > 1691337600, "LiquidityManager: Too early");
        uint256 balance = token.balanceOf(address(this));
        require(balance == token.totalSupply(), "LiquidityManager: Already seeded");
        // Seed equal liquidity accross all pools.
        uint256 amount = balance / params.length;
        for (uint256 i = 0; i < params.length; i++) {
            uint256 tokenId = _seedLiquidity(params[i].pairToken, params[i].tickLower, params[i].tickUpper, amount);
            positions.push(tokenId);
            _approve(params[i].pairToken, address(router));
        }
    }

    function buybackAndBurn(uint256 index) external returns (uint256 purchasedAmount, uint256 burnedAmount) {
        uint256 tokenId = positions[index];
        _collect(tokenId);
        purchasedAmount = _swap(tokenId);
        burnedAmount = _burn();
    }

    function _collect(uint256 tokenId) internal returns (uint256 amount0, uint256 amount1) {
        (amount0, amount1) = manager.collect(
            IUniManager.CollectParams({
                tokenId: tokenId,
                recipient: address(this),
                amount0Max: type(uint128).max,
                amount1Max: type(uint128).max
            })
        );
    }

    function _swap(uint256 tokenId) internal returns (uint256 amountOut) {
        (,, address token0, address token1,,,,,,,,) = manager.positions(tokenId);
        // Don't allow for more than 0.3% divergence in the last 30 seconds.
        router.checkOracleSlippage(abi.encodePacked(uint160(token0), uint24(3000), uint160(token1)), 30, 30);
        address tokenIn = token0 == address(token) ? token1 : token0;
        uint256 amountIn = ERC20(tokenIn).balanceOf(address(this));
        amountOut = router.exactInputSingle(
            ISwapRouter.ExactInputSingleParams({
                tokenIn: tokenIn,
                tokenOut: address(token),
                fee: 3000,
                recipient: address(this),
                amountIn: amountIn,
                amountOutMinimum: 0,
                sqrtPriceLimitX96: 0
            })
        );
    }

    function _burn() internal returns (uint256 burnAmount) {
        uint256 balance = token.balanceOf(address(this));
        burnAmount = balance * burnRatio / 100;
        ERC20(token).safeTransfer(address(0), burnAmount);
        ERC20(token).safeTransfer(treasury, balance - burnAmount);
    }

    function _seedLiquidity(address pairToken, int24 tickLower, int24 tickUpper, uint256 amount) internal returns(uint256 tokenId) {
        if (pairToken < address(token)) {
            (tokenId,,,) = manager.mint(
                IUniManager.MintParams({
                    token0: pairToken,
                    token1: address(token),
                    fee: 3000,
                    tickLower: tickLower,
                    tickUpper: tickUpper,
                    amount0Desired: 0,
                    amount1Desired: amount,
                    amount0Min: 0,
                    amount1Min: 0,
                    recipient: address(this),
                    deadline: type(uint256).max
                })
            );
        } else {
            (tokenId,,,) = manager.mint(
                IUniManager.MintParams({
                    token0: address(token),
                    token1: pairToken,
                    fee: 3000,
                    tickLower: tickLower,
                    tickUpper: tickUpper,
                    amount0Desired: amount,
                    amount1Desired: 0,
                    amount0Min: 0,
                    amount1Min: 0,
                    recipient: address(this),
                    deadline: type(uint256).max
                })
            );
        }
    }

    function _approve(address _token, address _spender) internal {
        ERC20(_token).safeApprove(_spender, type(uint256).max);
    }

    function setBurnRatio(uint256 _ratio) external {
        require(msg.sender == treasury, "LiquidityManager: Only treasury can set new burn ratio");
        require(_ratio <= 100, "LiquidityManager: Burn ratio must be <= 100");
        burnRatio = _ratio;
    }

    function setTreasury(address newTreasury) external {
        require(msg.sender == treasury, "LiquidityManager: Only treasury can set new treasury");
        treasury = newTreasury;
        emit TreasuryChanged(newTreasury);
    }
}