// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol";
import "./libraries/SignatureChecker.sol";

contract EtchEthscriptionVault is UUPSUpgradeable, OwnableUpgradeable, PausableUpgradeable, EIP712Upgradeable {
    event ethscriptions_protocol_TransferEthscriptionForPreviousOwner(
        address indexed previousOwner,
        address indexed recipient,
        bytes32 indexed id
    );
    event EthscriptionWithdrawn(address indexed owner, bytes32 indexed ethscriptionId, bytes32 indexed orderHash);

    bytes32 internal constant WITHDRAW_ETHSCRIPTION_HASH =
        keccak256("WithdrawEthscription(bytes32 ethscriptionId,address recipient,bytes orderId)");

    address private trustedVerifier;

    mapping(bytes32 => bool) public withdrawRecords;

    function initialize() public initializer {
        __EIP712_init("EtchEthscriptionVault", "1");
        __Ownable_init();
    }

    function _authorizeUpgrade(address) internal override onlyOwner {}

    fallback() external {}

    receive() external payable {}

    function withdrawEthscription(
        bytes32 ethscriptionId,
        bytes calldata orderId,
        bytes calldata withdrawerSign,
        bytes calldata trustedSign
    ) public whenNotPaused {
        bytes32 digest = keccak256(
            abi.encode(WITHDRAW_ETHSCRIPTION_HASH, ethscriptionId, msg.sender, keccak256(orderId))
        );

        (bool isValidWithdrawer, bytes32 orderHash) = _verifySignature(digest, msg.sender, withdrawerSign);
        require(isValidWithdrawer, "invalid withdrawer signature");
        require(!withdrawRecords[orderHash], "order already exists");

        (bool isValid, ) = _verifySignature(digest, trustedVerifier, trustedSign);
        require(isValid, "invalid trusted signature");

        withdrawRecords[orderHash] = true;

        emit ethscriptions_protocol_TransferEthscriptionForPreviousOwner(msg.sender, msg.sender, ethscriptionId);
        emit EthscriptionWithdrawn(msg.sender, ethscriptionId, orderHash);
    }

    function _verifySignature(
        bytes32 digest,
        address signer,
        bytes calldata signature
    ) internal view returns (bool, bytes32) {
        (bytes32 r, bytes32 s, uint8 v) = _splitSignature(signature);
        (bool isValid, bytes32 orderHash) = SignatureChecker.verify(digest, signer, v, r, s, _domainSeparatorV4());
        return (isValid, orderHash);
    }

    function _splitSignature(bytes memory signature) internal pure returns (bytes32 r, bytes32 s, uint8 v) {
        require(signature.length == 65, "invalid signature");

        assembly {
            r := mload(add(signature, 0x20))
            s := mload(add(signature, 0x40))
            v := byte(0, mload(add(signature, 0x60)))
        }
    }

    function updateTrustedVerifier(address _trustedVerifier) external onlyOwner {
        trustedVerifier = _trustedVerifier;
    }

    function pause() public onlyOwner {
        PausableUpgradeable._pause();
    }

    function unpause() public onlyOwner {
        PausableUpgradeable._unpause();
    }
}