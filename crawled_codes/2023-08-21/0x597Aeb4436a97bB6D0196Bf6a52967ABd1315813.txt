// SPDX-License-Identifier: MIT

pragma solidity ^0.8.21;

import "@openzeppelin/contracts/access/Ownable.sol";
import "erc721a/contracts/ERC721A.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
import "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol";
import "operator-filter-registry/src/DefaultOperatorFilterer.sol";

contract BrazyBurrito is Ownable, ERC721A, DefaultOperatorFilterer {
    using Strings for uint256;

    uint256 public publicPrice = 0.1 ether;
    uint256 public whitelistPrice = 0;
    uint64 public maxPerWallet = 3;
    uint64 public maxSupply = 1111;

    bool public isWhitelistSaleEnabled;
    bool public isPublicSaleEnabled;

    string private baseURI;
    bytes32 private merkleRoot;

    mapping(address => uint256) public minted;

    constructor() ERC721A("Brazy Burrito", "BZBU") {}

    function publicMint(uint256 quantity) external payable {
        require(isPublicSaleEnabled, "Public sale has not started yet");
        require(totalSupply() + quantity <= maxSupply, "Max supply exceeded");
        require(
            quantity + minted[msg.sender] <= maxPerWallet,
            "Exceeded per wallet limit"
        );
        require(tx.origin == _msgSender(), "No contracts");
        require(msg.value >= quantity * publicPrice, "Incorrect ETH amount");
        minted[msg.sender] += quantity;
        _mint(msg.sender, quantity);
    }

    function whitelistMint(
        uint256 quantity,
        bytes32[] calldata _merkleProof
    ) external payable {
        require(isWhitelistSaleEnabled, "Whitelist sale has not started yet");
        require(totalSupply() + quantity <= maxSupply, "Max supply exceeded");
        require(
            quantity + minted[msg.sender] <= maxPerWallet,
            "Exceeded per wallet limit"
        );
        require(tx.origin == _msgSender(), "No contracts");
        require(msg.value >= quantity * whitelistPrice, "Incorrect ETH amount");
        bytes32 leaf = keccak256(abi.encodePacked(msg.sender));
        require(
            MerkleProof.verify(_merkleProof, merkleRoot, leaf),
            "Invalid Merkle Proof"
        );
        minted[msg.sender] += quantity;
        _mint(msg.sender, quantity);
    }

    function flipWhitelistSaleState() external onlyOwner {
        isWhitelistSaleEnabled = !isWhitelistSaleEnabled;
    }

    function flipPublicSaleState() external onlyOwner {
        isPublicSaleEnabled = !isPublicSaleEnabled;
    }

    function setBaseURI(string calldata data) external onlyOwner {
        baseURI = data;
    }

    function setMerkleRoot(bytes32 merkleRoot_) external onlyOwner {
        merkleRoot = merkleRoot_;
    }

    function setPublicPrice(uint256 price) external onlyOwner {
        publicPrice = price;
    }

    function setWhitelistPrice(uint256 price) external onlyOwner {
        whitelistPrice = price;
    }

    function setMaxPerWallet(uint64 limit) external onlyOwner {
        maxPerWallet = limit;
    }

    function setMaxSupply(uint64 newSupply) external onlyOwner {
        require(
            newSupply > totalSupply(),
            "New max suppy should be higher than current number of minted tokens"
        );
        maxSupply = newSupply;
    }

    function airdrop(address receiver, uint256 quantity) external onlyOwner {
        require(totalSupply() + quantity <= maxSupply, "Max supply exceeded");
        _safeMint(receiver, quantity);
    }

    function withdrawFunds() external onlyOwner {
        (bool success, ) = owner().call{value: address(this).balance}("");
        require(success, "withdraw failed");
    }

    function tokenURI(
        uint256 tokenId
    ) public view virtual override returns (string memory) {
        require(_exists(tokenId), "URI query for nonexistent token");

        return
            bytes(baseURI).length != 0
                ? string(abi.encodePacked(baseURI, tokenId.toString(), ".json"))
                : "";
    }

    function _startTokenId() internal view virtual override returns (uint256) {
        return 1;
    }

    function setApprovalForAll(
        address operator,
        bool approved
    ) public override onlyAllowedOperatorApproval(operator) {
        super.setApprovalForAll(operator, approved);
    }

    function approve(
        address operator,
        uint256 tokenId
    ) public payable override onlyAllowedOperatorApproval(operator) {
        super.approve(operator, tokenId);
    }

    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public payable override onlyAllowedOperator(from) {
        super.transferFrom(from, to, tokenId);
    }

    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public payable override onlyAllowedOperator(from) {
        super.safeTransferFrom(from, to, tokenId);
    }

    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes memory data
    ) public payable override onlyAllowedOperator(from) {
        super.safeTransferFrom(from, to, tokenId, data);
    }
}