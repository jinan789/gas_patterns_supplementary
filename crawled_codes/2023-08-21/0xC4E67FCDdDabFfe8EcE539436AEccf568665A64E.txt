// SPDX-License-Identifier: MIT

pragma solidity ^0.8.18;

import "@openzeppelin/contracts/utils/Base64.sol";

contract Fillers {

function gradient(uint8[3] memory rgb, uint256 tokenId, uint256 randomNumber) pure external returns (string memory) {
    
    string memory filterString;
    if ( randomNumber % 10 == 6 ){       
           filterString = string(abi.encodePacked(
            '<linearGradient id="glitch-gradient" x1="0%" y1="0%" x2="10%" y2="100%">'
            '<stop offset="0%" stop-color="', gRC(rgb, randomNumber), '">'
            '<animate attributeName="offset" values="0;0.3;0" dur="', getDur(tokenId, 20), 's" repeatCount="indefinite"/>'
            '</stop>'
            '<stop offset="100%" stop-color="', gRC(rgb, 1), '">'
            '<animate attributeName="offset" values="0;1;0" dur="', getDur(tokenId, 100), 's" repeatCount="indefinite"/>'
            '</stop>'
            '</linearGradient>'
           ));
        } 

            filterString = string(abi.encodePacked(filterString,
                '<filter id="bars" color-interpolation-filters="sRGB" preserveAspectRatio="none">'
                '<feFlood width="100%" height="100%" flood-color="rgb(128, 0, 128)" result="BASE-COLOR" />'
                '<feFlood width="100%" height="1" y="0" flood-color="rgb(255, 0, 128)" result="X-TRANSFORM">'
                '<animate attributeName="y" values="0px; 500px; 200px; 250px; 200px; 250px; 200px; 250px; 200px; 250px; 500px; 0px;" dur="0.5s" repeatCount="indefinite" begin="0" />'
                '<animate attributeName="height" values="1.5px; 4px; 3px; 4px; 2px;" dur="4s" repeatCount="indefinite" begin="0"/>'
                '</feFlood>'
                '<feMerge result="MERGE">'
                '<feMergeNode in="BASE-COLOR" />'
                '<feMergeNode in="X-TRANSFORM" />'
                '</feMerge>'
                '<feDisplacementMap in="SourceGraphic" in2="MERGE" scale="8" xChannelSelector="R" yChannelSelector="B">'
                '<animate attributeName="scale" values="-80; 50.5; 0; 80; 40.5; 70; -40; -90; 50; -50.5; 190; -80" dur="6s" repeatCount="indefinite" begin="0" />'
                '</feDisplacementMap>'
                '</filter>'
            ));

            filterString = string(abi.encodePacked(filterString,
                '<filter id="grainsFiller">'
                '<feTurbulence type="fractalNoise" baseFrequency="0.1" numOctaves="2">'
                '<animate attributeName="baseFrequency" values="0.6;0.8;0.6" dur="0.1s" repeatCount="indefinite"/>'
                '</feTurbulence>'
                '<feComponentTransfer>'
                '<feFuncA type="linear" slope="89" intercept="-28"/>'
                '</feComponentTransfer>'
                '<feComposite in="SourceGraphic" operator="in"/>'
                '</filter>'
            ));

            filterString = string(abi.encodePacked(filterString,
                '<filter id="displacementFilter">'
                '<feTurbulence type="turbulence" baseFrequency="0" numOctaves="', (tokenId % 3 == 0) ? "1" : "4", '" result="turbulence">'
                '<animate attributeName="baseFrequency" values="', (tokenId % 16 == 0) ? "0.01;0.02" : (tokenId % 18 == 0) ? "0;0.05;0" : (tokenId % 2 == 0) ? "0.7;0.9" : (tokenId % 5 == 0) ? "0.06" : "0.1;0.2", '" dur="', (tokenId % 3 == 0) ? "7" : (tokenId % 2 == 0) ? "0.8" : "3", 's" repeatCount="indefinite"/>'
                '</feTurbulence>'
                '<feDisplacementMap in2="turbulence" in="SourceGraphic" scale="20" xChannelSelector="R" yChannelSelector="G"/>'
                '</filter>'
            ));
        
        if (randomNumber % 10 == 0 && tokenId % 4 == 0) {
            filterString = string(abi.encodePacked(filterString,
                '<pattern id="squarePattern" x="2" y="2" width="20" height="20" patternUnits="userSpaceOnUse">'
                '<animate attributeName="height" values="20;40;20" dur="5s" repeatCount="indefinite"/>'
                '<animate attributeName="width" values="20;40;20" dur="5s" repeatCount="indefinite"/>'
                '<rect x="5" y="5" width="10" height="10" fill= "', gRC(rgb, 1), '" stroke="', gRC(rgb, randomNumber), '" stroke-width="', getDur(tokenId, 4), '"/>'
                '</pattern>'             
            ));
        } else if (randomNumber % 10 == 1) {
            filterString = string(abi.encodePacked(filterString,
                '<pattern id="eyePattern" width="22.5" height="21" patternUnits="userSpaceOnUse">'
                '<animate attributeName="height" values="20;40" dur="5s" repeatCount="indefinite"/>'
                '<animate attributeName="width" values="20;40;20" dur="5s" repeatCount="indefinite"/>'
                '<path stroke-linecap="round" stroke-linejoin="round" d="M2.036 12.322a1.012 1.012 0 010-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178z" />'
                '<path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 11-6 0 5 3 0 016 0z" fill="', gRC(rgb, randomNumber), '" >'
                '<animate attributeName="d" values="M15 12a3 3 0 11-6 0 3 3 0 016 0z;M15 12a3 3 0 11-6 0 1 3 0 016 0z;M15 12a3 3 0 11-6 0 3 3 0 016 0z" dur="1s" repeatCount="indefinite"/>'
                '</path>'
                '</pattern>'
            ));
        } else if (randomNumber % 10 == 2) {
            filterString = string(abi.encodePacked(filterString,
                '<pattern id="wiPattern" width="22" height="22" patternUnits="userSpaceOnUse">'
                '<path stroke-linecap="round" d="M8.288 15.038a5.25 5.25 0 017.424 0M5.106 11.856c3.807-3.808 9.98-3.808 13.788 0M1.924 8.674c5.565-5.565 14.587-5.565 20.152 0M12.53 18.22l-.53.53-.53-.53a.75.75 0 011.06 0z" stroke-linejoin="round" stroke="', gRC(rgb, 555), '" stroke-width="', getDur(tokenId, 8), '"',
                (tokenId % 3 == 0) ? ' filter="url(#displacementFilter)"' : ((tokenId % 3 == 1) ? ' filter="url(#gradBG)"' : ''),
                '>'
                '<animate attributeName="stroke" values="', gRC(rgb, 1), ';', gRC(rgb, randomNumber), ';', gRC(rgb, 106), '" dur="', getDur(tokenId, 16), 's" repeatCount="indefinite"/>'
                '<animate attributeName="d" values="M8.288 15.038a5.25 5.25 0 017.424 0M5.106 11.856c3.807-3.808 9.98-3.808 13.788 0M1.924 8.674c5.565-5.565 14.587-5.565 20.152 0M12.53 18.22l-.53.53-.53-.53a.75.75 0 011.06 0z; M8.288 11.038a5.25 5.25 0 017.424 0M5.106 16.856c3.807-3.808 9.98-3.808 13.788 0M1.924 4.674c5.565-5.565 14.587-5.565 20.152 0M12.53 1.22l-.53.53-.53-.53a.75.75  0 011.06 0z; M8.288 15.038a5.25 5.25 0 017.424 0M5.106 11.856c3.807-3.808 9.98-3.808 13.788 0M1.924 8.674c5.565-5.565 14.587-5.565 20.152 0M12.53 18.22l-.53.53-.53-.53a.75.75 0 011.06 0z;" dur="1s" repeatCount="indefinite"/>'
                '</path>'
                '<animateTransform attributeName="patternTransform" type="rotate" values="0 100 100;360 100 100;" dur="5s" repeatCount="indefinite"/>'
                '</pattern>'
            ));
        } 
        else if (randomNumber % 10 == 3) {
            string memory animationHeight;
            string memory animationWidth;
            
            if (tokenId % 3 == 0) {
                animationHeight = '<animate attributeName="height" values="1;10;1" dur="5s" repeatCount="indefinite"/>';
                animationWidth = '<animate attributeName="width" values="10;1;10" dur="5s" repeatCount="indefinite"/>';
            } else {
                animationHeight = animationWidth = '';
            }

            filterString = string(abi.encodePacked(filterString,
                '<pattern id="linePattern" x="4" y="4" width="', getDur(tokenId, 16), '" height="', getDur(tokenId, 25), '" patternUnits="userSpaceOnUse">',
                animationHeight,
                animationWidth,
                '<rect x="0" y="0" width="100%" height="100%" opacity="0">'
                '<animate attributeName="opacity" values="0;1;0" dur="0.1s" repeatCount="indefinite"/>'
                '</rect>'
                '<path d="M 1 0 Q 1 20 200 100" stroke="', gRC(rgb, 16), '" fill="none" />'
                '</pattern>'
            ));
        }
        else if (randomNumber % 10 == 4) {
            filterString = string(abi.encodePacked(filterString,
                '<pattern id="FPattern" width="43" height="41" patternUnits="userSpaceOnUse" >'
                '<animate attributeName="height" values="20;40;70;20" dur="20s" repeatCount="indefinite"/>'
                '<animate attributeName="width" values="20;10;90;20" dur="20s" repeatCount="indefinite"/>'
                '<path style="fill:', gRC(rgb, 16), ';" d="M98.048,275.249H0V113.541h98.048C98.048,113.541,98.048,275.249,98.048,275.249z" transform="scale(0.1)"></path>'
                '<path style="fill:', gRC(rgb, randomNumber), ';" d="M198.953,475.249H100.9V63.675h98.054V275.249z" transform="scale(0.1)"></path>'
                '<path style="fill:', gRC(rgb, 16), ';" d="M301.476,275.249h-98.048V9.025h98.048V275.249z" transform="scale(0.1)"></path>'
                '</pattern>'
            ));
        } else if (randomNumber % 10 == 8) {
            if(tokenId % 4 == 0){
                filterString = string(abi.encodePacked(filterString,
                    '<pattern id="noisePattern" x="0" y="0" width="10" height="10" patternUnits="userSpaceOnUse">'
                    '<animate attributeName="width" values="10;30;40;70;40;30;20;10" dur="2s" repeatCount="indefinite"/>'
                    '<rect width="10" height="10" fill="', gRC(rgb, 0), '">'
                    '</rect>'
                    '</pattern>'
                ));

            }
            else{
                filterString = string(abi.encodePacked(filterString,
                '<pattern id="noisePattern" x="0" y="0" width="120" height="120" patternUnits="userSpaceOnUse">'
                '<line x1="0" y1="0" x2="120" y2="120" stroke="', gRC(rgb, 16), '" stroke-width="', getDur(tokenId, 1), '"/>'
                '<line x1="0" y1="30" x2="120" y2="90" stroke="', gRC(rgb, 16), '" stroke-width="', getDur(tokenId, 2), '"/>'
                '<line x1="0" y1="60" x2="120" y2="60" stroke="', gRC(rgb, randomNumber), '" stroke-width="', getDur(tokenId, 3), '"/>'
                '<line x1="0" y1="90" x2="120" y2="30" stroke="', gRC(rgb, tokenId), '" stroke-width="', getDur(tokenId, 4), '"/>'
                '<line x1="0" y1="120" x2="120" y2="0" stroke="', gRC(rgb, 112), '" stroke-width="', getDur(tokenId, 5), '"/>'
                '</pattern>'
                ));
            }
        } else if (randomNumber % 10 == 9) {

            if(tokenId % 4 == 1){
            filterString = string(abi.encodePacked(filterString,
                '<pattern id="circlePattern" x="0" y="0" width="40" height="40" patternUnits="userSpaceOnUse" >'
                '<circle cx="20" cy="20" r="10" stroke="', gRC(rgb, randomNumber), '" stroke-width="', getDur(tokenId, 5), '">'
                '<animate attributeName="fill" values="', gRC(rgb, 16), ';', gRC(rgb, randomNumber), ';', gRC(rgb, 16), '" dur="10s" repeatCount="indefinite"/>'
                '<animate attributeName="r" values="', getDur(tokenId, 11), ';20;', getDur(tokenId, 20), '" dur="', (tokenId % 3 == 0) ? "0.1" : (tokenId % 3 == 1) ? "1" : "5", 's" repeatCount="indefinite" />'
                '</circle>'
                '</pattern>'
            ));
            }

            else{
            filterString = string(abi.encodePacked(filterString,
                '<pattern id="circlePattern" x="0" y="0" width="30" height="30" patternUnits="userSpaceOnUse">'
                '<defs>'
                '<pattern id="fractalInterferencePattern" x="5" y="5" width="60" height="60" patternUnits="userSpaceOnUse">'
                '<use href="#fractalShape" />'
                '<use href="#fractalShape" transform="scale(0.7)"/>'
                '<use href="#fractalShape" transform="scale(0.4)"/>'
                '</pattern>'
                '<path id="fractalShape" d="M0,30 Q15,5 30,10 T60,30 Q45,55 30,50 T0,30" fill="none" stroke="rgb(0, 128, 0)" stroke-width="10" transform="scale(0.4)">'
                '<animate attributeName="stroke" values="', gRC(rgb, 16), ';', gRC(rgb, randomNumber), ';" dur="', (tokenId % 3 == 0) ? "0.2" : (tokenId % 3 == 1) ? "1" : "5", 's" repeatCount="indefinite"/>'
                '<animate attributeName="stroke-width" values="1;', getDur(tokenId, 3), ';1" dur="', getDur(tokenId, 3), 's" repeatCount="indefinite"/>'
                '</path>'
                '</defs>'
                '<rect width="60" height="60" fill="url(#fractalInterferencePattern)"/>'
                '</pattern>'
            ));
            }
        } 

    return filterString;
}

function gRC(uint8[3] memory rgb, uint256 index) internal pure returns (string memory) {
        
        uint256 r;
        uint256 g;
        uint256 b;
        

        if(index >= 500)
        {
            uint256 index1 = index - 500 ;
            uint256 rand = uint256(keccak256(abi.encodePacked(index, index)));

            r = (rand + (5 * index1)) % 256;
            g = ((rand / 256) + (5 * index1)) % 256 ;
            b = ((rand / 256 / 256) + (5 * index1)) % 256 ;            
        }
        else if(index >= 100) {
            uint256 index1 = index - 100;
        
            uint256 gradientFactor = index1 * 4; 

            r = (rgb[0] + gradientFactor);
            g = (rgb[1] + gradientFactor);
            b = (rgb[2] + gradientFactor);

        
        } 
        else {
            
            r = rgb[0];
            g = rgb[1];
            b = rgb[2];

        }
        return string(abi.encodePacked("rgb(", uint2str(r), ",", uint2str(g), ",", uint2str(b), ")"));
    }

    function getDur(uint tokenId, uint i) internal pure returns (string memory) {
        if(i > 10){
            
            return uint2str(uint(keccak256(abi.encodePacked(tokenId, i))) % 20 + 1);
        }
        else{
            return uint2str(uint(keccak256(abi.encodePacked(tokenId, i))) % 8 + 1);
        }
            
    }

    function uint2str(uint _i) internal pure returns (string memory str) {
        if (_i == 0) {
            return "0";
        }
        uint j = _i;
        uint length;
        while (j != 0) {
            length++;
            j /= 10;
        }
        bytes memory bstr = new bytes(length);
        uint k = length;
        while (_i != 0) {
            bstr[--k] = bytes1(uint8(48 + _i % 10));
            _i /= 10;
        }
        return string(bstr);
    }

}