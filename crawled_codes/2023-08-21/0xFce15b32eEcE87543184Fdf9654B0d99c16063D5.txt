// SPDX-License-Identifier: MIT
pragma solidity 0.8.19;

import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";

//                                .__        ___.
//  ____________ _______   ____    |  | _____ \_ |__   ______
//  \_  __ \__  \\_  __ \_/ __ \   |  | \__  \ | __ \ /  ___/
//   |  | \// __ \|  | \/\  ___/   |  |__/ __ \| \_\ \\___ \
//   |__|  (____  /__|    \___  >  |____(____  /___  /____  >
//              \/            \/             \/    \/     \/
//
// Apepe Loot Minter
// the possibilities multiply..
//

interface IERC721 {
    function ownerOf(uint256 tokenId) external view returns (address owner);

    function transferFrom(address from, address to, uint256 tokenId) external;
}

interface LootMainInterface {
    struct CollectionConfig {
        address collection;
        uint256 price;
        uint16 usagePerPass;
    }

    struct TokenConfig {
        uint8 mechanism;
        CollectionConfig[] collectionConfigs;
        uint256 limit;
        uint256 startDate;
        uint256 endDate;
    }

    function getTokenConfig(
        uint256 _tokenId
    ) external view returns (TokenConfig memory);

    function getMinted(uint256 _tokenId) external view returns (uint256 count);

    function contractMint(address _to, uint256 _id, uint256 _quantity) external;
}

contract ApepeLootMinter is Initializable, UUPSUpgradeable, OwnableUpgradeable {
    LootMainInterface public lootMain;
    IERC721 public genesis;
    IERC721 public zombie;

    event ZombiePurged(address indexed owner, uint256 tokenId);

    /// @custom:oz-upgrades-unsafe-allow constructor
    constructor() {
        _disableInitializers();
    }

    function initialize(address _lootMain, address _genesis, address _zombie) public initializer {
        __Ownable_init();
        __UUPSUpgradeable_init();
        lootMain = LootMainInterface(_lootMain);
        genesis = IERC721(_genesis);
        zombie = IERC721(_zombie);
    }

    function mint0(
        uint256[] calldata _ids,
        address _receivingAddress
    ) external {
        uint256 quantity = _ids.length;
        for (uint256 i = 0; i < quantity; i++) {
            uint256 tokenId = _ids[i];
            require(
                zombie.ownerOf(tokenId) == msg.sender,
                "Caller does not own Zombie"
            );
            require( tokenId < 10000, "Mega Zombies cannot be purged." );
            zombie.transferFrom(
                msg.sender,
                0x000000000000000000000000000000000000dEaD,
                tokenId
            );
            emit ZombiePurged(msg.sender, tokenId);
        }
        lootMain.contractMint(
            _receivingAddress == address(0) ? msg.sender : _receivingAddress,
            0,
            quantity
        );
    }

    //require by upgradable contract
    function _authorizeUpgrade(
        address _newImplementation
    ) internal override onlyOwner {}
}