// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "./WorldWebCenterERC1155.sol";
import "@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/common/ERC2981Upgradeable.sol";
import "../vendor/operator-filter-registry/upgradeable/OperatorFiltererUpgradeable.sol";

/// @title World Web Center
/// @author World Web Center <[emailÂ protected]>
/// @custom:project-website  https://wwc-hq.com/
contract WorldWebCenterV1 is WorldWebCenterERC1155, PaymentSplitterUpgradeable, ERC2981Upgradeable, OperatorFiltererUpgradeable {

    uint256 public version;

    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE`, `PAUSER_ROLE` and `URI_SETTER_ROLE` to the
     * account that deploys the contract.
     *
     * See {ERC1155-constructor}.
     */
    function initialize(
        string memory uri,
        uint256 initialSupply,
        address[] calldata team,
        uint256[] calldata teamShares
    ) initializer public {
        __WorldWebCenterERC1155_init(uri);
        __PaymentSplitter_init(team, teamShares);
        __ERC2981_init();
        __OperatorFilterer_init(0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6, true);

        if (initialSupply > 0) {
            _mintWithAmount(msg.sender, 1, initialSupply);
        }
        version = 1;
    }

    /**
     * @notice Sets the royalty information that all ids in this contract will default to.
     *
     * Requirements:
     * - `receiver` cannot be the zero address.
     * - `feeNumerator` cannot be greater than the fee denominator: 10000.
     *
     * @param receiver The address who should receive the fee.
     * @param feeNumerator The fee numerator (out of 10000)
     */
    function setDefaultRoyalty(
        address receiver,
        uint96 feeNumerator
    ) external onlyRole(DEFAULT_ADMIN_ROLE) {
        _setDefaultRoyalty(receiver, feeNumerator);
    }

    /**
     * @notice Sets the royalty information that all ids in this contract.
     *
     * Requirements:
     * - `tokenId` must exist.
     * - `receiver` cannot be the zero address.
     * - `feeNumerator` cannot be greater than the fee denominator: 10000.
     *
     * @param tokenId The token id to set the royalty for.
     * @param receiver The address who should receive the fee.
     * @param feeNumerator The fee numerator (out of 10000)
     */
    function setTokenRoyalty(
        uint256 tokenId,
        address receiver,
        uint96 feeNumerator
    ) external onlyRole(DEFAULT_ADMIN_ROLE) {
        _setTokenRoyalty(tokenId, receiver, feeNumerator);
    }

    /**
     * @dev Creates `amount` new tokens for `to`, of token type `id`.
     *
     * See {ERC1155-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `DEFAULT_ADMIN_ROLE`.
     */
    function mint(address to, uint256 id, uint256 amount) virtual public onlyRole(DEFAULT_ADMIN_ROLE) {
        _mintWithAmount(to, id, amount);
    }

    /**
     * @dev See {IERC1155-setApprovalForAll}.
     *      In this example the added modifier ensures that the operator is allowed by the OperatorFilterRegistry.
     */
    function setApprovalForAll(address operator, bool approved) public override onlyAllowedOperatorApproval(operator) {
        super.setApprovalForAll(operator, approved);
    }

    /**
     * @dev See {IERC1155-safeTransferFrom}.
     *      In this example the added modifier ensures that the operator is allowed by the OperatorFilterRegistry.
     */
    function safeTransferFrom(address from, address to, uint256 tokenId, uint256 amount, bytes memory data)
    public
    override
    onlyAllowedOperator(from)
    {
        super.safeTransferFrom(from, to, tokenId, amount, data);
    }

    /**
     * @dev See {IERC1155-safeBatchTransferFrom}.
     *      In this example the added modifier ensures that the operator is allowed by the OperatorFilterRegistry.
     */
    function safeBatchTransferFrom(
        address from,
        address to,
        uint256[] memory ids,
        uint256[] memory amounts,
        bytes memory data
    ) public virtual override onlyAllowedOperator(from) {
        super.safeBatchTransferFrom(from, to, ids, amounts, data);
    }

    function balanceEthers() virtual public view returns (uint256) {
        return address(this).balance;
    }

    function _authorizeUpgrade(address newImplementation) internal virtual override onlyRole(DEFAULT_ADMIN_ROLE) {
        version ++;
    }

    function supportsInterface(bytes4 interfaceId)
    public
    view
    virtual
    override(WorldWebCenterERC1155, ERC2981Upgradeable)
    returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }
}