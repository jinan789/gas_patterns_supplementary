// SPDX-License-Identifier: BUSL-1.1
pragma solidity >=0.8.19;

import { IWithdrawFacet } from "./IWithdrawFacet.sol";
import { IERC20 } from "@solidstate/contracts/interfaces/IERC20.sol";
import { IERC721 } from "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import { IERC1155 } from "@openzeppelin/contracts/token/ERC1155/IERC1155.sol";
import { SafeERC20 } from "@solidstate/contracts/utils/SafeERC20.sol";
import { UsingAccessControl } from "../../facets/AccessControl/UsingAccessControl.sol";

/// @title WithdrawFacet
/// @author Martin Wawrusch for Roji Inc.
/// @notice Provides the ability to withdraw funds from the contract. This is used as 'Black Hole Protection' to be able to refund users who inadvertently send funds or tokens to the contract.
/// Access is restricted to the special ROLE_FINANCE role to prevent abuse.
contract WithdrawFacetAccessControl is UsingAccessControl , IWithdrawFacet   {
  using SafeERC20 for IERC20;

    /// @inheritdoc IWithdrawFacet
    function withdraw() external onlyAccessControlFinance {
        // (bool sent, ) = msg.sender.call{value: address(this).balance}("");
        // require(sent, "Failed to send ether");
        payable(msg.sender).transfer(address(this).balance); 
    }

    /// @inheritdoc IWithdrawFacet
    function withdrawERC20(address tokenAddress) external onlyAccessControlFinance {
        if(address(this) == tokenAddress) {
            revert CantWithdrawTokenOfContractItself();
        }

        IERC20 token = IERC20(tokenAddress);
        token.safeTransfer(msg.sender, token.balanceOf(address(this)));
    }

    /// @inheritdoc IWithdrawFacet
    function withdrawERC721(address tokenAddress, uint256 tokenId) external onlyAccessControlFinance {
        if(address(this) == tokenAddress) {
            revert CantWithdrawTokenOfContractItself();
        }

        IERC721 token = IERC721(tokenAddress);
        token.transferFrom(address(this), msg.sender, tokenId);
    }

    /// @inheritdoc IWithdrawFacet
    function withdrawERC1155(address tokenAddress, uint256 tokenId) external onlyAccessControlFinance {
        if(address(this) == tokenAddress) {
            revert CantWithdrawTokenOfContractItself();
        }

        IERC1155 token = IERC1155(tokenAddress);

        uint256 b = token.balanceOf(address(this), tokenId);
        token.safeTransferFrom(address(this), msg.sender, tokenId, b, "");
    }
}