{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/contracts/core/DataLayrChallengeUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin-upgrades/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@eigenlayer/contracts/libraries/Merkle.sol\\\";\\nimport \\\"@eigenlayer/contracts/libraries/BN254.sol\\\";\\n\\nimport \\\"../interfaces/IDataLayrServiceManager.sol\\\";\\n\\n\\n/**\\n * @title Stand-alone utility contract that implements reuseable 'challenge'-related functionality for DataLayr.\\n * @author Layr Labs, Inc.\\n */\\ncontract DataLayrChallengeUtils is Initializable {\\n\\n    struct MultiRevealProof {\\n        BN254.G1Point interpolationPoly;\\n        BN254.G1Point revealProof;\\n        BN254.G2Point zeroPoly;\\n        bytes zeroPolyProof;\\n    }\\n\\n    struct DataStoreKZGMetadata {\\n        BN254.G1Point c;\\n        uint48 degree;\\n        uint32 numSys;\\n        uint32 numPar;\\n    }\\n\\n    // TODO: set this value\\n    uint256 internal ZERO_POLY_TREE_HEIGHT;\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n    * @notice Check that the DataLayr operator who is getting slashed was\\n    * actually part of the quorum for the dataStoreId.\\n    *\\n    * The burden of responsibility lies with the challenger to show that the DataLayr operator\\n    * is not part of the non-signers for the DataStore. Towards that end, challenger provides\\n    * @param nonSignerIndex such that if the relationship among nonSignerPubkeyHashes (nspkh) is:\\n    * uint256(nspkh[0]) <uint256(nspkh[1]) < ...< uint256(nspkh[index])< uint256(nspkh[index+1]),...\\n    * then,\\n    * uint256(nspkh[index]) <  uint256(operatorPubkeyHash) < uint256(nspkh[index+1])\\n\\n    * @dev checkSignatures in DataLayrBLSSignatureChecker.sol enforces the invariant that hash of\\n    * non-signers pubkey is recorded in the compressed signatory record in an  ascending\\n    * manner.\\n    \\n     * @notice Makes sure that operatorPubkeyHash was *excluded* from set of non-signers\\n     * @dev Reverts if the operator *is* in the non-signer set.\\n     */\\n    function checkExclusionFromNonSignerSet(\\n        bytes32 operatorPubkeyHash,\\n        uint256 nonSignerIndex,\\n        IDataLayrServiceManager.SignatoryRecordMinusDataStoreId calldata signatoryRecord\\n    )\\n        external\\n        pure\\n    {\\n        \\n        if (signatoryRecord.nonSignerPubkeyHashes.length != 0) {\\n            // check that uint256(nspkh[index]) <  uint256(operatorPubkeyHash)\\n            require(\\n                //they're either greater than everyone in the nspkh array\\n                (\\n                    nonSignerIndex == signatoryRecord.nonSignerPubkeyHashes.length\\n                        && uint256(signatoryRecord.nonSignerPubkeyHashes[nonSignerIndex - 1]) < uint256(operatorPubkeyHash)\\n                )\\n                //or nonSigner index is greater than them\\n                || (uint256(signatoryRecord.nonSignerPubkeyHashes[nonSignerIndex]) > uint256(operatorPubkeyHash)),\\n                \\\"DataLayrChallengeUtils.checkExclusionFromNonSignerSet: Provided nonsigner index is incorrect\\\"\\n            );\\n\\n            //  check that uint256(nspkh[index - 1]) < uint256(operatorPubkeyHash)\\n            if (nonSignerIndex != 0) {\\n                //require that the index+1 is before where operatorpubkey hash would be\\n                require(\\n                    uint256(signatoryRecord.nonSignerPubkeyHashes[nonSignerIndex - 1]) < uint256(operatorPubkeyHash),\\n                    \\\"DataLayrChallengeUtils.checkExclusionFromNonSignerSet: Provided nonsigner index is incorrect\\\"\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Makes sure that operatorPubkeyHash was *included* in set of non-signers.\\n     * Reverts if the operator is *not* in the non-signer set.\\n     */\\n    function checkInclusionInNonSignerSet(\\n        bytes32 operatorPubkeyHash,\\n        uint256 nonSignerIndex,\\n        IDataLayrServiceManager.SignatoryRecordMinusDataStoreId calldata signatoryRecord\\n    )\\n        external\\n        pure\\n    {\\n        require(\\n            operatorPubkeyHash == signatoryRecord.nonSignerPubkeyHashes[nonSignerIndex],\\n            \\\"operator not included in non-signer set\\\"\\n        );\\n    }\\n\\n    /// @notice Parses the KZGMetadata from a DataStore header.\\n    function getDataCommitmentAndMultirevealDegreeAndSymbolBreakdownFromHeader(\\n        // bytes calldata header\\n        bytes calldata header\\n    )\\n        public\\n        pure\\n        returns (DataStoreKZGMetadata memory)\\n    {\\n        // return x, y coordinate of overall data poly commitment\\n        // then return degree of multireveal polynomial\\n        BN254.G1Point memory point;\\n        uint48 degree = 0;\\n        uint32 numSys = 0;\\n        uint32 numPar = 0;\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := header.offset\\n            mstore(point, calldataload(pointer))\\n            mstore(add(point, 0x20), calldataload(add(pointer, 32)))\\n            //TODO: PUT THE LOW DEGREENESS PROOF HERE\\n            degree := shr(224, calldataload(add(pointer, 64)))\\n            numSys := shr(224, calldataload(add(pointer, 132)))\\n        }\\n\\n        return\\n            DataStoreKZGMetadata({\\n                c: point,\\n                degree: degree,\\n                numSys: numSys,\\n                numPar: numPar\\n            });\\n    }\\n\\n    function getNumSysFromHeader(\\n        // bytes calldata header\\n        bytes calldata header\\n    ) external pure returns (uint32) {\\n        uint32 numSys = 0;\\n        \\n        assembly {\\n            numSys := shr(224, calldataload(add(header.offset, 132)))\\n        }\\n\\n        return numSys;\\n    }\\n\\n    function getLeadingCosetIndexFromHighestRootOfUnity(uint32 i, uint32 numSys, uint32 numPar)\\n        public\\n        pure\\n        returns (uint32)\\n    {\\n        uint32 numNode = numSys + numPar;\\n        uint32 numSysE = uint32(nextPowerOf2(numSys));\\n        uint32 ratio = numNode / numSys + (numNode % numSys == 0 ? 0 : 1);\\n        uint32 numNodeE = uint32(nextPowerOf2(numSysE * ratio));\\n\\n        if (i < numSys) {\\n            return (reverseBitsLimited(uint32(numNodeE), uint32(i)) * 256) / numNodeE;\\n        } else if (i < numNodeE - (numSysE - numSys)) {\\n            return (reverseBitsLimited(uint32(numNodeE), uint32((i - numSys) + numSysE)) * 256) / numNodeE;\\n        } else {\\n            revert(\\\"Cannot create number of frame higher than possible\\\");\\n        }\\n    }\\n\\n    function reverseBitsLimited(uint32 length, uint32 value) public pure returns (uint32) {\\n        uint32 unusedBitLen = 32 - uint32(log2(length));\\n        return reverseBits(value) >> unusedBitLen;\\n    }\\n\\n    function reverseBits(uint32 value) public pure returns (uint32) {\\n        uint256 reversed = 0;\\n        for (uint256 i = 0; i < 32; i++) {\\n            uint256 mask = 1 << i;\\n            if (value & mask != 0) {\\n                reversed |= (1 << (31 - i));\\n            }\\n        }\\n        return uint32(reversed);\\n    }\\n\\n    /// @notice Takes the log base 2 of n and returns it.\\n    function log2(uint256 n) internal pure returns (uint256) {\\n        require(n > 0, \\\"Log must be defined\\\");\\n        uint256 log = 0;\\n        while (n >> log != 1) {\\n            log++;\\n        }\\n        return log;\\n    }\\n\\n    /// @notice Finds the next power of 2 greater than n and returns it.\\n    function nextPowerOf2(uint256 n) public pure returns (uint256) {\\n        uint256 res = 1;\\n        while (1 << res < n) {\\n            res++;\\n        }\\n        res = 1 << res;\\n        return res;\\n    }\\n\\n    // gets the merkle root of a tree where all the leaves are the hashes of the zero/vanishing polynomials of the given multireveal\\n    // degree at different roots of unity. We are assuming a max of 512 datalayr nodes  right now, so, for merkle root for \\\"degree\\\"\\n    // will be of the tree where the leaves are the hashes of the G2 kzg commitments to the following polynomials:\\n    // l = degree (for brevity)\\n    // w^(512*l) = 1\\n    // (s^l - 1), (s^l - w^l), (s^l - w^2l), (s^l - w^3l), (s^l - w^4l), ...\\n    // we have precomputed these values and return them directly because it's cheap. currently we\\n    // tolerate up to degree 2^11, which means up to (31 bytes/point)(1024 points/dln)(256 dln) = 8 MB in a datastore\\n    function getZeroPolyMerkleRoot(uint256 degree) public pure returns (bytes32) {\\n        uint256 log = log2(degree);\\n\\n        if (log == 0) {\\n            return 0xe82cea94884b1b895ea0742840a3b19249a723810fd1b04d8564d675b0a416f1;\\n        } else if (log == 1) {\\n            return 0x4843774a80fc8385b31024f5bd18b42e62de439206ab9468d42d826796d41f67;\\n        } else if (log == 2) {\\n            return 0x092d3e5f87f5293e7ab0cc2ca6b0b5e4adb5e0011656544915f7cea34e69e5ab;\\n        } else if (log == 3) {\\n            return 0x494b208540ec8624fbbb3f2c64ffccdaf6253f8f4e50c0d93922d88195b07755;\\n        } else if (log == 4) {\\n            return 0xfdb44b84a82893cfa0e37a97f09ffc4298ad5e62be1bea1d03320ae836213d22;\\n        } else if (log == 5) {\\n            return 0x3f50cb08231d2a76853ba9dbb20dad45a1b75c57cdaff6223bfe069752cff3d4;\\n        } else if (log == 6) {\\n            return 0xbb39eebd8138eefd5802a49d571e65b3e0d4e32277c28fbf5fbca66e7fb04310;\\n        } else if (log == 7) {\\n            return 0xf0a39b513e11fa80cbecbf352f69310eddd5cd03148768e0e9542bd600b133ec;\\n        } else if (log == 8) {\\n            return 0x038cca2238865414efb752cc004fffec9e6069b709f495249cdf36efbd5952f6;\\n        } else if (log == 9) {\\n            return 0x2a26b054ed559dd255d8ac9060ebf6b95b768d87de767f8174ad2f9a4e48dd01;\\n        } else if (log == 10) {\\n            return 0x1fe180d0bc4ff7c69fefa595b3b5f3c284535a280f6fdcf69b20770d1e20e1fc;\\n        } else if (log == 11) {\\n            return 0x60e34ad57c61cd6fdd8177437c30e4a30334e63d7683989570cf27020efc8201;\\n        } else if (log == 12) {\\n            return 0xeda2417e770ddbe88f083acf06b6794dfb76301314a32bd0697440d76f6cd9cc;\\n        } else if (log == 13) {\\n            return 0x8cbe9b8cf92ce70e3bec8e1e72a0f85569017a7e43c3db50e4a5badb8dea7ce8;\\n        } else {\\n            revert(\\\"Log not in valid range\\\");\\n        }\\n    }\\n\\n    /// @notice Opens up kzg commitment c(x) at r and makes sure c(r) = s. proof (pi) is in G2 to allow for calculation of Z in G1\\n    function openPolynomialAtPoint(BN254.G1Point memory c, BN254.G2Point calldata pi, uint256 r, uint256 s)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        //we use and overwrite z as temporary storage\\n        //g1 = (1, 2)\\n        BN254.G1Point memory g1Gen = BN254.G1Point({X: 1, Y: 2});\\n        //calculate -g1*r = -[r]_1\\n        BN254.G1Point memory z = BN254.scalar_mul(BN254.negate(g1Gen), r);\\n\\n        //add [x]_1 - [r]_1 = Z and store in first 2 slots of input\\n        //CRITIC TODO: SWITCH THESE TO [x]_1 of Powers of Tau!\\n        BN254.G1Point memory firstPowerOfTau = BN254.G1Point({\\n            X: 15397661830938158195220872607788450164522003659458108417904919983213308643927,\\n            Y: 4051901473739185471504766068400292374549287637553596337727654132125147894034\\n        });\\n        z = BN254.plus(firstPowerOfTau, z);\\n        //calculate -g1*s = -[s]_1\\n        BN254.G1Point memory negativeS = BN254.scalar_mul(BN254.negate(g1Gen), s);\\n        //calculate C-[s]_1\\n        BN254.G1Point memory cMinusS = BN254.plus(c, negativeS);\\n\\n        //check e(z, pi)e(C-[s]_1, -g2) = 1\\n        return BN254.pairing(z, pi, cMinusS, BN254.negGeneratorG2());\\n    }\\n\\n    function validateDisclosureResponse(\\n        DataStoreKZGMetadata memory dskzgMetadata,\\n        uint32 chunkNumber,\\n        BN254.G1Point calldata interpolationPoly,\\n        BN254.G1Point calldata revealProof,\\n        BN254.G2Point memory zeroPoly,\\n        bytes calldata zeroPolyProof\\n    )\\n        public\\n        view\\n        returns (bool)\\n    {\\n        require(zeroPolyProof.length/32 == ZERO_POLY_TREE_HEIGHT, \\\"DataLayrChallengeUtils.validateDisclosureResponse: incorrect merkle proof length\\\");\\n\\n        // check that [zeroPoly.x0, zeroPoly.x1, zeroPoly.y0, zeroPoly.y1] is actually the \\\"chunkNumber\\\" leaf\\n        // of the zero polynomial Merkle tree\\n        {\\n            //deterministic assignment of \\\"y\\\" here\\n            // @todo\\n            require(\\n                Merkle.verifyInclusionKeccak(\\n                    // Merkle proof\\n                    zeroPolyProof,\\n                    // Merkle root hash\\n                    getZeroPolyMerkleRoot(dskzgMetadata.degree),\\n                    // leaf\\n                    keccak256(abi.encodePacked(zeroPoly.X[1], zeroPoly.X[0], zeroPoly.Y[1], zeroPoly.Y[0])),\\n                    // index in the Merkle tree\\n                    getLeadingCosetIndexFromHighestRootOfUnity(chunkNumber, dskzgMetadata.numSys, dskzgMetadata.numPar)\\n                ),\\n                \\\"Incorrect zero poly merkle proof\\\"\\n            );\\n        }\\n\\n        /**\\n         * Doing pairing verification  e(Pi(s), Z_k(s)).e(C - I, -g2) == 1\\n         */\\n        //get the commitment to the zero polynomial of multireveal degree\\n\\n        // calculate [C]_1 - [I]_1\\n        BN254.G1Point memory cMinusI = BN254.plus(dskzgMetadata.c, BN254.negate(interpolationPoly));\\n\\n        //check e(z, pi)e(C-[s]_1, -g2) = 1\\n        return BN254.pairing(revealProof, zeroPoly, cMinusI, BN254.negGeneratorG2());\\n    }\\n\\n    function nonInteractivePolynomialProof(\\n        bytes calldata header,\\n        uint32 chunkNumber,\\n        bytes calldata poly,\\n        MultiRevealProof calldata multiRevealProof,\\n        BN254.G2Point calldata polyEquivalenceProof\\n    )\\n        external\\n        view\\n        returns (bool)\\n    {\\n        DataStoreKZGMetadata memory dskzgMetadata =\\n            getDataCommitmentAndMultirevealDegreeAndSymbolBreakdownFromHeader(header);\\n\\n        //verify pairing for the commitment to interpolating polynomial\\n        require(\\n            validateDisclosureResponse(\\n                dskzgMetadata,\\n                chunkNumber,\\n                multiRevealProof.interpolationPoly,\\n                multiRevealProof.revealProof,\\n                multiRevealProof.zeroPoly,\\n                multiRevealProof.zeroPolyProof\\n            ),\\n            \\\"Reveal failed due to non 1 pairing\\\"\\n        );\\n\\n        // TODO: verify that this check is correct!\\n        // check that degree of polynomial in the header matches the length of the submitted polynomial\\n        // i.e. make sure submitted polynomial doesn't contain extra points\\n        require(\\n            (dskzgMetadata.degree + 1) * 32 == poly.length, \\\"Polynomial must have a 256 bit coefficient for each term\\\"\\n        );\\n\\n        //Calculating r, the point at which to evaluate the interpolating polynomial\\n        uint256 r = uint256(\\n            keccak256(\\n                abi.encodePacked(\\n                    keccak256(poly),\\n                    multiRevealProof.interpolationPoly.X,\\n                    multiRevealProof.interpolationPoly.Y\\n                )\\n            )\\n        ) % BN254.FR_MODULUS;\\n        uint256 s = linearPolynomialEvaluation(poly, r);\\n        return\\n            openPolynomialAtPoint(\\n                multiRevealProof.interpolationPoly,\\n                polyEquivalenceProof,\\n                r,\\n                s\\n            );\\n    }\\n\\n    function verifyPolyEquivalenceProof(\\n        bytes calldata poly,\\n        BN254.G1Point calldata interpolationPoly,\\n        BN254.G2Point calldata polyEquivalenceProof\\n    ) external view returns (bool) {\\n        //Calculating r, the point at which to evaluate the interpolating polynomial\\n        uint256 r = uint256(\\n            keccak256(\\n                abi.encodePacked(\\n                    keccak256(poly),\\n                    interpolationPoly.X,\\n                    interpolationPoly.Y\\n                )\\n            )\\n        ) % BN254.FR_MODULUS;\\n        uint256 s = linearPolynomialEvaluation(poly, r);\\n        bool ok = openPolynomialAtPoint(\\n            interpolationPoly,\\n            polyEquivalenceProof,\\n            r,\\n            s\\n        );\\n        return ok;\\n    }\\n\\n    function verifyBatchPolyEquivalenceProof(\\n        bytes[] calldata polys,\\n        BN254.G1Point[] calldata interpolationPolys,\\n        BN254.G2Point calldata polyEquivalenceProof\\n    ) external view returns (bool) {\\n        bytes32[] memory rs = new bytes32[](polys.length);\\n        //Calculating r, the point at which to evaluate the interpolating polynomial\\n        for (uint i = 0; i < polys.length; i++) {\\n            rs[i] = keccak256(\\n                abi.encodePacked(\\n                    keccak256(polys[i]),\\n                    interpolationPolys[i].X,\\n                    interpolationPolys[i].Y\\n                )\\n            );\\n        }\\n        //this is the point to open each polynomial at\\n        uint256 r = uint256(keccak256(abi.encodePacked(rs))) % BN254.FR_MODULUS;\\n        //this is the offset we add to each polynomial to prevent collision\\n        //we use array to help with stack\\n        uint256[2] memory gammaAndGammaPower;\\n        gammaAndGammaPower[0] =\\n            uint256(keccak256(abi.encodePacked(rs, uint256(0)))) %\\n            BN254.FR_MODULUS;\\n        gammaAndGammaPower[1] = gammaAndGammaPower[0];\\n        //store I1\\n        BN254.G1Point memory gammaShiftedCommitmentSum = interpolationPolys[0];\\n        //store I1(r)\\n        uint256 gammaShiftedEvaluationSum = linearPolynomialEvaluation(\\n            polys[0],\\n            r\\n        );\\n        for (uint i = 1; i < interpolationPolys.length; i++) {\\n            //gammaShiftedCommitmentSum += gamma^i * Ii\\n            gammaShiftedCommitmentSum = BN254.plus(\\n                gammaShiftedCommitmentSum,\\n                BN254.scalar_mul(interpolationPolys[i], gammaAndGammaPower[1])\\n            );\\n            //gammaShiftedEvaluationSum += gamma^i * Ii(r)\\n            uint256 eval = linearPolynomialEvaluation(polys[i], r);\\n            gammaShiftedEvaluationSum = addmod(\\n                gammaShiftedEvaluationSum,\\n                mulmod(gammaAndGammaPower[1], eval, BN254.FR_MODULUS),\\n                BN254.FR_MODULUS\\n            );\\n            // gammaPower = gamma^(i+1)\\n            gammaAndGammaPower[1] = mulmod(\\n                gammaAndGammaPower[0],\\n                gammaAndGammaPower[1],\\n                BN254.FR_MODULUS\\n            );\\n        }\\n\\n        return\\n            openPolynomialAtPoint(\\n                gammaShiftedCommitmentSum,\\n                polyEquivalenceProof,\\n                r,\\n                gammaShiftedEvaluationSum\\n            );\\n    }\\n\\n    function batchNonInteractivePolynomialProofs(\\n        bytes calldata header,\\n        uint32 firstChunkNumber,\\n        bytes[] calldata polys,\\n        MultiRevealProof[] calldata multiRevealProofs,\\n        BN254.G2Point calldata polyEquivalenceProof\\n    ) external view returns (bool) {\\n        //randomness from each polynomial\\n        bytes32[] memory rs = new bytes32[](polys.length);\\n        DataStoreKZGMetadata\\n            memory dskzgMetadata = getDataCommitmentAndMultirevealDegreeAndSymbolBreakdownFromHeader(\\n                header\\n            );\\n        uint256 numProofs = multiRevealProofs.length;\\n        for (uint256 i = 0; i < numProofs; ) {\\n            //verify pairing for the commitment to interpolating polynomial\\n            require(\\n                validateDisclosureResponse(\\n                    dskzgMetadata,\\n                    firstChunkNumber + uint32(i),\\n                    multiRevealProofs[i].interpolationPoly,\\n                    multiRevealProofs[i].revealProof,\\n                    multiRevealProofs[i].zeroPoly,\\n                    multiRevealProofs[i].zeroPolyProof\\n                ),\\n                \\\"Reveal failed due to non 1 pairing\\\"\\n            );\\n\\n            // TODO: verify that this check is correct!\\n            // check that degree of polynomial in the header matches the length of the submitted polynomial\\n            // i.e. make sure submitted polynomial doesn't contain extra points\\n            require(\\n                dskzgMetadata.degree * 32 == polys[i].length,\\n                \\\"Polynomial must have a 256 bit coefficient for each term\\\"\\n            );\\n\\n            //Calculating r, the point at which to evaluate the interpolating polynomial\\n            rs[i] = keccak256(\\n                abi.encodePacked(\\n                    keccak256(polys[i]),\\n                    multiRevealProofs[i].interpolationPoly.X,\\n                    multiRevealProofs[i].interpolationPoly.Y\\n                )\\n            );\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        //this is the point to open each polynomial at\\n        uint256 r = uint256(keccak256(abi.encodePacked(rs))) % BN254.FR_MODULUS;\\n        //this is the offset we add to each polynomial to prevent collision\\n        //we use array to help with stack\\n        uint256[2] memory gammaAndGammaPower;\\n        gammaAndGammaPower[0] =\\n            uint256(keccak256(abi.encodePacked(rs, uint256(0)))) %\\n            BN254.FR_MODULUS;\\n        gammaAndGammaPower[1] = gammaAndGammaPower[0];\\n        //store I1\\n        BN254.G1Point memory gammaShiftedCommitmentSum = multiRevealProofs[0]\\n            .interpolationPoly;\\n        //store I1(r)\\n        uint256 gammaShiftedEvaluationSum = linearPolynomialEvaluation(\\n            polys[0],\\n            r\\n        );\\n        for (uint i = 1; i < multiRevealProofs.length; i++) {\\n            //gammaShiftedCommitmentSum += gamma^i * Ii\\n            gammaShiftedCommitmentSum = BN254.plus(\\n                gammaShiftedCommitmentSum,\\n                BN254.scalar_mul(\\n                    multiRevealProofs[i].interpolationPoly,\\n                    gammaAndGammaPower[1]\\n                )\\n            );\\n            //gammaShiftedEvaluationSum += gamma^i * Ii(r)\\n            uint256 eval = linearPolynomialEvaluation(polys[i], r);\\n            gammaShiftedEvaluationSum = gammaShiftedEvaluationSum = addmod(\\n                gammaShiftedEvaluationSum,\\n                mulmod(gammaAndGammaPower[1], eval, BN254.FR_MODULUS),\\n                BN254.FR_MODULUS\\n            );\\n            // gammaPower = gamma^(i+1)\\n            gammaAndGammaPower[1] = mulmod(\\n                gammaAndGammaPower[0],\\n                gammaAndGammaPower[1],\\n                BN254.FR_MODULUS\\n            );\\n        }\\n\\n        return\\n            openPolynomialAtPoint(\\n                gammaShiftedCommitmentSum,\\n                polyEquivalenceProof,\\n                r,\\n                gammaShiftedEvaluationSum\\n            );\\n    }\\n\\n    //evaluates the given polynomial \\\"poly\\\" at value \\\"r\\\" and returns the result\\n    function linearPolynomialEvaluation(bytes calldata poly, uint256 r)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 sum;\\n        uint256 length = poly.length;\\n        uint256 rPower = 1;\\n        for (uint i = 0; i < length; ) {\\n            uint256 coefficient = uint256(bytes32(poly[i:i + 32]));\\n            sum = addmod(sum, mulmod(coefficient, rPower, BN254.FR_MODULUS), BN254.FR_MODULUS);\\n            rPower = mulmod(rPower, r, BN254.FR_MODULUS);\\n            i += 32;\\n        }\\n        return sum;\\n    }\\n\\n    /// @notice This function evaluates the zero polynomial (x^ChunkLenE - (⍵^index * φ)^{ChunkLenE}) at point alpha\\n    ///         Recall that `φ = ⍵^NumSysE` and `⍵` is the `NumSysE * ChunkLenE`-th root of unity. \\n    ///         So, we are now left with evaluating `⍵^{index * ChunkLenE}`.  \\n    function constructZeroPolyEval(uint256 index, uint32 chunkLenE, uint32 numNodeE, uint256 alpha) public returns (uint256) {\\n        // getting the mapping of the coset index\\n        index = mulmod(chunkLenE, (reverseBitsLimited(numNodeE, uint32(index))), BN254.FR_MODULUS);\\n\\n        // uint256 modulus = BN254.FR_MODULUS;\\n        // uint256 omegaPower = BN254.OMEGA;\\n        uint256 omegaPower;\\n\\n        // computing ⍵^{index * ChunkLenE}\\n        omegaPower = BN254.expMod(BN254.OMEGA, index, BN254.FR_MODULUS);\\n \\n        // computing alpha^ChunkLenE\\n        alpha = BN254.expMod(alpha, chunkLenE, BN254.FR_MODULUS);\\n\\n        return addmod(alpha, BN254.FR_MODULUS - omegaPower,  BN254.FR_MODULUS);\\n    }\\n    \\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"eignlayr-contracts/src/contracts/libraries/Merkle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENCED\\n// Adapted from OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary Merkle {\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is \\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     * \\n     * Note this is for a Merkle tree using the keccak/sha3 hash function\\n     */\\n    function verifyInclusionKeccak(\\n        bytes memory proof,\\n        bytes32 root,\\n        bytes32 leaf,\\n        uint256 index\\n    ) internal pure returns (bool) {\\n        return processInclusionProofKeccak(proof, leaf, index) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is \\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     * \\n     * _Available since v4.4._\\n     * \\n     * Note this is for a Merkle tree using the keccak/sha3 hash function\\n     */\\n    function processInclusionProofKeccak(bytes memory proof, bytes32 leaf, uint256 index) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 32; i <= proof.length; i+=32) {\\n            if(index % 2 == 0) {\\n                // if ith bit of index is 0, then computedHash is a left sibling\\n                assembly {\\n                    mstore(0x00, computedHash)\\n                    mstore(0x20, mload(add(proof, i)))\\n                    computedHash := keccak256(0x00, 0x40)\\n                    index := div(index, 2)\\n                }\\n            } else {\\n                // if ith bit of index is 1, then computedHash is a right sibling\\n                assembly {\\n                    mstore(0x00, mload(add(proof, i)))\\n                    mstore(0x20, computedHash)\\n                    computedHash := keccak256(0x00, 0x40)\\n                    index := div(index, 2)\\n                }            \\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is \\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     * \\n     * Note this is for a Merkle tree using the sha256 hash function\\n     */\\n    function verifyInclusionSha256(\\n        bytes memory proof,\\n        bytes32 root,\\n        bytes32 leaf,\\n        uint256 index\\n    ) internal view returns (bool) {\\n        return processInclusionProofSha256(proof, leaf, index) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is \\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     *\\n     * _Available since v4.4._\\n     * \\n     * Note this is for a Merkle tree using the keccak/sha3 hash function\\n     */\\n    function processInclusionProofSha256(bytes memory proof, bytes32 leaf, uint256 index) internal view returns (bytes32) {\\n        bytes32[1] memory computedHash = [leaf];\\n        for (uint256 i = 32; i <= proof.length; i+=32) {\\n            if(index % 2 == 0) {\\n                // if ith bit of index is 0, then computedHash is a left sibling\\n                assembly {\\n                    mstore(0x00, mload(computedHash))\\n                    mstore(0x20, mload(add(proof, i)))\\n                    if iszero(staticcall(sub(gas(), 2000), 2, 0x00, 0x40, computedHash, 0x20)) {revert(0, 0)}\\n                    index := div(index, 2)\\n                }\\n            } else {\\n                // if ith bit of index is 1, then computedHash is a right sibling\\n                assembly {\\n                    mstore(0x00, mload(add(proof, i)))\\n                    mstore(0x20, mload(computedHash))\\n                    if iszero(staticcall(sub(gas(), 2000), 2, 0x00, 0x40, computedHash, 0x20)) {revert(0, 0)}\\n                    index := div(index, 2)\\n                }            \\n            }\\n        }\\n        return computedHash[0];\\n    }\\n\\n    /**\\n     @notice this function returns the merkle root of a tree created from a set of leaves using sha256 as its hash function\\n     @param leaves the leaves of the merkle tree\\n\\n     @notice requires the leaves.length is a power of 2\\n     */ \\n    function merkleizeSha256(\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32) {\\n        //there are half as many nodes in the layer above the leaves\\n        uint256 numNodesInLayer = leaves.length / 2;\\n        //create a layer to store the internal nodes\\n        bytes32[] memory layer = new bytes32[](numNodesInLayer);\\n        //fill the layer with the pairwise hashes of the leaves\\n        for (uint i = 0; i < numNodesInLayer; i++) {\\n            layer[i] = sha256(abi.encodePacked(leaves[2*i], leaves[2*i+1]));\\n        }\\n        //the next layer above has half as many nodes\\n        numNodesInLayer /= 2;\\n        //while we haven't computed the root\\n        while (numNodesInLayer != 0) {\\n            //overwrite the first numNodesInLayer nodes in layer with the pairwise hashes of their children\\n            for (uint i = 0; i < numNodesInLayer; i++) {\\n                layer[i] = sha256(abi.encodePacked(layer[2*i], layer[2*i+1]));\\n            }\\n            //the next layer above has half as many nodes\\n            numNodesInLayer /= 2;\\n        }\\n        //the first node in the layer is the root\\n        return layer[0];\\n    }\\n}\"\r\n    },\r\n    \"eignlayr-contracts/src/contracts/libraries/BN254.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED AND MIT\\n// several functions are taken or adapted from https://github.com/HarryR/solcrypto/blob/master/contracts/altbn128.sol (MIT license):\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to\\n// deal in the Software without restriction, including without limitation the\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\\n// sell copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\\n// IN THE SOFTWARE.\\n\\n// The remainder of the code is written by LayrLabs Inc. and UNLICENSED\\n\\npragma solidity ^0.8.12;\\n\\n/**\\n * @title Library for operations on the BN254 elliptic curve.\\n * @author Layr Labs, Inc.\\n * @notice Contains BN254 parameters, common operations (addition, scalar mul, pairing), and BLS signature functionality.\\n */\\nlibrary BN254 {\\n    // modulus for the underlying field F_p of the elliptic curve\\n    uint256 internal constant FP_MODULUS =\\n        21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n    // modulus for the underlying field F_r of the elliptic curve\\n    uint256 internal constant FR_MODULUS =\\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n    // primitive root of unity \\n    uint256 internal constant OMEGA = 10359452186428527605436343203440067497552205259388878191021578220384701716497;\\n    \\n\\n    struct G1Point {\\n        uint256 X;\\n        uint256 Y;\\n    }\\n\\n    // Encoding of field elements is: X[1] * i + X[0]\\n    struct G2Point {\\n        uint256[2] X;\\n        uint256[2] Y;\\n    }\\n\\n    // generator of group G2\\n    /// @dev Generator point in F_q2 is of the form: (x0 + ix1, y0 + iy1).\\n    uint256 internal constant G2x1 =\\n        11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 internal constant G2x0 =\\n        10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 internal constant G2y1 =\\n        4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 internal constant G2y0 =\\n        8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n    /// @notice returns the G2 generator\\n    /// @dev mind the ordering of the 1s and 0s!\\n    ///      this is because of the (unknown to us) convention used in the bn254 pairing precompile contract\\n    ///      \\\"Elements a * i + b of F_p^2 are encoded as two elements of F_p, (a, b).\\\"\\n    ///      https://github.com/ethereum/EIPs/blob/master/EIPS/eip-197.md#encoding\\n    function generatorG2() internal pure returns (G2Point memory) {\\n        return G2Point(\\n            [G2x1, G2x0], [G2y1, G2y0]\\n        );\\n    }\\n\\n    // negation of the generator of group G2\\n    /// @dev Generator point in F_q2 is of the form: (x0 + ix1, y0 + iy1).\\n    uint256 internal constant nG2x1 =\\n        11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 internal constant nG2x0 =\\n        10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 internal constant nG2y1 =\\n        17805874995975841540914202342111839520379459829704422454583296818431106115052;\\n    uint256 internal constant nG2y0 =\\n        13392588948715843804641432497768002650278120570034223513918757245338268106653;\\n    function negGeneratorG2() internal pure returns (G2Point memory) {\\n        return G2Point(\\n            [nG2x1, nG2x0], [nG2y1, nG2y0]\\n        );\\n    }\\n\\n    // first power of srs in G2\\n    // TODO: change in production\\n    uint256 internal constant G2SRSx1 = 7912312892787135728292535536655271843828059318189722219035249994421084560563;\\n    uint256 internal constant G2SRSx0 = 21039730876973405969844107393779063362038454413254731404052240341412356318284;\\n    uint256 internal constant G2SRSy1 = 18697407556011630376420900106252341752488547575648825575049647403852275261247;\\n    uint256 internal constant G2SRSy0 = 7586489485579523767759120334904353546627445333297951253230866312564920951171;\\n    function G2SRSFirstPower() internal pure returns (G2Point memory) {\\n        return G2Point(\\n            [G2SRSx0, G2SRSx1], [G2SRSy0, G2SRSy1]\\n        );\\n    }\\n\\n    bytes32 internal constant powersOfTauMerkleRoot =\\n        0x22c998e49752bbb1918ba87d6d59dd0e83620a311ba91dd4b2cc84990b31b56f;\\n\\n\\n    /**\\n     * @param p Some point in G1.\\n     * @return The negation of `p`, i.e. p.plus(p.negate()) should be zero.\\n     */\\n    function negate(G1Point memory p) internal pure returns (G1Point memory) {\\n        // The prime q in the base field F_q for G1\\n        if (p.X == 0 && p.Y == 0) {\\n            return G1Point(0, 0);\\n        } else {\\n            return G1Point(p.X, FP_MODULUS - (p.Y % FP_MODULUS));\\n        }\\n    }\\n\\n    /**\\n     * @return r the sum of two points of G1\\n     */\\n    function plus(\\n        G1Point memory p1,\\n        G1Point memory p2\\n    ) internal view returns (G1Point memory r) {\\n        uint256[4] memory input;\\n        input[0] = p1.X;\\n        input[1] = p1.Y;\\n        input[2] = p2.X;\\n        input[3] = p2.Y;\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 6, input, 0x80, r, 0x40)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 {\\n                invalid()\\n            }\\n        }\\n\\n        require(success, \\\"ec-add-failed\\\");\\n    }\\n\\n    /**\\n     * @return r the product of a point on G1 and a scalar, i.e.\\n     *         p == p.scalar_mul(1) and p.plus(p) == p.scalar_mul(2) for all\\n     *         points p.\\n     */\\n    function scalar_mul(\\n        G1Point memory p,\\n        uint256 s\\n    ) internal view returns (G1Point memory r) {\\n        uint256[3] memory input;\\n        input[0] = p.X;\\n        input[1] = p.Y;\\n        input[2] = s;\\n        bool success;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 7, input, 0x60, r, 0x40)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 {\\n                invalid()\\n            }\\n        }\\n        require(success, \\\"ec-mul-failed\\\");\\n    }\\n\\n    /**\\n     *  @return The result of computing the pairing check\\n     *         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n     *         For example,\\n     *         pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\\n     */\\n    function pairing(\\n        G1Point memory a1,\\n        G2Point memory a2,\\n        G1Point memory b1,\\n        G2Point memory b2\\n    ) internal view returns (bool) {\\n        G1Point[2] memory p1 = [a1, b1];\\n        G2Point[2] memory p2 = [a2, b2];\\n\\n        uint256[12] memory input;\\n\\n        for (uint256 i = 0; i < 2; i++) {\\n            uint256 j = i * 6;\\n            input[j + 0] = p1[i].X;\\n            input[j + 1] = p1[i].Y;\\n            input[j + 2] = p2[i].X[0];\\n            input[j + 3] = p2[i].X[1];\\n            input[j + 4] = p2[i].Y[0];\\n            input[j + 5] = p2[i].Y[1];\\n        }\\n\\n        uint256[1] memory out;\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(\\n                sub(gas(), 2000),\\n                8,\\n                input,\\n                mul(12, 0x20),\\n                out,\\n                0x20\\n            )\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 {\\n                invalid()\\n            }\\n        }\\n\\n        require(success, \\\"pairing-opcode-failed\\\");\\n\\n        return out[0] != 0;\\n    }\\n\\n    /**\\n     * @notice This function is functionally the same as pairing(), however it specifies a gas limit\\n     *         the user can set, as a precompile may use the entire gas budget if it reverts.\\n     */\\n    function safePairing(\\n        G1Point memory a1,\\n        G2Point memory a2,\\n        G1Point memory b1,\\n        G2Point memory b2,\\n        uint256 pairingGas\\n    ) internal view returns (bool, bool) {\\n        G1Point[2] memory p1 = [a1, b1];\\n        G2Point[2] memory p2 = [a2, b2];\\n\\n        uint256[12] memory input;\\n\\n        for (uint256 i = 0; i < 2; i++) {\\n            uint256 j = i * 6;\\n            input[j + 0] = p1[i].X;\\n            input[j + 1] = p1[i].Y;\\n            input[j + 2] = p2[i].X[0];\\n            input[j + 3] = p2[i].X[1];\\n            input[j + 4] = p2[i].Y[0];\\n            input[j + 5] = p2[i].Y[1];\\n        }\\n\\n        uint256[1] memory out;\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(\\n                pairingGas,\\n                8,\\n                input,\\n                mul(12, 0x20),\\n                out,\\n                0x20\\n            )\\n        }\\n\\n        //Out is the output of the pairing precompile, either 0 or 1 based on whether the two pairings are equal.\\n        //Success is true if the precompile actually goes through (aka all inputs are valid)\\n\\n        return (success, out[0] != 0);\\n    }\\n\\n    /// @return the keccak256 hash of the G1 Point\\n    /// @dev used for BLS signatures\\n    function hashG1Point(\\n        BN254.G1Point memory pk\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(pk.X, pk.Y));\\n    }\\n\\n\\n    /**\\n     * @notice adapted from https://github.com/HarryR/solcrypto/blob/master/contracts/altbn128.sol\\n     */\\n    function hashToG1(bytes32 _x) internal view returns (uint256, uint256) {\\n        uint256 beta = 0;\\n        uint256 y = 0;\\n\\n        // XXX: Gen Order (n) or Field Order (p) ?\\n        uint256 x = uint256(_x) % FP_MODULUS;\\n\\n        while( true ) {\\n            (beta, y) = findYFromX(x);\\n\\n            // y^2 == beta\\n            if( beta == mulmod(y, y, FP_MODULUS) ) {\\n                return (x, y);\\n            }\\n\\n            x = addmod(x, 1, FP_MODULUS);\\n        }\\n        return (0, 0);\\n    }\\n\\n    /**\\n    * Given X, find Y\\n    *\\n    *   where y = sqrt(x^3 + b)\\n    *\\n    * Returns: (x^3 + b), y\\n    */\\n    function findYFromX(uint256 x)\\n        internal view returns(uint256, uint256)\\n    {\\n        // beta = (x^3 + b) % p\\n        uint256 beta = addmod(mulmod(mulmod(x, x, FP_MODULUS), x, FP_MODULUS), 3, FP_MODULUS);\\n\\n        // y^2 = x^3 + b\\n        // this acts like: y = sqrt(beta) = beta^((p+1) / 4)\\n        uint256 y = expMod(beta, 0xc19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f52, FP_MODULUS);\\n\\n        return (beta, y);\\n    }\\n\\n    function expMod(uint256 _base, uint256 _exponent, uint256 _modulus) internal view returns (uint256 retval) {\\n        bool success;\\n        uint256[1] memory output;\\n        uint[6] memory input;\\n        input[0] = 0x20;        // baseLen = new(big.Int).SetBytes(getData(input, 0, 32))\\n        input[1] = 0x20;        // expLen  = new(big.Int).SetBytes(getData(input, 32, 32))\\n        input[2] = 0x20;        // modLen  = new(big.Int).SetBytes(getData(input, 64, 32))\\n        input[3] = _base;\\n        input[4] = _exponent;\\n        input[5] = _modulus;\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 5, input, 0xc0, output, 0x20)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n        require(success);\\n        return output[0];\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/IDataLayrServiceManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@eigenlayer/contracts/interfaces/IServiceManager.sol\\\";\\nimport \\\"@eigenlayer/contracts/interfaces/IDelayedService.sol\\\";\\nimport \\\"@eigenlayer/contracts/interfaces/IEigenLayrDelegation.sol\\\";\\n\\n\\ninterface IDataLayrServiceManager is IServiceManager, IDelayedService {\\n    //Relevant metadata for a given datastore\\n    struct DataStoreMetadata {\\n        bytes32 headerHash; // the hash of the header as defined in the contract\\n        uint32 durationDataStoreId; // the id of the datastore relative to all other datastores of the same duration\\n        uint32 globalDataStoreId; // the id of the datastore relative to all other datastores\\n        uint32 referenceBlockNumber; // the block number from which the stakes were taken for the datastore\\n        uint32 blockNumber; // the block number at the time of initialization\\n        uint96 fee; // the amount of paymentToken paid for the datastore\\n        address confirmer; // the address that is allowed to confirm the datastore\\n        bytes32 signatoryRecordHash; // the hash of relavent signatory information for payments and fraud proofs\\n    }\\n\\n    //Stores the data required to index a given datastore's metadata\\n    struct DataStoreSearchData {\\n        DataStoreMetadata metadata;\\n        uint8 duration;\\n        uint256 timestamp;\\n        uint32 index;\\n    }\\n\\n    struct SignatoryRecordMinusDataStoreId {\\n        bytes32[] nonSignerPubkeyHashes;\\n        uint256 signedStakeFirstQuorum;\\n        uint256 signedStakeSecondQuorum;\\n    }\\n\\n    struct DataStoresForDuration {\\n        uint32 one_duration;\\n        uint32 two_duration;\\n        uint32 three_duration;\\n        uint32 four_duration;\\n        uint32 five_duration;\\n        uint32 six_duration;\\n        uint32 seven_duration;\\n        uint32 dataStoreId;\\n        uint32 latestTime;\\n    }\\n\\n    struct DataStoreHashInputs {\\n        bytes32 headerHash;\\n        uint32 dataStoreId;\\n        uint32 blockNumber;\\n        uint256 fee;\\n    }\\n\\n    /**\\n     * @notice This function is used for\\n     * - notifying via Ethereum that the disperser has asserted the data blob\\n     * into DataLayr and is waiting to obtain quorum of DataLayr operators to sign,\\n     * - asserting the metadata corresponding to the data asserted into DataLayr\\n     * - escrow the service fees that DataLayr operators will receive from the disperser\\n     * on account of their service.\\n     *\\n     * This function returns the index of the data blob in dataStoreIdsForDuration[duration][block.timestamp]\\n     */\\n    /**\\n     * @param confirmer is the address that must confirm the datastore\\n     * @param header is the summary of the data that is being asserted into DataLayr,\\n     *  type DataStoreHeader struct {\\n     *   KzgCommit      [64]byte\\n     *   Degree         uint32\\n     *   NumSys         uint32\\n     *   NumPar         uint32\\n     *   OrigDataSize   uint32\\n     *   Disperser      [20]byte\\n     *   LowDegreeProof [64]byte\\n     *  }\\n     * @param duration for which the data has to be stored by the DataLayr operators.\\n     * This is a quantized parameter that describes how many factors of DURATION_SCALE\\n     * does this data blob needs to be stored. The quantization process comes from ease of\\n     * implementation in DataLayrBombVerifier.sol.\\n     * @param blockNumber is the block number in Ethereum for which the confirmation will\\n     * consult total + operator stake amounts.\\n     * -- must not be more than 'BLOCK_STALE_MEASURE' (defined in DataLayr) blocks in past\\n     * @return index The index in the array `dataStoreHashesForDurationAtTimestamp[duration][block.timestamp]` at which the DataStore's hash was stored.\\n     */\\n    function initDataStore(\\n        address feePayer,\\n        address confirmer,\\n        uint8 duration,\\n        uint32 blockNumber,\\n        uint32 totalOperatorsIndex,\\n        bytes calldata header\\n    )\\n        external\\n        returns (uint32);\\n\\n    /**\\n     * @notice This function is used for\\n     * - disperser to notify that signatures on the message, comprising of hash( headerHash ),\\n     * from quorum of DataLayr nodes have been obtained,\\n     * - check that the aggregate signature is valid,\\n     * - and check whether quorum has been achieved or not.\\n     */\\n    /**\\n     * @param data Input to the `checkSignatures` function, which is of the format:\\n     * <\\n     * bytes32 msgHash,\\n     * uint48 index of the totalStake corresponding to the dataStoreId in the 'totalStakeHistory' array of the BLSRegistry\\n     * uint32 numberOfNonSigners,\\n     * uint256[numberOfSigners][4] pubkeys of nonsigners,\\n     * uint32 apkIndex,\\n     * uint256[4] apk,\\n     * uint256[2] sigma\\n     * >\\n     */\\n    function confirmDataStore(bytes calldata data, DataStoreSearchData memory searchData) external;\\n\\n    /// @notice number of leaves in the root tree\\n    function numPowersOfTau() external view returns (uint48);\\n\\n    /// @notice number of layers in the root tree\\n    function log2NumPowersOfTau() external view returns (uint48);\\n\\n    /// @notice Unit of measure (in time) for the duration of DataStores\\n    function DURATION_SCALE() external view returns (uint256);\\n\\n    /// @notice The longest allowed duation of a DataStore, measured in `DURATION_SCALE`\\n    function MAX_DATASTORE_DURATION() external view returns (uint8);\\n\\n    /// @notice Returns the hash of the `index`th DataStore with the specified `duration` at the specified UTC `timestamp`.\\n    function getDataStoreHashesForDurationAtTimestamp(uint8 duration, uint256 timestamp, uint32 index)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    /**\\n     * @notice returns the number of data stores for the @param duration\\n     */\\n    function getNumDataStoresForDuration(uint8 duration) external view returns (uint32);\\n\\n    /// @notice Collateral token used for placing collateral on challenges & payment commits\\n    function collateralToken() external view returns (IERC20);\\n\\n\\n    function freezeOperator(address operator) external;\\n\\n    /**\\n     * @notice Checks that the hash of the `index`th DataStore with the specified `duration` at the specified UTC `timestamp` matches the supplied `metadata`.\\n     * Returns 'true' if the metadata matches the hash, and 'false' otherwise.\\n     */\\n   function verifyDataStoreMetadata(uint8 duration, uint256 timestamp, uint32 index, DataStoreMetadata memory metadata) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"eignlayr-contracts/src/contracts/interfaces/IServiceManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IEigenLayrDelegation.sol\\\";\\n\\n/**\\n * @title Interface for a `ServiceManager`-type contract.\\n * @author Layr Labs, Inc.\\n */\\n// TODO: provide more functions for this spec\\ninterface IServiceManager {\\n    /// @notice Returns the current 'taskNumber' for the middleware\\n    function taskNumber() external view returns (uint32);\\n\\n    /// @notice The Delegation contract of EigenLayer.\\n    function eigenLayrDelegation() external view returns (IEigenLayrDelegation);\\n\\n    /// @notice Returns the `latestTime` until which operators must serve.\\n    function latestTime() external view returns (uint32);\\n\\n    function owner() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"eignlayr-contracts/src/contracts/interfaces/IDelayedService.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Interface for a middleware / service that may look at past stake amounts.\\n * @author Layr Labs, Inc.\\n * @notice Specifically, this interface is designed for services that consult stake amounts up to `BLOCK_STALE_MEASURE`\\n * blocks in the past. This may be necessary due to, e.g., network processing & communication delays, or to avoid race conditions\\n * that could be present with coordinating aggregate operator signatures while service operators are registering & de-registering.\\n * @dev To clarify edge cases, the middleware can look `BLOCK_STALE_MEASURE` blocks into the past, i.e. it may trust stakes from the interval\\n * [block.number - BLOCK_STALE_MEASURE, block.number] (specifically, *inclusive* of the block that is `BLOCK_STALE_MEASURE` before the current one)\\n */\\ninterface IDelayedService {\\n    /// @notice The maximum amount of blocks in the past that the service will consider stake amounts to still be 'valid'.\\n    function BLOCK_STALE_MEASURE() external view returns(uint32);    \\n}\\n\"\r\n    },\r\n    \"eignlayr-contracts/src/contracts/interfaces/IEigenLayrDelegation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IInvestmentStrategy.sol\\\";\\n\\n/**\\n * @title The interface for the primary delegation contract for EigenLayr.\\n * @author Layr Labs, Inc.\\n * @notice  This is the contract for delegation in EigenLayr. The main functionalities of this contract are\\n * - enabling anyone to register as an operator in EigenLayr\\n * - allowing new operators to provide a DelegationTerms-type contract, which may mediate their interactions with stakers who delegate to them\\n * - enabling any staker to delegate its stake to the operator of its choice\\n * - enabling a staker to undelegate its assets from an operator (performed as part of the withdrawal process, initiated through the InvestmentManager)\\n */\\ninterface IEigenLayrDelegation {\\n\\n    /**\\n     * @notice This will be called by an operator to register itself as an operator that stakers can choose to delegate to.\\n     * @param rewardReciveAddress another EOA address for receive from mantle network\\n     */\\n    function registerAsOperator(address rewardReciveAddress) external;\\n\\n    /**\\n     *  @notice This will be called by a staker to delegate its assets to some operator.\\n     *  @param operator is the operator to whom staker (msg.sender) is delegating its assets\\n     */\\n    function delegateTo(address operator) external;\\n\\n    /**\\n     * @notice Delegates from `staker` to `operator`.\\n     * @dev requires that r, vs are a valid ECSDA signature from `staker` indicating their intention for this action\\n     */\\n    function delegateToBySignature(address staker, address operator, uint256 expiry, bytes32 r, bytes32 vs) external;\\n\\n    /**\\n     * @notice Undelegates `staker` from the operator who they are delegated to.\\n     * @notice Callable only by the InvestmentManager\\n     * @dev Should only ever be called in the event that the `staker` has no active deposits in EigenLayer.\\n     */\\n    function undelegate(address staker) external;\\n\\n    /// @notice returns the address of the operator that `staker` is delegated to.\\n    function delegatedTo(address staker) external view returns (address);\\n\\n    /// @notice returns the eoa address of the `operator`, which may mediate their interactions with stakers who delegate to them.\\n    function getOperatorRewardAddress(address operator) external view returns (address);\\n\\n    /// @notice returns the total number of shares in `strategy` that are delegated to `operator`.\\n    function operatorShares(address operator, IInvestmentStrategy strategy) external view returns (uint256);\\n\\n    /**\\n     * @notice Increases the `staker`'s delegated shares in `strategy` by `shares, typically called when the staker has further deposits into EigenLayr\\n     * @dev Callable only by the InvestmentManager\\n     */\\n    function increaseDelegatedShares(address staker, IInvestmentStrategy strategy, uint256 shares) external;\\n\\n    /**\\n     * @notice Decreases the `staker`'s delegated shares in each entry of `strategies` by its respective `shares[i]`, typically called when the staker withdraws from EigenLayr\\n     * @dev Callable only by the InvestmentManager\\n     */\\n    function decreaseDelegatedShares(\\n        address staker,\\n        IInvestmentStrategy[] calldata strategies,\\n        uint256[] calldata shares\\n    ) external;\\n\\n    /// @notice Returns 'true' if `staker` *is* actively delegated, and 'false' otherwise.\\n    function isDelegated(address staker) external view returns (bool);\\n\\n    /// @notice Returns 'true' if `staker` is *not* actively delegated, and 'false' otherwise.\\n    function isNotDelegated(address staker) external returns (bool);\\n\\n    /// @notice Returns if an operator can be delegated to, i.e. it has called `registerAsOperator`.\\n    function isOperator(address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"eignlayr-contracts/src/contracts/interfaces/IInvestmentStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Minimal interface for an `InvestmentStrategy` contract.\\n * @author Layr Labs, Inc.\\n * @notice Custom `InvestmentStrategy` implementations may expand extensively on this interface.\\n */\\ninterface IInvestmentStrategy {\\n    /**\\n     * @notice Used to deposit tokens into this InvestmentStrategy\\n     * @param token is the ERC20 token being deposited\\n     * @param amount is the amount of token being deposited\\n     * @dev This function is only callable by the investmentManager contract. It is invoked inside of the investmentManager's\\n     * `depositIntoStrategy` function, and individual share balances are recorded in the investmentManager as well.\\n     * @return newShares is the number of new shares issued at the current exchange ratio.\\n     */\\n    function deposit(IERC20 token, uint256 amount) external returns (uint256);\\n\\n    /**\\n     * @notice Used to withdraw tokens from this InvestmentStrategy, to the `depositor`'s address\\n     * @param token is the ERC20 token being transferred out\\n     * @param amountShares is the amount of shares being withdrawn\\n     * @dev This function is only callable by the investmentManager contract. It is invoked inside of the investmentManager's\\n     * other functions, and individual share balances are recorded in the investmentManager as well.\\n     */\\n    function withdraw(address depositor, IERC20 token, uint256 amountShares) external;\\n\\n    /**\\n     * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\\n     * @notice In contrast to `sharesToUnderlyingView`, this function **may** make state modifications\\n     * @param amountShares is the amount of shares to calculate its conversion into the underlying token\\n     * @dev Implementation for these functions in particular may vary signifcantly for different strategies\\n     */\\n    function sharesToUnderlying(uint256 amountShares) external returns (uint256);\\n\\n    /**\\n     * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\\n     * @notice In contrast to `underlyingToSharesView`, this function **may** make state modifications\\n     * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\\n     * @dev Implementation for these functions in particular may vary signifcantly for different strategies\\n     */\\n    function underlyingToShares(uint256 amountUnderlying) external view returns (uint256);\\n\\n    /**\\n     * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\\n     * this strategy. In contrast to `userUnderlyingView`, this function **may** make state modifications\\n     */\\n    function userUnderlying(address user) external returns (uint256);\\n\\n     /**\\n     * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\\n     * @notice In contrast to `sharesToUnderlying`, this function guarantees no state modifications\\n     * @param amountShares is the amount of shares to calculate its conversion into the underlying token\\n     * @dev Implementation for these functions in particular may vary signifcantly for different strategies\\n     */\\n    function sharesToUnderlyingView(uint256 amountShares) external view returns (uint256);\\n\\n    /**\\n     * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\\n     * @notice In contrast to `underlyingToShares`, this function guarantees no state modifications\\n     * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\\n     * @dev Implementation for these functions in particular may vary signifcantly for different strategies\\n     */\\n    function underlyingToSharesView(uint256 amountUnderlying) external view returns (uint256);\\n\\n    /**\\n     * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\\n     * this strategy. In contrast to `userUnderlying`, this function guarantees no state modifications\\n     */\\n    function userUnderlyingView(address user) external view returns (uint256);\\n\\n    /// @notice The underyling token for shares in this InvestmentStrategy\\n    function underlyingToken() external view returns (IERC20);\\n\\n    /// @notice The total number of extant shares in thie InvestmentStrategy\\n    function totalShares() external view returns (uint256);\\n\\n    /// @notice Returns either a brief string explaining the strategy's goal & purpose, or a link to metadata that explains in more detail.\\n    function explanation() external view returns (string memory);\\n\\n    /// @notice set min deposit for node staking\\n    function setMinDepositAmount(uint256 minDepositAmount) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@eigenlayer/=eignlayr-contracts/src/\",\r\n      \"@openzeppelin-upgrades/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"lib/forge-std:ds-test/=lib/forge-std/lib/ds-test/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"firstChunkNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes[]\",\"name\":\"polys\",\"type\":\"bytes[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"interpolationPoly\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"revealProof\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"X\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"Y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct BN254.G2Point\",\"name\":\"zeroPoly\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"zeroPolyProof\",\"type\":\"bytes\"}],\"internalType\":\"struct DataLayrChallengeUtils.MultiRevealProof[]\",\"name\":\"multiRevealProofs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"X\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"Y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct BN254.G2Point\",\"name\":\"polyEquivalenceProof\",\"type\":\"tuple\"}],\"name\":\"batchNonInteractivePolynomialProofs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operatorPubkeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nonSignerIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"nonSignerPubkeyHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"signedStakeFirstQuorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"signedStakeSecondQuorum\",\"type\":\"uint256\"}],\"internalType\":\"struct IDataLayrServiceManager.SignatoryRecordMinusDataStoreId\",\"name\":\"signatoryRecord\",\"type\":\"tuple\"}],\"name\":\"checkExclusionFromNonSignerSet\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operatorPubkeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nonSignerIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"nonSignerPubkeyHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"signedStakeFirstQuorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"signedStakeSecondQuorum\",\"type\":\"uint256\"}],\"internalType\":\"struct IDataLayrServiceManager.SignatoryRecordMinusDataStoreId\",\"name\":\"signatoryRecord\",\"type\":\"tuple\"}],\"name\":\"checkInclusionInNonSignerSet\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"chunkLenE\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numNodeE\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"alpha\",\"type\":\"uint256\"}],\"name\":\"constructZeroPolyEval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\"}],\"name\":\"getDataCommitmentAndMultirevealDegreeAndSymbolBreakdownFromHeader\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"c\",\"type\":\"tuple\"},{\"internalType\":\"uint48\",\"name\":\"degree\",\"type\":\"uint48\"},{\"internalType\":\"uint32\",\"name\":\"numSys\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numPar\",\"type\":\"uint32\"}],\"internalType\":\"struct DataLayrChallengeUtils.DataStoreKZGMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"i\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numSys\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numPar\",\"type\":\"uint32\"}],\"name\":\"getLeadingCosetIndexFromHighestRootOfUnity\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\"}],\"name\":\"getNumSysFromHeader\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"degree\",\"type\":\"uint256\"}],\"name\":\"getZeroPolyMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"poly\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"linearPolynomialEvaluation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"nextPowerOf2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"chunkNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"poly\",\"type\":\"bytes\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"interpolationPoly\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"revealProof\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"X\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"Y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct BN254.G2Point\",\"name\":\"zeroPoly\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"zeroPolyProof\",\"type\":\"bytes\"}],\"internalType\":\"struct DataLayrChallengeUtils.MultiRevealProof\",\"name\":\"multiRevealProof\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"X\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"Y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct BN254.G2Point\",\"name\":\"polyEquivalenceProof\",\"type\":\"tuple\"}],\"name\":\"nonInteractivePolynomialProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"c\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"X\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"Y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct BN254.G2Point\",\"name\":\"pi\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"name\":\"openPolynomialAtPoint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"value\",\"type\":\"uint32\"}],\"name\":\"reverseBits\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"length\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"value\",\"type\":\"uint32\"}],\"name\":\"reverseBitsLimited\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"c\",\"type\":\"tuple\"},{\"internalType\":\"uint48\",\"name\":\"degree\",\"type\":\"uint48\"},{\"internalType\":\"uint32\",\"name\":\"numSys\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numPar\",\"type\":\"uint32\"}],\"internalType\":\"struct DataLayrChallengeUtils.DataStoreKZGMetadata\",\"name\":\"dskzgMetadata\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"chunkNumber\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"interpolationPoly\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"revealProof\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"X\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"Y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct BN254.G2Point\",\"name\":\"zeroPoly\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"zeroPolyProof\",\"type\":\"bytes\"}],\"name\":\"validateDisclosureResponse\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"polys\",\"type\":\"bytes[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point[]\",\"name\":\"interpolationPolys\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"X\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"Y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct BN254.G2Point\",\"name\":\"polyEquivalenceProof\",\"type\":\"tuple\"}],\"name\":\"verifyBatchPolyEquivalenceProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"poly\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"interpolationPoly\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"X\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"Y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct BN254.G2Point\",\"name\":\"polyEquivalenceProof\",\"type\":\"tuple\"}],\"name\":\"verifyPolyEquivalenceProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DataLayrChallengeUtils","CompilerVersion":"v0.8.12+commit.f00d7308","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}