{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.3.7\r\n\r\n\"\"\"\r\n@title Voting Adapter\r\n@author Lido Finance\r\n@license GPL-3.0\r\n@notice Used to allow voting with tokens under vesting\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\n\r\ninterface IDelegation:\r\n    def setDelegate(\r\n        _id: bytes32,\r\n        _delegate: address,\r\n    ): nonpayable\r\n\r\n\r\ninterface IVoting:\r\n    def vote(\r\n        _voteId: uint256,\r\n        _supports: bool,\r\n        _executesIfDecided_deprecated: bool,\r\n    ): nonpayable\r\n\r\ninterface IVotingDelegation:\r\n    def setDelegate(\r\n        _delegate: address,\r\n    ): nonpayable\r\n    def resetDelegate(): nonpayable\r\n\r\n\r\nevent ERC20Recovered:\r\n    token: address\r\n    amount: uint256\r\n\r\n\r\nevent ETHRecovered:\r\n    amount: uint256\r\n\r\n\r\nevent OwnerChanged:\r\n    owner: address\r\n\r\n\r\nVOTING_CONTRACT_ADDR: immutable(address)\r\nSNAPSHOT_DELEGATE_CONTRACT_ADDR: immutable(address)\r\nDELEGATION_CONTRACT_ADDR: immutable(address)\r\n\r\nowner: public(address)\r\n\r\n\r\n@external\r\ndef __init__(\r\n    voting_addr: address,\r\n    snapshot_delegate_addr: address,\r\n    delegation_addr: address,\r\n    owner: address,\r\n):\r\n    \"\"\"\r\n    @notice Initialize source contract implementation.\r\n    @param voting_addr Address of the Voting contract\r\n    @param snapshot_delegate_addr Address of the Shapshot Delegate contract\r\n    @param delegation_addr Address of the voting power delegation contract\r\n    @param owner Address to recover tokens and ether to\r\n    \"\"\"\r\n    assert owner != empty(address), \"zero owner\"\r\n    assert voting_addr != empty(address), \"zero voting_addr\"\r\n    assert snapshot_delegate_addr != empty(\r\n        address\r\n    ), \"zero snapshot_delegate_addr\"\r\n    assert delegation_addr != empty(address), \"zero delegation_addr\"\r\n    self.owner = owner\r\n    VOTING_CONTRACT_ADDR = voting_addr\r\n    SNAPSHOT_DELEGATE_CONTRACT_ADDR = snapshot_delegate_addr\r\n    DELEGATION_CONTRACT_ADDR = delegation_addr\r\n\r\n\r\n@external\r\n@view\r\ndef encode_aragon_vote_calldata(voteId: uint256, supports: bool) -> Bytes[1000]:\r\n    \"\"\"\r\n    @notice Encode calldata for use in VestingEscrow. Returns type is Bytes[1000] to be compatible with up to 30 args\r\n    @param voteId Id of the vote\r\n    @param supports Support flag true - yea, false - nay\r\n    \"\"\"\r\n    return _abi_encode(voteId, supports)\r\n\r\n\r\n@external\r\ndef aragon_vote(abi_encoded_params: Bytes[1000]):\r\n    \"\"\"\r\n    @notice Cast vote on Aragon voting\r\n    @param abi_encoded_params Abi encoded data for call. Can be obtained from encode_aragon_vote_calldata\r\n    \"\"\"\r\n    vote_id: uint256 = empty(uint256)\r\n    supports: bool = empty(bool)\r\n    vote_id, supports = _abi_decode(abi_encoded_params, (uint256, bool))\r\n    IVoting(VOTING_CONTRACT_ADDR).vote(\r\n        vote_id, supports, False\r\n    )  # dev: third arg is deprecated\r\n\r\n\r\n@external\r\n@view\r\ndef encode_snapshot_set_delegate_calldata(delegate: address) -> Bytes[1000]:\r\n    \"\"\"\r\n    @notice Encode calldata for use in VestingEscrow. Returns type is Bytes[1000] to be compatible with up to 30 args\r\n    @param delegate Address of the delegate\r\n    \"\"\"\r\n    return _abi_encode(delegate)\r\n\r\n\r\n@external\r\ndef snapshot_set_delegate(abi_encoded_params: Bytes[1000]):\r\n    \"\"\"\r\n    @notice Delegate Snapshot voting power of all available tokens\r\n    @param abi_encoded_params Abi encoded data for call. Can be obtained from encode_snapshot_set_delegate_calldata\r\n    \"\"\"\r\n    delegate: address = empty(address)\r\n    delegate = _abi_decode(abi_encoded_params, (address))\r\n    IDelegation(SNAPSHOT_DELEGATE_CONTRACT_ADDR).setDelegate(\r\n        empty(bytes32), delegate\r\n    )  # dev: null id allows voting at any snapshot space\r\n\r\n\r\n@external\r\n@view\r\ndef encode_delegate_calldata(delegate: address) -> Bytes[1000]:\r\n    \"\"\"\r\n    @notice Encode calldata for use in VestingEscrow. Returns type is Bytes[1000] to be compatible with up to 30 args\r\n    @param delegate Address of the delegate\r\n    \"\"\"\r\n    return _abi_encode(delegate)\r\n\r\n\r\n@external\r\ndef delegate(abi_encoded_params: Bytes[1000]):\r\n    \"\"\"\r\n    @notice Delegate voting power of all available tokens\r\n    @param abi_encoded_params Abi encoded data for call. Can be obtained from encode_delegate_calldata\r\n    \"\"\"\r\n    delegate: address = empty(address)\r\n    delegate = _abi_decode(abi_encoded_params, (address))\r\n    if delegate == ZERO_ADDRESS:\r\n        IVotingDelegation(DELEGATION_CONTRACT_ADDR).resetDelegate()\r\n    else:\r\n        IVotingDelegation(DELEGATION_CONTRACT_ADDR).setDelegate(delegate)\r\n\r\n\r\n@external\r\n@view\r\ndef voting_contract_addr() -> address:\r\n    return VOTING_CONTRACT_ADDR\r\n\r\n\r\n@external\r\n@view\r\ndef snapshot_delegate_contract_addr() -> address:\r\n    return SNAPSHOT_DELEGATE_CONTRACT_ADDR\r\n\r\n\r\n@external\r\n@view\r\ndef delegation_contract_addr() -> address:\r\n    return DELEGATION_CONTRACT_ADDR\r\n\r\n\r\n@external\r\ndef change_owner(owner: address):\r\n    \"\"\"\r\n    @notice Change contract owner.\r\n    @param owner Address of the new owner. Must be non-zero.\r\n    \"\"\"\r\n    self._check_sender_is_owner()\r\n    assert owner != empty(address), \"zero owner address\"\r\n\r\n    self.owner = owner\r\n    log OwnerChanged(owner)\r\n\r\n\r\n@external\r\ndef recover_erc20(token: address, amount: uint256):\r\n    \"\"\"\r\n    @notice Recover ERC20 tokens to owner\r\n    @param token Address of the ERC20 token to be recovered\r\n    \"\"\"\r\n    if amount != 0:\r\n        assert ERC20(token).transfer(\r\n            self.owner, amount, default_return_value=True\r\n        ), \"transfer failed\"\r\n        log ERC20Recovered(token, amount)\r\n\r\n\r\n@external\r\ndef recover_ether():\r\n    \"\"\"\r\n    @notice Recover Ether to owner\r\n    \"\"\"\r\n    amount: uint256 = self.balance\r\n    if amount != 0:\r\n        self._safe_send_ether(self.owner, amount)\r\n        log ETHRecovered(amount)\r\n\r\n\r\n@internal\r\ndef _check_sender_is_owner():\r\n    assert msg.sender == self.owner, \"msg.sender not owner\"\r\n\r\n\r\n@internal\r\ndef _safe_send_ether(_to: address, _value: uint256):\r\n    \"\"\"\r\n    @notice Overcome 2300 gas limit on simple send\r\n    \"\"\"\r\n    _response: Bytes[32] = raw_call(\r\n        _to, empty(bytes32), value=_value, max_outsize=32\r\n    )\r\n    if len(_response) > 0:\r\n        assert convert(_response, bool), \"ETH transfer failed\"","ABI":"[{\"name\":\"ERC20Recovered\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"indexed\":false},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ETHRecovered\",\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"OwnerChanged\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"voting_addr\",\"type\":\"address\"},{\"name\":\"snapshot_delegate_addr\",\"type\":\"address\"},{\"name\":\"delegation_addr\",\"type\":\"address\"},{\"name\":\"owner\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"encode_aragon_vote_calldata\",\"inputs\":[{\"name\":\"voteId\",\"type\":\"uint256\"},{\"name\":\"supports\",\"type\":\"bool\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"aragon_vote\",\"inputs\":[{\"name\":\"abi_encoded_params\",\"type\":\"bytes\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"encode_snapshot_set_delegate_calldata\",\"inputs\":[{\"name\":\"delegate\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"snapshot_set_delegate\",\"inputs\":[{\"name\":\"abi_encoded_params\",\"type\":\"bytes\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"encode_delegate_calldata\",\"inputs\":[{\"name\":\"delegate\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"delegate\",\"inputs\":[{\"name\":\"abi_encoded_params\",\"type\":\"bytes\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"voting_contract_addr\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"snapshot_delegate_contract_addr\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"delegation_contract_addr\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"change_owner\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"recover_erc20\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"recover_ether\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]}]","ContractName":"Voting Adapter","CompilerVersion":"vyper:0.3.7","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"0000000000000000000000002e59a20f205bb85a89c53f1936454680651e618e000000000000000000000000469788fe6e9e9681c6ebf3bf78e7fd26fc0154460000000000000000000000002e59a20f205bb85a89c53f1936454680651e618e0000000000000000000000003e40d73eb977dc6a537af587d48316fee66e9c8c","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":""}]}