{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n\r\n\"What happens today will effect your tomorrow.\"\r\n\r\nhttps://butterflyeffect-erc.vip/\r\nhttps://t.me/ButterflyEffectCoin\r\nhttps://twitter.com/Effect_ERC\r\n\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {return a + b;}\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {return a - b;}\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {return a * b;}\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {return a / b;}\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {return a % b;}\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked{require(b <= a, errorMessage); return a - b;}}\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked{require(b > 0, errorMessage); return a / b;}}\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked{require(b > 0, errorMessage); return a % b;}}}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function circulatingSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);}\r\n\r\nabstract contract Ownable {\r\n    address internal owner;\r\n    constructor(address _owner) {owner = _owner;}\r\n    modifier onlyOwner() {require(isOwner(msg.sender), \"!OWNER\"); _;}\r\n    function isOwner(address account) public view returns (bool) {return account == owner;}\r\n    function transferOwnership(address payable adr) public onlyOwner {owner = adr; emit OwnershipTransferred(adr);}\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface stakeIntegration {\r\n    function stakingWithdraw(address depositor, uint256 _amount) external;\r\n    function stakingDeposit(address depositor, uint256 _amount) external;\r\n    function stakingClaimToCompound(address sender, address recipient) external;\r\n    function internalClaimRewards(address sender) external;\r\n}\r\n\r\ninterface tokenStaking {\r\n    function deposit(uint256 amount) external;\r\n    function withdraw(uint256 amount) external;\r\n    function compound() external;\r\n}\r\n\r\ninterface IFactory{\r\n        function createPair(address tokenA, address tokenB) external returns (address pair);\r\n        function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline) external;\r\n}\r\n\r\ncontract ButterflyEffect is IERC20, tokenStaking, Ownable {\r\n    using SafeMath for uint256;\r\n    string private constant _name = 'Butterfly Effect';\r\n    string private constant _symbol = 'EFFECT';\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private _totalSupply = 1000000 * (10 ** _decimals);\r\n    uint256 public _maxTxAmount = ( _totalSupply * 100 ) / 10000;\r\n    uint256 public _maxWalletToken = ( _totalSupply * 100 ) / 10000;\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) public isFeeExempt;\r\n    mapping (address => bool) public isDividendExempt;\r\n    IRouter router;\r\n    address public pair;\r\n    bool private swapEnabled = true;\r\n    bool private tradingAllowed = false;\r\n    bool public reflectionsEnabled = true;\r\n    uint256 private liquidityFee = 0;\r\n    uint256 private marketingFee = 900;\r\n    uint256 private reflectionFee = 100;\r\n    uint256 private developmentFee = 1000;\r\n    uint256 private burnFee = 0;\r\n    uint256 private tokenFee = 0;\r\n    uint256 private totalFee = 2000;\r\n    uint256 private sellFee = 4000;\r\n    uint256 private transferFee = 4000;\r\n    uint256 private denominator = 10000;\r\n    uint256 private swapTimes;\r\n    bool private swapping;\r\n    bool private feeless;\r\n    uint256 private swapAmount = 1;\r\n    uint256 private swapThreshold = ( _totalSupply * 1000 ) / 100000;\r\n    uint256 private minTokenAmount = ( _totalSupply * 10 ) / 100000;\r\n    modifier feelessTransaction {feeless = true; _; feeless = false;}\r\n    modifier lockTheSwap {swapping = true; _; swapping = false;}\r\n    mapping(address => uint256) public amountStaked;\r\n    uint256 public totalStaked;\r\n    uint256 private staking = 0;\r\n    stakeIntegration internal stakingContract;\r\n    address internal token_receiver;\r\n    uint256 public totalShares;\r\n    uint256 public totalDividends;\r\n    uint256 public totalDistributed;\r\n    uint256 public currentDividends;\r\n    uint256 public dividendsBeingDistributed;\r\n    uint256 internal dividendsPerShare;\r\n    uint256 internal dividendsPerShareAccuracyFactor = 10 ** 36;\r\n    address[] shareholders; mapping (address => Share) public shares; \r\n    mapping (address => uint256) shareholderIndexes;\r\n    mapping (address => uint256) shareholderClaims;\r\n    struct Share {uint256 amount; uint256 totalExcluded; uint256 totalRealised; }\r\n    uint256 public excessDividends;\r\n    uint256 public eventFeesCollected;\r\n    uint256 public reflectionEvent;\r\n    bool public distributingReflections;\r\n    uint256 internal disbursements;\r\n    bool internal releaseDistributing;\r\n    mapping (address => uint256) public buyMultiplier;\r\n    uint256 internal currentIndex;\r\n    uint256 public gasAmount = 500000;\r\n    uint256 public distributionInterval = 12 hours;\r\n    uint256 public distributionTime;\r\n    uint256 private minBuyAmount = ( _totalSupply * 10 ) / 100000;\r\n    uint256 private maxDropAmount = ( _totalSupply * 500 ) / 10000;\r\n    address internal constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address internal utility_receiver = 0x6F623E84da9880138DF9362cB596e13291C3C4ae;\r\n    address internal staking_receiver = 0x6F623E84da9880138DF9362cB596e13291C3C4ae; \r\n    address internal marketing_receiver = 0x3f20cB334FFd23D0Ec8eeFaFAe485728774Ea1b0;\r\n    address internal liquidity_receiver = 0x6F623E84da9880138DF9362cB596e13291C3C4ae;\r\n    mapping (uint256 => mapping (address => uint256)) internal userEventData;\r\n    struct eventData {\r\n        uint256 reflectionAmount;\r\n        uint256 reflectionsDisbursed;\r\n        uint256 eventTimestamp;\r\n        uint256 totalFees;\r\n        uint256 totalExcess;}\r\n    mapping(uint256 => eventData) public eventStats;\r\n\r\n    constructor() Ownable(msg.sender) {\r\n        IRouter _router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        address _pair = IFactory(_router.factory()).createPair(address(this), _router.WETH());\r\n        router = _router;\r\n        pair = _pair;\r\n        token_receiver = msg.sender;\r\n        isFeeExempt[address(this)] = true;\r\n        isFeeExempt[liquidity_receiver] = true;\r\n        isFeeExempt[marketing_receiver] = true;\r\n        isFeeExempt[token_receiver] = true;\r\n        isFeeExempt[msg.sender] = true;\r\n        isFeeExempt[address(stakingContract)] = true;\r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[address(pair)] = true;\r\n        isDividendExempt[address(DEAD)] = true;\r\n        isDividendExempt[address(0)] = true;\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n    function name() public pure returns (string memory) {return _name;}\r\n    function symbol() public pure returns (string memory) {return _symbol;}\r\n    function decimals() public pure returns (uint8) {return _decimals;}\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function totalSupply() public view override returns (uint256) {return _totalSupply;}\r\n    function balanceOf(address account) public view override returns (uint256) {return _balances[account];}\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {_transfer(msg.sender, recipient, amount);return true;}\r\n    function allowance(address owner, address spender) public view override returns (uint256) {return _allowances[owner][spender];}\r\n    function approve(address spender, uint256 amount) public override returns (bool) {_approve(msg.sender, spender, amount);return true;}\r\n    function availableBalance(address wallet) public view returns (uint256) {return _balances[wallet].sub(amountStaked[wallet]);}\r\n    function circulatingSupply() public view override returns (uint256) {return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(address(0)));}\r\n\r\n    function preTxCheck(address sender, address recipient, uint256 amount) internal view {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount <= balanceOf(sender),\"You are trying to transfer more than your balance\");\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        preTxCheck(sender, recipient, amount);\r\n        checkTradingAllowed(sender, recipient);\r\n        checkMaxWallet(sender, recipient, amount); \r\n        checkTxLimit(sender, recipient, amount);\r\n        transactionCounters(sender, recipient);\r\n        setBuyMultiplier(sender, recipient, amount);\r\n        swapBack(sender, recipient, amount);\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        uint256 amountReceived = shouldTakeFee(sender, recipient) ? takeFee(sender, recipient, amount) : amount;\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        processRewards(sender, recipient);\r\n    }\r\n\r\n    function setStructure(uint256 _liquidity, uint256 _marketing, uint256 _reflections, uint256 _burn, \r\n        uint256 _token, uint256 _staking, uint256 _development, uint256 _total, uint256 _sell, uint256 _trans) external onlyOwner {\r\n        liquidityFee = _liquidity; marketingFee = _marketing; reflectionFee = _reflections; staking = _staking; developmentFee = _development;\r\n        burnFee = _burn; totalFee = _total; sellFee = _sell; transferFee = _trans; tokenFee = _token;\r\n        require(totalFee <= denominator && sellFee <= denominator && burnFee <= denominator && tokenFee <= denominator \r\n            && transferFee <= denominator, \"totalFee and sellFee cannot be more than 20%\");\r\n    }\r\n\r\n    function setParameters(uint256 _buy, uint256 _wallet) external onlyOwner {\r\n        uint256 newTx = totalSupply().mul(_buy).div(uint256(10000));\r\n        uint256 newWallet = totalSupply().mul(_wallet).div(uint256(10000)); uint256 limit = totalSupply().mul(5).div(1000);\r\n        require(newTx >= limit && newWallet >= limit, \"ERC20: max TXs and max Wallet cannot be less than .5%\");\r\n        _maxTxAmount = newTx; _maxWalletToken = newWallet;\r\n    }\r\n\r\n    function internalDeposit(address sender, uint256 amount) internal {\r\n        require(amount <= _balances[sender].sub(amountStaked[sender]), \"ERC20: Cannot stake more than available balance\");\r\n        stakingContract.stakingDeposit(sender, amount);\r\n        amountStaked[sender] = amountStaked[sender].add(amount);\r\n        totalStaked = totalStaked.add(amount);\r\n    }\r\n\r\n    function deposit(uint256 amount) override external {\r\n        internalDeposit(msg.sender, amount);\r\n    }\r\n\r\n    function withdraw(uint256 amount) override external {\r\n        require(amount <= amountStaked[msg.sender], \"ERC20: Cannot unstake more than amount staked\");\r\n        stakingContract.stakingWithdraw(msg.sender, amount);\r\n        amountStaked[msg.sender] = amountStaked[msg.sender].sub(amount);\r\n        totalStaked = totalStaked.sub(amount);\r\n    }\r\n\r\n    function compound() override external feelessTransaction {\r\n        uint256 initialToken = balanceOf(msg.sender);\r\n        stakingContract.stakingClaimToCompound(msg.sender, msg.sender);\r\n        uint256 afterToken = balanceOf(msg.sender).sub(initialToken);\r\n        internalDeposit(msg.sender, afterToken);\r\n    }\r\n\r\n    function setStakingAddress(address _staking) external onlyOwner {\r\n        stakingContract = stakeIntegration(_staking); isFeeExempt[_staking] = true;\r\n    }\r\n\r\n    function checkTradingAllowed(address sender, address recipient) internal view {\r\n        if(!isFeeExempt[sender] && !isFeeExempt[recipient]){require(tradingAllowed, \"tradingAllowed\");}\r\n    }\r\n    \r\n    function checkMaxWallet(address sender, address recipient, uint256 amount) internal view {\r\n        if(!isFeeExempt[sender] && !isFeeExempt[recipient] && recipient != address(pair) && recipient != address(DEAD)){\r\n            require((_balances[recipient].add(amount)) <= _maxWalletToken, \"Exceeds maximum wallet amount.\");}\r\n    }\r\n\r\n    function transactionCounters(address sender, address recipient) internal {\r\n        if(recipient == pair && !isFeeExempt[sender] && !swapping){swapTimes += uint256(1);}\r\n    }\r\n\r\n    function setBuyMultiplier(address sender, address recipient, uint256 amount) internal {\r\n        if(sender == pair && amount >= minBuyAmount){buyMultiplier[recipient] = buyMultiplier[recipient].add(uint256(1));}\r\n        if(sender == pair && amount < minBuyAmount){buyMultiplier[recipient] = uint256(1);}\r\n        if(recipient == pair){buyMultiplier[sender] = uint256(0);}\r\n    }\r\n\r\n    function checkTxLimit(address sender, address recipient, uint256 amount) internal view {\r\n        if(amountStaked[sender] > uint256(0)){require((amount.add(amountStaked[sender])) <= balanceOf(sender), \"ERC20: Exceeds maximum allowed not currently staked.\");}\r\n        require(amount <= _maxTxAmount || isFeeExempt[sender] || isFeeExempt[recipient], \"TX Limit Exceeded\");\r\n    }\r\n\r\n    function startTrading() external onlyOwner {\r\n        tradingAllowed = true;\r\n        distributionTime = block.timestamp;\r\n    }\r\n\r\n    function setSwapbackSettings(uint256 _swapAmount, uint256 _swapThreshold, uint256 _minTokenAmount) external onlyOwner {\r\n        swapAmount = _swapAmount; swapThreshold = totalSupply().mul(_swapThreshold).div(uint256(100000)); minTokenAmount = totalSupply().mul(_minTokenAmount).div(uint256(100000));\r\n    }\r\n\r\n    function setUserMultiplier(address user, uint256 multiplier) external onlyOwner {\r\n        buyMultiplier[user] = multiplier;\r\n    }\r\n\r\n    function setInternalAddresses(address _marketing, address _liquidity, address _utility, address _token, address _staking) external onlyOwner {\r\n        marketing_receiver = _marketing; liquidity_receiver = _liquidity; utility_receiver = _utility; token_receiver = _token; staking_receiver = _staking;\r\n        isFeeExempt[_marketing] = true; isFeeExempt[_liquidity] = true; isFeeExempt[_utility] = true; isFeeExempt[_token] = true; isFeeExempt[_staking] = true;\r\n    }\r\n\r\n    function setisExempt(address _address, bool _enabled) external onlyOwner {\r\n        isFeeExempt[_address] = _enabled;\r\n    }\r\n\r\n    function setDividendInfo(uint256 excess, uint256 current, uint256 distributing) external onlyOwner {\r\n        excessDividends = excess; currentDividends = current; dividendsBeingDistributed = distributing;\r\n    }\r\n\r\n    function setMinBuyAmount(uint256 amount) external onlyOwner {\r\n        minBuyAmount = _totalSupply.mul(amount).div(100000);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tokens) private lockTheSwap {\r\n        uint256 _denominator = totalFee.add(1).mul(2);\r\n        if(totalFee == uint256(0)){_denominator = liquidityFee.add(\r\n            marketingFee).add(staking).add(developmentFee).add(1).mul(2);}\r\n        uint256 tokensToAddLiquidityWith = tokens.mul(liquidityFee).div(_denominator);\r\n        uint256 toSwap = tokens.sub(tokensToAddLiquidityWith);\r\n        uint256 initialBalance = address(this).balance;\r\n        swapTokensForETH(toSwap);\r\n        uint256 deltaBalance = address(this).balance.sub(initialBalance);\r\n        uint256 unitBalance= deltaBalance.div(_denominator.sub(liquidityFee));\r\n        uint256 ETHToAddLiquidityWith = unitBalance.mul(liquidityFee);\r\n        if(ETHToAddLiquidityWith > uint256(0)){addLiquidity(\r\n            tokensToAddLiquidityWith, ETHToAddLiquidityWith, liquidity_receiver); }\r\n        uint256 stakingAmount = unitBalance.mul(2).mul(staking);\r\n        if(stakingAmount > 0){payable(staking_receiver).transfer(stakingAmount);}\r\n        uint256 marketingAmount = unitBalance.mul(2).mul(marketingFee);\r\n        if(marketingAmount > 0){payable(marketing_receiver).transfer(marketingAmount);}\r\n        uint256 excessAmount = address(this).balance;\r\n        if(excessAmount > uint256(0)){payable(utility_receiver).transfer(excessAmount);}\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ETHAmount, address receiver) private {\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.addLiquidityETH{value: ETHAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            address(receiver),\r\n            block.timestamp);\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp);\r\n    }\r\n\r\n    function shouldSwapBack(address sender, address recipient, uint256 amount) internal view returns (bool) {\r\n        bool aboveMin = amount >= minTokenAmount;\r\n        bool aboveThreshold = viewAvailableBalance() >= swapThreshold;\r\n        return !swapping && swapEnabled && tradingAllowed && aboveMin && !isFeeExempt[sender] \r\n            && recipient == pair && swapTimes >= swapAmount && aboveThreshold;\r\n    }\r\n\r\n    function swapBack(address sender, address recipient, uint256 amount) internal {\r\n        if(shouldSwapBack(sender, recipient, amount)){swapAndLiquify(swapThreshold); swapTimes = uint256(0);}\r\n    }\r\n\r\n    function shouldTakeFee(address sender, address recipient) internal view returns (bool) {\r\n        return !isFeeExempt[sender] && !isFeeExempt[recipient];\r\n    }\r\n\r\n    function getTotalFee(address sender, address recipient) internal view returns (uint256) {\r\n        if(recipient == pair && sellFee > uint256(0)){return sellFee;}\r\n        if(sender == pair && totalFee > uint256(0)){return totalFee;}\r\n        return transferFee;\r\n    }\r\n\r\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        if(getTotalFee(sender, recipient) > 0 && !swapping){\r\n        uint256 feeAmount = amount.div(denominator).mul(getTotalFee(sender, recipient));\r\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n        emit Transfer(sender, address(this), feeAmount);\r\n        if(reflectionFee > uint256(0) && reflectionFee <= getTotalFee(sender, recipient)){\r\n            currentDividends = currentDividends.add((amount.div(denominator).mul(reflectionFee)));\r\n            eventFeesCollected = eventFeesCollected.add((amount.div(denominator).mul(reflectionFee)));}\r\n        if(burnFee > uint256(0) && burnFee <= getTotalFee(sender, recipient)){\r\n            _transfer(address(this), address(DEAD), amount.div(denominator).mul(burnFee));}\r\n        if(tokenFee > uint256(0) && tokenFee <= getTotalFee(sender, recipient)){\r\n            _transfer(address(this), address(token_receiver), amount.div(denominator).mul(tokenFee));}\r\n        return amount.sub(feeAmount);} return amount;\r\n    }\r\n\r\n    function setisDividendExempt(address holder, bool exempt) external onlyOwner {\r\n        isDividendExempt[holder] = exempt;\r\n        if(exempt){setShare(holder, 0);}\r\n        if(buyMultiplier[holder] > 0){setShare(holder, balanceOf(holder).mul(buyMultiplier[holder]));}\r\n        else{setShare(holder, balanceOf(holder));}\r\n    }\r\n\r\n    function processRewards(address sender, address recipient) internal {\r\n        if(releaseDistributing){dividendsBeingDistributed = uint256(0);}\r\n        if(shares[recipient].amount > uint256(0)){distributeDividend(recipient);}\r\n        if(shares[sender].amount > uint256(0) && recipient != pair){distributeDividend(sender);}\r\n        if(recipient == pair && shares[sender].amount > uint256(0)){excessDividends = excessDividends.add(getUnpaidEarnings(sender));}\r\n        if(!isDividendExempt[sender]){setShare(sender, balanceOf(sender));}\r\n        if(!isDividendExempt[recipient]){setShare(recipient, balanceOf(recipient));}\r\n        if(!isDividendExempt[recipient] && sender == pair && buyMultiplier[recipient] >= uint256(1)){\r\n            setShare(recipient, balanceOf(recipient).mul(buyMultiplier[recipient]));}\r\n        if(distributionTime.add(distributionInterval) <= block.timestamp && tradingAllowed && \r\n            currentDividends > uint256(0) && !swapping && reflectionsEnabled){\r\n            createReflectionEvent();}\r\n        processReflections(gasAmount);\r\n        if(shares[recipient].amount > uint256(0)){distributeDividend(recipient);}\r\n    }\r\n\r\n    function createReflectionEvent() internal {\r\n            distributingReflections = true;\r\n            eventStats[reflectionEvent].totalExcess = excessDividends;\r\n            excessDividends = uint256(0);\r\n            reflectionEvent = reflectionEvent.add(uint256(1));\r\n            eventStats[reflectionEvent].totalFees = eventFeesCollected;\r\n            eventStats[reflectionEvent].reflectionAmount = currentDividends;\r\n            eventStats[reflectionEvent].eventTimestamp = block.timestamp;\r\n            if(currentDividends > maxDropAmount){currentDividends = maxDropAmount;}\r\n            depositRewards(currentDividends);\r\n            currentDividends = uint256(0);\r\n            eventFeesCollected = uint256(0);\r\n            distributionTime = block.timestamp;\r\n            processReflections(gasAmount);\r\n    }\r\n\r\n    function manualReflectionEvent() external onlyOwner {\r\n        createReflectionEvent();\r\n    }\r\n\r\n    function rescueERC20(address _address) external onlyOwner {\r\n        uint256 _amount = IERC20(_address).balanceOf(address(this));\r\n        IERC20(_address).transfer(utility_receiver, _amount);\r\n    }\r\n\r\n    function setMaxDropAmount(uint256 amount) external onlyOwner {\r\n        maxDropAmount = _totalSupply.mul(amount).div(100000);\r\n    }\r\n\r\n    function setDistributionInterval(uint256 interval) external onlyOwner {\r\n        distributionInterval = interval;\r\n    }\r\n\r\n    function setReleaseDistributing(bool enable) external onlyOwner {\r\n        releaseDistributing = enable;\r\n    }\r\n\r\n    function enableReflections(bool enable) external onlyOwner {\r\n        reflectionsEnabled = enable;\r\n    }\r\n\r\n    function setGasAmount(uint256 gas) external onlyOwner {\r\n        gasAmount = gas;\r\n    }\r\n\r\n    function closeReflectionEvent() external onlyOwner {\r\n        dividendsBeingDistributed = uint256(0);\r\n    }\r\n\r\n    function setShare(address shareholder, uint256 amount) internal {\r\n        if(amount > 0 && shares[shareholder].amount == 0){addShareholder(shareholder);}\r\n        else if(amount == 0 && shares[shareholder].amount > 0){removeShareholder(shareholder); }\r\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n    }\r\n\r\n    function depositRewards(uint256 amount) internal {\r\n        totalDividends = totalDividends.add(amount);\r\n        dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares));\r\n        dividendsBeingDistributed = amount;\r\n    }\r\n\r\n    function rescueETH(uint256 _amount) external {\r\n        payable(utility_receiver).transfer(_amount);\r\n    }\r\n\r\n    function setTokenAddress(address _address) external onlyOwner {\r\n        token_receiver = _address;\r\n    }\r\n\r\n    function totalReflectionsDistributed(address _wallet) external view returns (uint256) {\r\n        address shareholder = _wallet;\r\n        return uint256(shares[shareholder].totalRealised);\r\n    }\r\n\r\n    function claimReflections() external {\r\n        distributeDividend(msg.sender);\r\n    }\r\n\r\n    function viewRemainingBeingDisbursed() external view returns (uint256 distributing, uint256 distributed) {\r\n        return(dividendsBeingDistributed, eventStats[reflectionEvent].reflectionsDisbursed);\r\n    }\r\n\r\n    function viewDisbursementShareholders() external view returns (uint256 disbursementsAmt, uint256 shareholdersAmt) {\r\n        return(disbursements, shareholders.length);\r\n    }\r\n\r\n    function manualProcessReflections(uint256 gas) external onlyOwner {\r\n        processReflections(gas);\r\n    }\r\n\r\n    function processReflections(uint256 gas) internal {\r\n        uint256 currentAmount = totalDistributed;\r\n        uint256 shareholderCount = shareholders.length;\r\n        if(shareholderCount == uint256(0)) { return; }\r\n        uint256 gasUsed = uint256(0);\r\n        uint256 gasLeft = gasleft();\r\n        uint256 iterations = uint256(0);\r\n        while(gasUsed < gas && iterations < shareholderCount) {\r\n            if(currentIndex >= shareholderCount){\r\n                currentIndex = uint256(0);}\r\n                distributeDividend(shareholders[currentIndex]);\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n            disbursements++;}\r\n        if(disbursements >= shareholderCount && totalDistributed > currentAmount){\r\n            distributingReflections = false;\r\n            dividendsBeingDistributed = uint256(0);\r\n            disbursements = uint256(0);}\r\n    }\r\n\r\n    function distributeDividend(address shareholder) internal {\r\n        uint256 amount = getUnpaidEarnings(shareholder);\r\n        if(shares[shareholder].amount == 0 || amount > balanceOf(address(this))){ return; }\r\n        if(amount > uint256(0)){\r\n            totalDistributed = totalDistributed.add(amount);\r\n            eventStats[reflectionEvent].reflectionsDisbursed = eventStats[reflectionEvent].reflectionsDisbursed.add(amount);\r\n            _basicTransfer(address(this), shareholder, amount);\r\n            userEventData[reflectionEvent][shareholder] = amount;\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount);\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n            buyMultiplier[shareholder] = uint256(0);\r\n            setShare(shareholder, balanceOf(shareholder));}\r\n    }\r\n\r\n    function getUnpaidEarnings(address shareholder) public view returns (uint256) {\r\n        if(shares[shareholder].amount == 0){ return 0; }\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n        if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }\r\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\r\n    }\r\n\r\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\r\n        return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n\r\n    function balanceInformation() external view returns (uint256 balance, uint256 available, uint256 current, uint256 distributing, uint256 excess) {\r\n        return(balanceOf(address(this)), balanceOf(address(this)).sub(currentDividends).sub(dividendsBeingDistributed), currentDividends, dividendsBeingDistributed, excessDividends);\r\n    }\r\n\r\n    function viewAvailableBalance() public view returns (uint256 contractBalance) {\r\n        return balanceOf(address(this)).sub(currentDividends).sub(dividendsBeingDistributed);\r\n    }\r\n\r\n    function viewLastFiveReflectionEvents() external view returns (uint256, uint256, uint256, uint256, uint256) {\r\n        return(eventStats[reflectionEvent].reflectionAmount, eventStats[reflectionEvent.sub(1)].reflectionAmount, eventStats[reflectionEvent.sub(2)].reflectionAmount,\r\n            eventStats[reflectionEvent.sub(3)].reflectionAmount, eventStats[reflectionEvent.sub(4)].reflectionAmount);\r\n    }\r\n\r\n    function viewUserReflectionStats(uint256 eventNumber, address wallet) external view returns (uint256) {\r\n        return userEventData[eventNumber][wallet];\r\n    }\r\n\r\n    function viewMyReflectionStats(uint256 eventNumber) external view returns (uint256) {\r\n        return userEventData[eventNumber][msg.sender];\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"availableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceInformation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReflections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeReflectionEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributingReflections\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendsBeingDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"enableReflections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventFeesCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eventStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reflectionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reflectionsDisbursed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eventTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalExcess\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excessDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"getUnpaidEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"manualProcessReflections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualReflectionEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"name\":\"setDistributionInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributing\",\"type\":\"uint256\"}],\"name\":\"setDividendInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setGasAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_utility\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"}],\"name\":\"setInternalAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxDropAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinBuyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wallet\",\"type\":\"uint256\"}],\"name\":\"setParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setReleaseDistributing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"}],\"name\":\"setStakingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reflections\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_staking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_development\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_trans\",\"type\":\"uint256\"}],\"name\":\"setStructure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTokenAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapbackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"setUserMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setisDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setisExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalExcluded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRealised\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"totalReflectionsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewAvailableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewDisbursementShareholders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"disbursementsAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareholdersAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewLastFiveReflectionEvents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventNumber\",\"type\":\"uint256\"}],\"name\":\"viewMyReflectionStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewRemainingBeingDisbursed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"distributing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"viewUserReflectionStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ButterflyEffect","CompilerVersion":"v0.8.19+commit.7dd6d404","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2a502d07ee857a601fcd87eefb5e6acb014ed1e37b75aeaf99042f5342a1f1a1"}]}