{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.3.10\r\n\"\"\"\r\n@title yETH delegated staking contract\r\n@author 0xkorin, Yearn Finance\r\n@license Copyright (c) Yearn Finance, 2023 - all rights reserved\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\nfrom vyper.interfaces import ERC4626\r\nimplements: ERC20\r\nimplements: ERC4626\r\n\r\ninterface Measure:\r\n    def total_vote_weight() -> uint256: view\r\n    def vote_weight(_account: address) -> uint256: view\r\nimplements: Measure\r\n\r\nlast_supply: public(uint256)\r\nlast_balances: public(HashMap[address, uint256])\r\n\r\n# ERC20 state\r\ntotalSupply: public(uint256)\r\nbalanceOf: public(HashMap[address, uint256])\r\nallowance: public(HashMap[address, HashMap[address, uint256]])\r\n\r\nname: public(constant(String[28])) = \"Delegated Staked Yearn Ether\"\r\nsymbol: public(constant(String[9])) = \"d-st-yETH\"\r\ndecimals: public(constant(uint8)) = 18\r\n\r\n# ERC4626 state\r\nasset: public(immutable(address))\r\n\r\n# ERC20 events\r\nevent Transfer:\r\n    sender: indexed(address)\r\n    receiver: indexed(address)\r\n    value: uint256\r\n\r\nevent Approval:\r\n    owner: indexed(address)\r\n    spender: indexed(address)\r\n    value: uint256\r\n\r\n# ERC4626 events\r\nevent Deposit:\r\n    sender: indexed(address)\r\n    owner: indexed(address)\r\n    assets: uint256\r\n    shares: uint256\r\n\r\nevent Withdraw:\r\n    sender: indexed(address)\r\n    receiver: indexed(address)\r\n    owner: indexed(address)\r\n    assets: uint256\r\n    shares: uint256\r\n\r\nWEEK_LENGTH: constant(uint256) = 7 * 24 * 60 * 60\r\nWEEK_MASK: constant(uint256) = 2**16 - 1\r\nBAL_SHIFT: constant(int128) = -16\r\nBAL_MASK: constant(uint256) = 2**240 - 1\r\nINCREMENT: constant(bool) = True\r\nDECREMENT: constant(bool) = False\r\n\r\n@external\r\ndef __init__(_asset: address):\r\n    \"\"\"\r\n    @notice Constructor\r\n    @param _asset The underlying asset\r\n    \"\"\"\r\n    assert _asset != empty(address)\r\n    asset = _asset\r\n    log Transfer(empty(address), msg.sender, 0)\r\n\r\n@external\r\ndef transfer(_to: address, _value: uint256) -> bool:\r\n    \"\"\"\r\n    @notice Transfer to another account\r\n    @param _to Account to transfer to\r\n    @param _value Amount to transfer\r\n    @return True\r\n    \"\"\"\r\n    assert _to != empty(address) and _to != self\r\n    if _value > 0:\r\n        self._update_last(msg.sender)\r\n        self._update_last(_to)\r\n\r\n        self.balanceOf[msg.sender] -= _value        \r\n        self.balanceOf[_to] += _value\r\n    log Transfer(msg.sender, _to, _value)\r\n    return True\r\n\r\n@external\r\ndef transferFrom(_from: address, _to: address, _value: uint256) -> bool:\r\n    \"\"\"\r\n    @notice Transfer from one account to another account\r\n    @param _from Account to transfe from\r\n    @param _to Account to transfer to\r\n    @param _value Amount to transfer\r\n    @return True\r\n    \"\"\"\r\n    assert _to != empty(address) and _to != self\r\n    self.allowance[_from][msg.sender] -= _value\r\n    if _value > 0:\r\n        self._update_last(_from)\r\n        self._update_last(_to)\r\n\r\n        self.balanceOf[_from] -= _value\r\n        self.balanceOf[_to] += _value\r\n    log Transfer(_from, _to, _value)\r\n    return True\r\n\r\n@external\r\ndef approve(_spender: address, _value: uint256) -> bool:\r\n    \"\"\"\r\n    @notice Approve another account to spend. Beware that changing an allowance \r\n        with this method brings the risk that someone may use both the old and \r\n        the new allowance by unfortunate transaction ordering. \r\n        See https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    @param _spender Account that is allowed to spend\r\n    @param _value Amount that the spender is allowed to transfer\r\n    @return Flag indicating whether the approval was successful\r\n    \"\"\"\r\n    assert _spender != empty(address)\r\n    self.allowance[msg.sender][_spender] = _value\r\n    log Approval(msg.sender, _spender, _value)\r\n    return True\r\n\r\n@external\r\ndef increaseAllowance(_spender: address, _value: uint256) -> bool:\r\n    \"\"\"\r\n    @notice Increase the allowance of another account to spend. This method mitigates \r\n        the risk that someone may use both the old and the new allowance by unfortunate \r\n        transaction ordering.\r\n        See https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    @param _spender Account that is allowed to spend\r\n    @param _value The amount of tokens to increase the allowance by\r\n    @return True\r\n    \"\"\"\r\n    assert _spender != empty(address)\r\n    allowance: uint256 = self.allowance[msg.sender][_spender] + _value\r\n    self.allowance[msg.sender][_spender] = allowance\r\n    log Approval(msg.sender, _spender, allowance)\r\n    return True\r\n\r\n@external\r\ndef decreaseAllowance(_spender: address, _value: uint256) -> bool:\r\n    \"\"\"\r\n    @notice Decrease the allowance of another account to spend. This method mitigates \r\n        the risk that someone may use both the old and the new allowance by unfortunate \r\n        transaction ordering.\r\n        See https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    @param _spender Account that is allowed to spend\r\n    @param _value The amount of tokens to decrease the allowance by\r\n    @return True\r\n    \"\"\"\r\n    assert _spender != empty(address)\r\n    allowance: uint256 = self.allowance[msg.sender][_spender]\r\n    if _value > allowance:\r\n        allowance = 0\r\n    else:\r\n        allowance -= _value\r\n    self.allowance[msg.sender][_spender] = allowance\r\n    log Approval(msg.sender, _spender, allowance)\r\n    return True\r\n\r\n# ERC4626 functions\r\n@external\r\n@view\r\ndef totalAssets() -> uint256:\r\n    \"\"\"\r\n    @notice Get the total assets in the contract\r\n    @return Total assets in the contract\r\n    \"\"\"\r\n    return self.totalSupply\r\n\r\n@external\r\n@view\r\ndef convertToShares(_assets: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Convert amount of assets to amount of shares\r\n    @param _assets Amount of assets\r\n    @return Amount of shares\r\n    \"\"\"\r\n    return _assets\r\n\r\n@external\r\n@view\r\ndef convertToAssets(_shares: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Convert amount of shares to amount of assets\r\n    @param _shares Amount of shares\r\n    @return Amount of assets\r\n    \"\"\"\r\n    return _shares\r\n\r\n@external\r\n@view\r\ndef maxDeposit(_receiver: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get the maximum amount of assets an account is allowed to deposit\r\n    @param _receiver Account\r\n    @return Maximum amount the account is allowed to deposit\r\n    \"\"\"\r\n    return max_value(uint256)\r\n\r\n@external\r\n@view\r\ndef previewDeposit(_assets: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Simulate the effect of a deposit\r\n    @param _assets Amount of assets to deposit\r\n    @return Amount of shares that will be minted\r\n    \"\"\"\r\n    return _assets\r\n\r\n@external\r\ndef deposit(_assets: uint256, _receiver: address = msg.sender) -> uint256:\r\n    \"\"\"\r\n    @notice Deposit assets\r\n    @param _assets Amount of assets to deposit\r\n    @param _receiver Account that will receive the shares\r\n    @return Amount of shares minted\r\n    \"\"\"\r\n    self._deposit(_assets, _receiver)\r\n    return _assets\r\n\r\n@external\r\n@view\r\ndef maxMint(_receiver: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get the maximum amount of shares an account is allowed to mint\r\n    @param _receiver Account\r\n    @return Maximum amount the account is allowed to mint\r\n    \"\"\"\r\n    return max_value(uint256)\r\n\r\n@external\r\n@view\r\ndef previewMint(_shares: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Simulate the effect of a mint\r\n    @param _shares Amount of shares to mint\r\n    @return Amount of assets that will be taken\r\n    \"\"\"\r\n    return _shares\r\n\r\n@external\r\ndef mint(_shares: uint256, _receiver: address = msg.sender) -> uint256:\r\n    \"\"\"\r\n    @notice Mint shares\r\n    @param _shares Amount of shares to mint\r\n    @param _receiver Account that will receive the shares\r\n    @return Amount of assets taken\r\n    \"\"\"\r\n    self._deposit(_shares, _receiver)\r\n    return _shares\r\n\r\n@external\r\n@view\r\ndef maxWithdraw(_owner: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get the maximum amount of assets an account is allowed to withdraw\r\n    @param _owner Account\r\n    @return Maximum amount the account is allowed to withdraw\r\n    \"\"\"\r\n    return self.balanceOf[_owner]\r\n\r\n@external\r\n@view\r\ndef previewWithdraw(_assets: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Simulate the effect of a withdrawal\r\n    @param _assets Amount of assets to withdraw\r\n    @return Amount of shares that will be redeemed\r\n    \"\"\"\r\n    return _assets\r\n\r\n@external\r\ndef withdraw(_assets: uint256, _receiver: address = msg.sender, _owner: address = msg.sender) -> uint256:\r\n    \"\"\"\r\n    @notice Withdraw assets\r\n    @param _assets Amount of assets to withdraw\r\n    @param _receiver Account that will receive the assets\r\n    @param _owner Owner of the shares that will be redeemed\r\n    @return Amount of shares redeemed\r\n    \"\"\"\r\n    self._withdraw(_assets, _receiver, _owner)\r\n    return _assets\r\n\r\n@external\r\n@view\r\ndef maxRedeem(_owner: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get the maximum amount of shares an account is allowed to redeem\r\n    @param _owner Account\r\n    @return Maximum amount the account is allowed to redeem\r\n    \"\"\"\r\n    return self.balanceOf[_owner]\r\n\r\n@external\r\n@view\r\ndef previewRedeem(_shares: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Simulate the effect of a redemption\r\n    @param _shares Amount of shares to redeem\r\n    @return Amount of assets that will be withdrawn\r\n    \"\"\"\r\n    return _shares\r\n\r\n@external\r\ndef redeem(_shares: uint256, _receiver: address = msg.sender, _owner: address = msg.sender) -> uint256:\r\n    \"\"\"\r\n    @notice Redeem shares\r\n    @param _shares Amount of shares to redeem\r\n    @param _receiver Account that will receive the assets\r\n    @param _owner Owner of the shares that will be redeemed\r\n    @return Amount of assets withdrawn\r\n    \"\"\"\r\n    self._withdraw(_shares, _receiver, _owner)\r\n    return _shares\r\n\r\n# external functions\r\n\r\n@external\r\n@view\r\ndef total_vote_weight() -> uint256:\r\n    \"\"\"\r\n    @notice Get the total voting weight\r\n    @return Total vote weight\r\n    \"\"\"\r\n    last: uint256 = self.last_supply\r\n    week: uint256 = last & WEEK_MASK\r\n    last_week: uint256 = block.timestamp / WEEK_LENGTH - 1\r\n    if week > last_week:\r\n        return shift(last, BAL_SHIFT)\r\n    return self.totalSupply\r\n\r\n@external\r\n@view\r\ndef vote_weight(_account: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get the voting weight of an account\r\n    @dev Vote weights are always evaluated at the end of last week\r\n    @param _account Account to get the vote weight for\r\n    @return Vote weight\r\n    \"\"\"\r\n    last: uint256 = self.last_balances[_account]\r\n    week: uint256 = last & WEEK_MASK\r\n    last_week: uint256 = block.timestamp / WEEK_LENGTH - 1\r\n    if week > last_week:\r\n        return shift(last, BAL_SHIFT)\r\n    return self.balanceOf[_account]\r\n\r\n@internal\r\ndef _deposit(_amount: uint256, _receiver: address):\r\n    \"\"\"\r\n    @notice Deposit assets and mint shares\r\n    @param _amount Amount of assets deposited\r\n    @param _receiver Receiver of minted shares\r\n    \"\"\"\r\n    assert _amount > 0\r\n    self._update_last_supply()\r\n    self._update_last(_receiver)\r\n\r\n    self.totalSupply += _amount\r\n    self.balanceOf[_receiver] += _amount\r\n    \r\n    assert ERC20(asset).transferFrom(msg.sender, self, _amount, default_return_value=True)\r\n    log Deposit(msg.sender, _receiver, _amount, _amount)\r\n    log Transfer(empty(address), _receiver, _amount)\r\n\r\n@internal\r\ndef _withdraw(_amount: uint256, _receiver: address, _owner: address):\r\n    \"\"\"\r\n    @notice Withdraw assets and burn shares\r\n    @param _amount Amount of assets withdrawn\r\n    @param _receiver Receiver of withdrawn assets\r\n    @param _owner Account to burn shares from\r\n    \"\"\"\r\n    if _owner != msg.sender:\r\n        self.allowance[_owner][msg.sender] -= _amount # dev: allowance\r\n    \r\n    assert _amount > 0\r\n    self._update_last_supply()\r\n    self._update_last(_owner)\r\n\r\n    self.totalSupply -= _amount    \r\n    self.balanceOf[_owner] -= _amount\r\n\r\n    assert ERC20(asset).transfer(_receiver, _amount, default_return_value=True)\r\n    log Transfer(_owner, empty(address), _amount)\r\n    log Withdraw(msg.sender, _receiver, _owner, _amount, _amount)\r\n\r\n@internal\r\ndef _update_last_supply():\r\n    \"\"\"\r\n    @notice Update last supply\r\n    @dev Should be called before applying supply change\r\n    \"\"\"\r\n    week: uint256 = self.last_supply & WEEK_MASK\r\n    current_week: uint256 = block.timestamp / WEEK_LENGTH\r\n    if current_week > week:\r\n        self.last_supply = self._pack_balance(current_week, self.totalSupply)\r\n\r\n@internal\r\ndef _update_last(_account: address):\r\n    \"\"\"\r\n    @notice Update last balance\r\n    @param _account Account to update last balance for\r\n    @dev Should be called before applying balance change\r\n    \"\"\"\r\n    week: uint256 = self.last_balances[_account] & WEEK_MASK\r\n    current_week: uint256 = block.timestamp / WEEK_LENGTH\r\n    if current_week > week:\r\n        self.last_balances[_account] = self._pack_balance(current_week, self.balanceOf[_account])\r\n\r\n@internal\r\n@pure\r\ndef _pack_balance(_week: uint256, _bal: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Pack last balance into a single word\r\n    @param _week Week number of last change\r\n    @param _bal Last balance\r\n    @return Packed last balance\r\n    \"\"\"\r\n    assert _week <= WEEK_MASK and _bal <= BAL_MASK\r\n    return _week | shift(_bal, -BAL_SHIFT)","ABI":"[{\"name\":\"Transfer\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"receiver\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Approval\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"spender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Deposit\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"assets\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"shares\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Withdraw\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"receiver\",\"type\":\"address\",\"indexed\":true},{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"assets\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"shares\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_asset\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transfer\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferFrom\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"increaseAllowance\",\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"decreaseAllowance\",\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalAssets\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"convertToShares\",\"inputs\":[{\"name\":\"_assets\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"convertToAssets\",\"inputs\":[{\"name\":\"_shares\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"maxDeposit\",\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"previewDeposit\",\"inputs\":[{\"name\":\"_assets\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deposit\",\"inputs\":[{\"name\":\"_assets\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deposit\",\"inputs\":[{\"name\":\"_assets\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"maxMint\",\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"previewMint\",\"inputs\":[{\"name\":\"_shares\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"mint\",\"inputs\":[{\"name\":\"_shares\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"mint\",\"inputs\":[{\"name\":\"_shares\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"maxWithdraw\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"previewWithdraw\",\"inputs\":[{\"name\":\"_assets\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw\",\"inputs\":[{\"name\":\"_assets\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw\",\"inputs\":[{\"name\":\"_assets\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw\",\"inputs\":[{\"name\":\"_assets\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"maxRedeem\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"previewRedeem\",\"inputs\":[{\"name\":\"_shares\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"redeem\",\"inputs\":[{\"name\":\"_shares\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"redeem\",\"inputs\":[{\"name\":\"_shares\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"redeem\",\"inputs\":[{\"name\":\"_shares\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"total_vote_weight\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"vote_weight\",\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"last_supply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"last_balances\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"allowance\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"},{\"name\":\"arg1\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"decimals\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"asset\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]}]","ContractName":"yETH delegated staking contract","CompilerVersion":"vyper:0.3.10","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000583019ff0f430721ada9cfb4fac8f06ca104d0b4","EVMVersion":"Default","Library":"","LicenseType":"GNU AGPLv3","Proxy":"0","Implementation":"","SwarmSource":""}]}