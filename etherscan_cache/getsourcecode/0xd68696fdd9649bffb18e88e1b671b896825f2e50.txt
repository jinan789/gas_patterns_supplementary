{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.3.10\r\n\"\"\"\r\n@title Weight vote\r\n@author 0xkorin, Yearn Finance\r\n@license GNU AGPLv3\r\n@notice\r\n    Voting contract for weight redistribution.\r\n    Time is divided in 4 week epochs. In the final week of the epoch, \r\n    all users are able to vote on the current pool, as well as a 'blank' option, \r\n    indicating their desire to keep the composition unchanged.\r\n    A part of the weight of the assets in the pool is redistribution according to the vote distribution.\r\n\"\"\"\r\n\r\ninterface Measure:\r\n    def vote_weight(_account: address) -> uint256: view\r\n\r\ninterface Pool:\r\n    def num_assets() -> uint256: view\r\n\r\ngenesis: public(immutable(uint256))\r\npool: public(immutable(address))\r\n\r\nmanagement: public(address)\r\npending_management: public(address)\r\n\r\nmeasure: public(address)\r\ntotal_votes: public(HashMap[uint256, uint256]) # epoch => total votes\r\nvotes: public(HashMap[uint256, uint256[33]]) # epoch => [blank vote, ..protocol votes..]\r\nvotes_user: public(HashMap[address, HashMap[uint256, uint256[33]]]) # user => epoch => [blank vote, ..protocol votes..]\r\nvoted: public(HashMap[address, HashMap[uint256, bool]]) # user => epoch => voted?\r\n\r\nevent Vote:\r\n    epoch: indexed(uint256)\r\n    account: indexed(address)\r\n    weight: uint256\r\n    votes: DynArray[uint256, 33]\r\n\r\nevent SetMeasure:\r\n    measure: indexed(address)\r\n\r\nevent PendingManagement:\r\n    management: indexed(address)\r\n\r\nevent SetManagement:\r\n    management: indexed(address)\r\n\r\nWEEK: constant(uint256) = 7 * 24 * 60 * 60\r\nEPOCH_LENGTH: constant(uint256) = 4 * WEEK\r\nVOTE_LENGTH: constant(uint256) = WEEK\r\nVOTE_START: constant(uint256) = EPOCH_LENGTH - VOTE_LENGTH\r\nVOTE_SCALE: constant(uint256) = 10_000\r\n\r\n@external\r\ndef __init__(_genesis: uint256, _pool: address, _measure: address):\r\n    \"\"\"\r\n    @notice Constructor\r\n    @param _genesis Timestamp of start of epoch 0\r\n    @param _pool Pool address\r\n    @param _measure Vote weight measure\r\n    \"\"\"\r\n    assert _genesis <= block.timestamp\r\n    assert _pool != empty(address)\r\n    assert _measure != empty(address)\r\n\r\n    genesis = _genesis\r\n    pool = _pool\r\n    self.management = msg.sender\r\n    self.measure = _measure\r\n\r\n@external\r\n@view\r\ndef epoch() -> uint256:\r\n    \"\"\"\r\n    @notice Get the current epoch\r\n    @return Current epoch\r\n    \"\"\"\r\n    return self._epoch()\r\n\r\n@internal\r\n@view\r\ndef _epoch() -> uint256:\r\n    \"\"\"\r\n    @notice Get the current epoch\r\n    \"\"\"\r\n    return (block.timestamp - genesis) / EPOCH_LENGTH\r\n\r\n@external\r\n@view\r\ndef vote_open() -> bool:\r\n    \"\"\"\r\n    @notice Query whether the vote period is currently open\r\n    @return True: vote period is open, False: vote period is closed\r\n    \"\"\"\r\n    return self._vote_open()\r\n\r\n@internal\r\n@view\r\ndef _vote_open() -> bool:\r\n    \"\"\"\r\n    @notice Query whether the vote period is currently open\r\n    \"\"\"\r\n    return (block.timestamp - genesis) % EPOCH_LENGTH >= VOTE_START\r\n\r\n@external\r\ndef vote(_votes: DynArray[uint256, 33]):\r\n    \"\"\"\r\n    @notice\r\n        Vote for weight redistribution among the pool assets. The first entry \r\n        corresponds to a 'blank' vote, meaning no redistribution will be done.\r\n        Votes are in basispoints and must add to 100%\r\n    @param _votes List of votes in bps\r\n    \"\"\"\r\n    epoch: uint256 = self._epoch()\r\n    assert self._vote_open()\r\n    assert not self.voted[msg.sender][epoch]\r\n\r\n    n: uint256 = Pool(pool).num_assets()\r\n    assert n > 0\r\n    assert len(_votes) <= n + 1\r\n\r\n    weight: uint256 = Measure(self.measure).vote_weight(msg.sender)\r\n    assert weight > 0\r\n    self.total_votes[epoch] += weight\r\n    self.voted[msg.sender][epoch] = True\r\n\r\n    total: uint256 = 0\r\n    for i in range(33):\r\n        if i == len(_votes):\r\n            break\r\n        if _votes[i] == 0:\r\n            continue\r\n\r\n        votes: uint256 = _votes[i] * weight / VOTE_SCALE\r\n        self.votes[epoch][i] += votes\r\n        self.votes_user[msg.sender][epoch][i] = votes\r\n        total += _votes[i]\r\n\r\n    assert total == VOTE_SCALE\r\n    log Vote(epoch, msg.sender, weight, _votes)\r\n\r\n@external\r\ndef set_measure(_measure: address):\r\n    \"\"\"\r\n    @notice Set vote weight measure contract\r\n    @param _measure New vote weight measure\r\n    \"\"\"\r\n    assert msg.sender == self.management\r\n    assert _measure != empty(address)\r\n    assert not self._vote_open()\r\n    self.measure = _measure\r\n    log SetMeasure(_measure)\r\n\r\n@external\r\ndef set_management(_management: address):\r\n    \"\"\"\r\n    @notice \r\n        Set the pending management address.\r\n        Needs to be accepted by that account separately to transfer management over\r\n    @param _management New pending management address\r\n    \"\"\"\r\n    assert msg.sender == self.management\r\n    self.pending_management = _management\r\n    log PendingManagement(_management)\r\n\r\n@external\r\ndef accept_management():\r\n    \"\"\"\r\n    @notice \r\n        Accept management role.\r\n        Can only be called by account previously marked as pending management by current management\r\n    \"\"\"\r\n    assert msg.sender == self.pending_management\r\n    self.pending_management = empty(address)\r\n    self.management = msg.sender\r\n    log SetManagement(msg.sender)","ABI":"[{\"name\":\"Vote\",\"inputs\":[{\"name\":\"epoch\",\"type\":\"uint256\",\"indexed\":true},{\"name\":\"account\",\"type\":\"address\",\"indexed\":true},{\"name\":\"weight\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"votes\",\"type\":\"uint256[]\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetMeasure\",\"inputs\":[{\"name\":\"measure\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"PendingManagement\",\"inputs\":[{\"name\":\"management\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetManagement\",\"inputs\":[{\"name\":\"management\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_genesis\",\"type\":\"uint256\"},{\"name\":\"_pool\",\"type\":\"address\"},{\"name\":\"_measure\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"epoch\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"vote_open\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"vote\",\"inputs\":[{\"name\":\"_votes\",\"type\":\"uint256[]\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_measure\",\"inputs\":[{\"name\":\"_measure\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_management\",\"inputs\":[{\"name\":\"_management\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"accept_management\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"genesis\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pool\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"management\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pending_management\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"measure\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"total_votes\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"votes\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"},{\"name\":\"arg1\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"votes_user\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"},{\"name\":\"arg1\",\"type\":\"uint256\"},{\"name\":\"arg2\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"voted\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"},{\"name\":\"arg1\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]}]","ContractName":"Weight vote","CompilerVersion":"vyper:0.3.10","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000064d428800000000000000000000000002cced4ffa804adbe1269cdfc22d7904471abde6300000000000000000000000052574a10ce418afef388e39cea61643d33dba81d","EVMVersion":"Default","Library":"","LicenseType":"GNU AGPLv3","Proxy":"0","Implementation":"","SwarmSource":""}]}