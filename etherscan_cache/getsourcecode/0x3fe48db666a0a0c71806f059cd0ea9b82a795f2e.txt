{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.3.9\r\n\r\n\r\n# Interfaces\r\n\r\nfrom vyper.interfaces import ERC20 as IERC20\r\n\r\n\r\n# Structs\r\n\r\nstruct InvestorFunds:\r\n    currentAmountDeposited: uint256\r\n    totalAmountDeposited: uint256\r\n    totalAmountWithdrawn: uint256\r\n    sharesBasisPoints: uint256\r\n    activeForRewards: bool\r\n\r\ninterface ILendingPoolCore:\r\n    def activeLenders() -> uint256: view\r\n    def fundsAvailable() -> uint256: view\r\n    def fundsInvested() -> uint256: view\r\n    def totalFundsInvested() -> uint256: view\r\n    def totalRewards() -> uint256: view\r\n    def totalSharesBasisPoints() -> uint256: view\r\n\r\n# Events\r\n\r\nevent OwnerProposed:\r\n    ownerIndexed: indexed(address)\r\n    proposedOwnerIndexed: indexed(address)\r\n    owner: address\r\n    proposedOwner: address\r\n    erc20TokenContract: address\r\n\r\nevent OwnershipTransferred:\r\n    ownerIndexed: indexed(address)\r\n    proposedOwnerIndexed: indexed(address)\r\n    owner: address\r\n    proposedOwner: address\r\n    erc20TokenContract: address\r\n\r\nevent LendingPoolPeripheralAddressSet:\r\n    erc20TokenContractIndexed: indexed(address)\r\n    currentValue: address\r\n    newValue: address\r\n    erc20TokenContract: address\r\n\r\n\r\n# Global variables\r\n\r\nowner: public(address)\r\nproposedOwner: public(address)\r\n\r\nlendingPoolPeripheral: public(address)\r\nerc20TokenContract: public(address)\r\n\r\nfunds: public(HashMap[address, InvestorFunds])\r\nlenders: DynArray[address, 2**50]\r\nknownLenders: public(HashMap[address, bool])\r\nactiveLenders: public(uint256)\r\n\r\nfundsAvailable: public(uint256)\r\nfundsInvested: public(uint256)\r\ntotalFundsInvested: public(uint256)\r\ntotalRewards: public(uint256)\r\ntotalSharesBasisPoints: public(uint256)\r\n\r\nmigrationDone: public(bool)\r\n\r\n##### INTERNAL METHODS #####\r\n\r\n@view\r\n@internal\r\ndef _fundsAreAllowed(_owner: address, _spender: address, _amount: uint256) -> bool:\r\n    amountAllowed: uint256 = IERC20(self.erc20TokenContract).allowance(_owner, _spender)\r\n    return _amount <= amountAllowed\r\n\r\n\r\n@view\r\n@internal\r\ndef _computeShares(_amount: uint256) -> uint256:\r\n    if self.totalSharesBasisPoints == 0:\r\n        return _amount\r\n    return self.totalSharesBasisPoints * _amount / (self.fundsAvailable + self.fundsInvested)\r\n\r\n\r\n@view\r\n@internal\r\ndef _computeWithdrawableAmount(_lender: address) -> uint256:\r\n    if self.totalSharesBasisPoints == 0:\r\n        return 0\r\n    return (self.fundsAvailable + self.fundsInvested) * self.funds[_lender].sharesBasisPoints / self.totalSharesBasisPoints\r\n\r\n\r\n##### EXTERNAL METHODS - VIEW #####\r\n\r\n@view\r\n@external\r\ndef lendersArray() -> DynArray[address, 2**50]:\r\n  return self.lenders\r\n\r\n\r\n@view\r\n@external\r\ndef computeWithdrawableAmount(_lender: address) -> uint256:\r\n    return self._computeWithdrawableAmount(_lender)\r\n\r\n\r\n@view\r\n@external\r\ndef fundsInPool() -> uint256:\r\n    return self.fundsAvailable + self.fundsInvested\r\n\r\n\r\n@view\r\n@external\r\ndef currentAmountDeposited(_lender: address) -> uint256:\r\n    return self.funds[_lender].currentAmountDeposited\r\n\r\n\r\n@view\r\n@external\r\ndef totalAmountDeposited(_lender: address) -> uint256:\r\n    return self.funds[_lender].totalAmountDeposited\r\n\r\n\r\n@view\r\n@external\r\ndef totalAmountWithdrawn(_lender: address) -> uint256:\r\n    return self.funds[_lender].totalAmountWithdrawn\r\n\r\n\r\n@view\r\n@external\r\ndef sharesBasisPoints(_lender: address) -> uint256:\r\n    return self.funds[_lender].sharesBasisPoints\r\n\r\n\r\n@view\r\n@external\r\ndef activeForRewards(_lender: address) -> bool:\r\n    return self.funds[_lender].activeForRewards\r\n\r\n\r\n##### EXTERNAL METHODS - NON-VIEW #####\r\n\r\n@external\r\ndef __init__(_erc20TokenContract: address):\r\n    assert _erc20TokenContract != empty(address), \"The address is the zero address\"\r\n    self.owner = msg.sender\r\n    self.erc20TokenContract = _erc20TokenContract\r\n    self.migrationDone = False\r\n\r\n\r\n@external\r\ndef migrateLender(\r\n    _wallet: address,\r\n    _currentAmountDeposited: uint256,\r\n    _totalAmountDeposited: uint256,\r\n    _totalAmountWithdrawn: uint256,\r\n    _sharesBasisPoints: uint256,\r\n    _activeForRewards: bool\r\n):\r\n    assert not self.migrationDone, \"migration already done\"\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n\r\n    self.lenders.append(_wallet)\r\n    self.knownLenders[_wallet] = True\r\n    self.funds[_wallet] = InvestorFunds({\r\n            currentAmountDeposited: _currentAmountDeposited,\r\n            totalAmountDeposited: _totalAmountDeposited,\r\n            totalAmountWithdrawn: _totalAmountWithdrawn,\r\n            sharesBasisPoints: _sharesBasisPoints,\r\n            activeForRewards: _activeForRewards\r\n            }\r\n    )\r\n\r\n\r\n@external\r\ndef migrate(_from: address):\r\n    assert not self.migrationDone, \"migration already done\"\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert _from != empty(address), \"_address is the zero address\"\r\n    assert _from.is_contract, \"LPCore is not a contract\"\r\n\r\n    self.activeLenders = ILendingPoolCore(_from).activeLenders()\r\n    self.fundsAvailable = ILendingPoolCore(_from).fundsAvailable()\r\n    self.fundsInvested = ILendingPoolCore(_from).fundsInvested()\r\n    self.totalFundsInvested = ILendingPoolCore(_from).totalFundsInvested()\r\n    self.totalRewards = ILendingPoolCore(_from).totalRewards()\r\n    self.totalSharesBasisPoints = ILendingPoolCore(_from).totalSharesBasisPoints()\r\n\r\n    self.migrationDone = True\r\n\r\n\r\n@external\r\ndef proposeOwner(_address: address):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert _address != empty(address), \"_address it the zero address\"\r\n    assert self.owner != _address, \"proposed owner addr is the owner\"\r\n    assert self.proposedOwner != _address, \"proposed owner addr is the same\"\r\n\r\n    self.proposedOwner = _address\r\n\r\n    log OwnerProposed(\r\n        self.owner,\r\n        _address,\r\n        self.owner,\r\n        _address,\r\n        self.erc20TokenContract\r\n    )\r\n\r\n\r\n@external\r\ndef claimOwnership():\r\n    assert msg.sender == self.proposedOwner, \"msg.sender is not the proposed\"\r\n\r\n    log OwnershipTransferred(\r\n        self.owner,\r\n        self.proposedOwner,\r\n        self.owner,\r\n        self.proposedOwner,\r\n        self.erc20TokenContract\r\n    )\r\n\r\n    self.owner = self.proposedOwner\r\n    self.proposedOwner = empty(address)\r\n\r\n\r\n@external\r\ndef setLendingPoolPeripheralAddress(_address: address):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert _address != empty(address), \"address is the zero address\"\r\n    assert _address != self.lendingPoolPeripheral, \"new value is the same\"\r\n\r\n    log LendingPoolPeripheralAddressSet(\r\n        self.erc20TokenContract,\r\n        self.lendingPoolPeripheral,\r\n        _address,\r\n        self.erc20TokenContract\r\n    )\r\n\r\n    self.lendingPoolPeripheral = _address\r\n\r\n\r\n@external\r\ndef deposit(_lender: address, _payer: address, _amount: uint256) -> bool:\r\n    # _amount should be passed in wei\r\n\r\n    assert msg.sender == self.lendingPoolPeripheral, \"msg.sender is not LP peripheral\"\r\n    assert _lender != empty(address), \"The _lender is the zero address\"\r\n    assert _payer != empty(address), \"The _payer is the zero address\"\r\n    assert self._fundsAreAllowed(_payer, self, _amount), \"Not enough funds allowed\"\r\n\r\n    sharesAmount: uint256 = self._computeShares(_amount)\r\n\r\n    if self.funds[_lender].currentAmountDeposited > 0:\r\n        self.funds[_lender].totalAmountDeposited += _amount\r\n        self.funds[_lender].currentAmountDeposited += _amount\r\n        self.funds[_lender].sharesBasisPoints += sharesAmount\r\n    elif self.funds[_lender].currentAmountDeposited == 0 and self.knownLenders[_lender]:\r\n        self.funds[_lender].totalAmountDeposited += _amount\r\n        self.funds[_lender].currentAmountDeposited = _amount\r\n        self.funds[_lender].sharesBasisPoints = sharesAmount\r\n        self.funds[_lender].activeForRewards = True\r\n\r\n        self.activeLenders += 1\r\n    else:\r\n        self.funds[_lender] = InvestorFunds(\r\n            {\r\n                currentAmountDeposited: _amount,\r\n                totalAmountDeposited: _amount,\r\n                totalAmountWithdrawn: 0,\r\n                sharesBasisPoints: sharesAmount,\r\n                activeForRewards: True\r\n            }\r\n        )\r\n        self.lenders.append(_lender)\r\n        self.knownLenders[_lender] = True\r\n        self.activeLenders += 1\r\n    \r\n    self.fundsAvailable += _amount\r\n    self.totalSharesBasisPoints += sharesAmount\r\n\r\n    return IERC20(self.erc20TokenContract).transferFrom(_payer, self, _amount)\r\n\r\n\r\n@external\r\ndef withdraw(_lender: address, _wallet: address, _amount: uint256) -> bool:\r\n    # _amount should be passed in wei\r\n\r\n    assert msg.sender == self.lendingPoolPeripheral, \"msg.sender is not LP peripheral\"\r\n    assert _lender != empty(address), \"The _lender is the zero address\"\r\n    assert _wallet != empty(address), \"The _wallet is the zero address\"\r\n    assert self._computeWithdrawableAmount(_lender) >= _amount, \"_amount more than withdrawable\"\r\n    assert self.fundsAvailable >= _amount, \"Available funds less than amount\"\r\n\r\n    newDepositAmount: uint256 = self._computeWithdrawableAmount(_lender) - _amount\r\n    newLenderSharesAmount: uint256 = self._computeShares(newDepositAmount)\r\n    self.totalSharesBasisPoints -= (self.funds[_lender].sharesBasisPoints - newLenderSharesAmount)\r\n\r\n    self.funds[_lender] = InvestorFunds(\r\n        {\r\n            currentAmountDeposited: newDepositAmount,\r\n            totalAmountDeposited: self.funds[_lender].totalAmountDeposited,\r\n            totalAmountWithdrawn: self.funds[_lender].totalAmountWithdrawn + _amount,\r\n            sharesBasisPoints: newLenderSharesAmount,\r\n            activeForRewards: True\r\n        }\r\n    )\r\n\r\n    if self.funds[_lender].currentAmountDeposited == 0:\r\n        self.funds[_lender].activeForRewards = False\r\n        self.activeLenders -= 1\r\n\r\n    self.fundsAvailable -= _amount\r\n\r\n    return IERC20(self.erc20TokenContract).transfer(_wallet, _amount)\r\n\r\n\r\n@external\r\ndef sendFunds(_to: address, _amount: uint256) -> bool:\r\n  # _amount should be passed in wei\r\n\r\n    assert msg.sender == self.lendingPoolPeripheral, \"msg.sender is not LP peripheral\"\r\n    assert _to != empty(address), \"_to is the zero address\"\r\n    assert _amount > 0, \"_amount has to be higher than 0\"\r\n    assert IERC20(self.erc20TokenContract).balanceOf(self) >= _amount, \"Insufficient balance\"\r\n\r\n    self.fundsAvailable -= _amount\r\n    self.fundsInvested += _amount\r\n    self.totalFundsInvested += _amount\r\n\r\n    return IERC20(self.erc20TokenContract).transfer(_to, _amount)\r\n\r\n\r\n@external\r\ndef receiveFunds(_borrower: address, _amount: uint256, _rewardsAmount: uint256, _investedAmount: uint256) -> bool:\r\n    # _amount,_rewardsAmount and _investedAmount should be passed in wei\r\n\r\n    assert msg.sender == self.lendingPoolPeripheral, \"msg.sender is not LP peripheral\"\r\n    assert _borrower != empty(address), \"_borrower is the zero address\"\r\n    assert _amount + _rewardsAmount > 0, \"Amount has to be higher than 0\"\r\n    assert IERC20(self.erc20TokenContract).allowance(_borrower, self) >= _amount, \"insufficient value received\"\r\n\r\n    self.fundsAvailable += _amount + _rewardsAmount\r\n    self.fundsInvested -= _investedAmount\r\n    self.totalRewards += _rewardsAmount\r\n\r\n    return IERC20(self.erc20TokenContract).transferFrom(_borrower, self, _amount + _rewardsAmount)\r\n\r\n\r\n@external\r\ndef transferProtocolFees(_borrower: address, _protocolWallet: address, _amount: uint256) -> bool:\r\n    # _amount should be passed in wei\r\n\r\n    assert msg.sender == self.lendingPoolPeripheral, \"msg.sender is not LP peripheral\"\r\n    assert _protocolWallet != empty(address), \"_protocolWallet is the zero address\"\r\n    assert _borrower != empty(address), \"_borrower is the zero address\"\r\n    assert _amount > 0, \"_amount should be higher than 0\"\r\n    assert IERC20(self.erc20TokenContract).allowance(_borrower, self) >= _amount, \"insufficient value received\"\r\n\r\n    return IERC20(self.erc20TokenContract).transferFrom(_borrower, _protocolWallet, _amount)","ABI":"[{\"name\":\"OwnerProposed\",\"inputs\":[{\"name\":\"ownerIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"proposedOwnerIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"owner\",\"type\":\"address\",\"indexed\":false},{\"name\":\"proposedOwner\",\"type\":\"address\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"ownerIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"proposedOwnerIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"owner\",\"type\":\"address\",\"indexed\":false},{\"name\":\"proposedOwner\",\"type\":\"address\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"LendingPoolPeripheralAddressSet\",\"inputs\":[{\"name\":\"erc20TokenContractIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"currentValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"newValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lendersArray\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"computeWithdrawableAmount\",\"inputs\":[{\"name\":\"_lender\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"fundsInPool\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"currentAmountDeposited\",\"inputs\":[{\"name\":\"_lender\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalAmountDeposited\",\"inputs\":[{\"name\":\"_lender\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalAmountWithdrawn\",\"inputs\":[{\"name\":\"_lender\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"sharesBasisPoints\",\"inputs\":[{\"name\":\"_lender\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"activeForRewards\",\"inputs\":[{\"name\":\"_lender\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_erc20TokenContract\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"migrateLender\",\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_currentAmountDeposited\",\"type\":\"uint256\"},{\"name\":\"_totalAmountDeposited\",\"type\":\"uint256\"},{\"name\":\"_totalAmountWithdrawn\",\"type\":\"uint256\"},{\"name\":\"_sharesBasisPoints\",\"type\":\"uint256\"},{\"name\":\"_activeForRewards\",\"type\":\"bool\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"migrate\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"proposeOwner\",\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claimOwnership\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setLendingPoolPeripheralAddress\",\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deposit\",\"inputs\":[{\"name\":\"_lender\",\"type\":\"address\"},{\"name\":\"_payer\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw\",\"inputs\":[{\"name\":\"_lender\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"sendFunds\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"receiveFunds\",\"inputs\":[{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_rewardsAmount\",\"type\":\"uint256\"},{\"name\":\"_investedAmount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferProtocolFees\",\"inputs\":[{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_protocolWallet\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"proposedOwner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lendingPoolPeripheral\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"erc20TokenContract\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"funds\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"name\":\"currentAmountDeposited\",\"type\":\"uint256\"},{\"name\":\"totalAmountDeposited\",\"type\":\"uint256\"},{\"name\":\"totalAmountWithdrawn\",\"type\":\"uint256\"},{\"name\":\"sharesBasisPoints\",\"type\":\"uint256\"},{\"name\":\"activeForRewards\",\"type\":\"bool\"}]}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"knownLenders\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"activeLenders\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"fundsAvailable\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"fundsInvested\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalFundsInvested\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalRewards\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalSharesBasisPoints\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"migrationDone\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.3.9","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}