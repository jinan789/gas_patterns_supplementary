{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.3.9\r\n\r\n\"\"\"\r\n@title Loans\r\n@author [Zharta](https://zharta.io/)\r\n@notice The loans contract exists as the main interface to create peer-to-pool NFT-backed loans\r\n@dev Uses a `LoansCore` contract to store state\r\n\"\"\"\r\n\r\n# Interfaces\r\n\r\nfrom vyper.interfaces import ERC165 as IERC165\r\nfrom vyper.interfaces import ERC721 as IERC721\r\nfrom vyper.interfaces import ERC20 as IERC20\r\n\r\ninterface ILoansCore:\r\n    def isLoanCreated(_borrower: address, _loanId: uint256) -> bool: view\r\n    def isLoanStarted(_borrower: address, _loanId: uint256) -> bool: view\r\n    def getLoan(_borrower: address, _loanId: uint256) -> Loan: view\r\n    def addCollateralToLoan(_borrower: address, _collateral: Collateral, _loanId: uint256): nonpayable\r\n    def removeCollateralFromLoan(_borrower: address, _collateral: Collateral, _loanId: uint256): nonpayable\r\n    def updateCollaterals(_collateral: Collateral, _toRemove: bool): nonpayable\r\n    def addLoan(_borrower: address, _amount: uint256, _interest: uint256, _maturity: uint256, _collaterals: DynArray[Collateral, 100]) -> uint256: nonpayable\r\n    def updateLoanStarted(_borrower: address, _loanId: uint256): nonpayable\r\n    def updateLoanPaidAmount(_borrower: address, _loanId: uint256, _paidPrincipal: uint256, _paidInterestAmount: uint256): nonpayable\r\n    def updatePaidLoan(_borrower: address, _loanId: uint256): nonpayable\r\n    def updateDefaultedLoan(_borrower: address, _loanId: uint256): nonpayable\r\n    def updateHighestSingleCollateralLoan(_borrower: address, _loanId: uint256): nonpayable\r\n    def updateHighestCollateralBundleLoan(_borrower: address, _loanId: uint256): nonpayable\r\n    def updateHighestRepayment(_borrower: address, _loanId: uint256): nonpayable\r\n    def updateHighestDefaultedLoan(_borrower: address, _loanId: uint256): nonpayable\r\n\r\ninterface ICollateralVaultPeripheral:\r\n    def storeCollateral(_wallet: address, _collateralAddress: address, _tokenId: uint256, _erc20TokenContract: address, _createDelegation: bool): nonpayable\r\n    def transferCollateralFromLoan(_wallet: address, _collateralAddress: address, _tokenId: uint256, _erc20TokenContract: address): nonpayable\r\n    def isCollateralApprovedForVault(_borrower: address, _collateralAddress: address, _tokenId: uint256) -> bool: view\r\n    def setCollateralDelegation(_wallet: address, _collateralAddress: address, _tokenId: uint256, _erc20TokenContract: address, _value: bool): nonpayable\r\n\r\ninterface ILiquidityControls:\r\n    def withinLoansPoolShareLimit(_borrower: address, _amount: uint256, _loansCoreContractAddress: address, _lpPeripheralContractAddress: address) -> bool: view\r\n    def withinCollectionShareLimit(_amount: uint256, _collectionAddress: address, _loansCoreContractAddress: address, _lpCoreContractAddress: address) -> bool: view\r\n\r\ninterface IERC20Symbol:\r\n    def symbol() -> String[100]: view\r\n\r\ninterface ILendingPoolPeripheral:\r\n    def maxFundsInvestable() -> uint256: view \r\n    def erc20TokenContract() -> address: view\r\n    def sendFundsEth(_to: address, _amount: uint256): nonpayable\r\n    def sendFunds(_to: address, _amount: uint256): nonpayable\r\n    def receiveFundsEth(_borrower: address, _amount: uint256, _rewardsAmount: uint256): payable\r\n    def receiveFunds(_borrower: address, _amount: uint256, _rewardsAmount: uint256): payable\r\n    def lendingPoolCoreContract() -> address: view\r\n\r\ninterface ILiquidationsPeripheral:\r\n    def addLiquidation(_borrower: address, _loanId: uint256, _erc20TokenContract: address): nonpayable\r\n\r\n# Structs\r\n\r\nstruct Collateral:\r\n    contractAddress: address\r\n    tokenId: uint256\r\n    amount: uint256\r\n\r\nstruct Loan:\r\n    id: uint256\r\n    amount: uint256\r\n    interest: uint256 # parts per 10000, e.g. 2.5% is represented by 250 parts per 10000\r\n    maturity: uint256\r\n    startTime: uint256\r\n    collaterals: DynArray[Collateral, 100]\r\n    paidPrincipal: uint256\r\n    paidInterestAmount: uint256\r\n    started: bool\r\n    invalidated: bool\r\n    paid: bool\r\n    defaulted: bool\r\n    canceled: bool\r\n\r\n\r\nstruct EIP712Domain:\r\n    name: String[100]\r\n    version: String[10]\r\n    chain_id: uint256\r\n    verifying_contract: address\r\n\r\nstruct ReserveMessageContent:\r\n    amount: uint256\r\n    interest: uint256\r\n    maturity: uint256\r\n    collaterals: DynArray[Collateral, 100]\r\n    delegations: DynArray[bool, 100]\r\n    deadline: uint256\r\n\r\n\r\n# Events\r\n\r\nevent OwnershipTransferred:\r\n    ownerIndexed: indexed(address)\r\n    proposedOwnerIndexed: indexed(address)\r\n    owner: address\r\n    proposedOwner: address\r\n    erc20TokenContract: address\r\n\r\nevent OwnerProposed:\r\n    ownerIndexed: indexed(address)\r\n    proposedOwnerIndexed: indexed(address)\r\n    owner: address\r\n    proposedOwner: address\r\n    erc20TokenContract: address\r\n\r\nevent InterestAccrualPeriodChanged:\r\n    erc20TokenContractIndexed: indexed(address)\r\n    currentValue: uint256\r\n    newValue: uint256\r\n    erc20TokenContract: address\r\n\r\nevent LendingPoolPeripheralAddressSet:\r\n    erc20TokenContractIndexed: indexed(address)\r\n    currentValue: address\r\n    newValue: address\r\n    erc20TokenContract: address\r\n\r\nevent CollateralVaultPeripheralAddressSet:\r\n    erc20TokenContractIndexed: indexed(address)\r\n    currentValue: address\r\n    newValue: address\r\n    erc20TokenContract: address\r\n\r\nevent LiquidationsPeripheralAddressSet:\r\n    erc20TokenContractIndexed: indexed(address)\r\n    currentValue: address\r\n    newValue: address\r\n    erc20TokenContract: address\r\n\r\nevent LiquidityControlsAddressSet:\r\n    erc20TokenContractIndexed: indexed(address)\r\n    currentValue: address\r\n    newValue: address\r\n    erc20TokenContract: address\r\n\r\nevent ContractStatusChanged:\r\n    erc20TokenContractIndexed: indexed(address)\r\n    value: bool\r\n    erc20TokenContract: address\r\n\r\nevent ContractDeprecated:\r\n    erc20TokenContractIndexed: indexed(address)\r\n    erc20TokenContract: address\r\n\r\nevent LoanCreated:\r\n    walletIndexed: indexed(address)\r\n    wallet: address\r\n    loanId: uint256\r\n    erc20TokenContract: address\r\n    apr: uint256 # calculated from the interest to 365 days, in bps\r\n    amount: uint256\r\n    duration: uint256\r\n    collaterals: DynArray[Collateral, 100]\r\n    genesisToken: uint256\r\n\r\nevent LoanPayment:\r\n    walletIndexed: indexed(address)\r\n    wallet: address\r\n    loanId: uint256\r\n    principal: uint256\r\n    interestAmount: uint256\r\n    erc20TokenContract: address\r\n\r\nevent LoanPaid:\r\n    walletIndexed: indexed(address)\r\n    wallet: address\r\n    loanId: uint256\r\n    erc20TokenContract: address\r\n\r\nevent LoanDefaulted:\r\n    walletIndexed: indexed(address)\r\n    wallet: address\r\n    loanId: uint256\r\n    amount: uint256\r\n    erc20TokenContract: address\r\n\r\nevent PaymentSent:\r\n    walletIndexed: indexed(address)\r\n    wallet: address\r\n    amount: uint256\r\n\r\nevent PaymentReceived:\r\n    walletIndexed: indexed(address)\r\n    wallet: address\r\n    amount: uint256\r\n\r\n\r\n# Global variables\r\n\r\nowner: public(address)\r\nadmin: public(address)\r\nproposedOwner: public(address)\r\n\r\ninterestAccrualPeriod: public(uint256)\r\n\r\nisAcceptingLoans: public(bool)\r\nisDeprecated: public(bool)\r\n\r\nloansCoreContract: public(address)\r\nlendingPoolPeripheralContract: public(address)\r\ncollateralVaultPeripheralContract: public(address)\r\nliquidationsPeripheralContract: public(address)\r\nliquidityControlsContract: public(address)\r\ngenesisContract: public(address)\r\nisPayable: public(bool)\r\n\r\ncollectionsAmount: HashMap[address, uint256] # aux variable\r\n\r\nZHARTA_DOMAIN_NAME: constant(String[6]) = \"Zharta\"\r\nZHARTA_DOMAIN_VERSION: constant(String[1]) = \"1\"\r\n\r\nCOLLATERAL_TYPE_DEF: constant(String[66]) = \"Collateral(address contractAddress,uint256 tokenId,uint256 amount)\"\r\nRESERVE_TYPE_DEF: constant(String[269]) = \"ReserveMessageContent(address borrower,uint256 amount,uint256 interest,uint256 maturity,Collateral[] collaterals,\" \\\r\n                                          \"bool delegations,uint256 deadline,uint256 nonce,uint256 genesisToken)\" \\\r\n                                          \"Collateral(address contractAddress,uint256 tokenId,uint256 amount)\"\r\nDOMAIN_TYPE_HASH: constant(bytes32) = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\")\r\nCOLLATERAL_TYPE_HASH: constant(bytes32) = keccak256(COLLATERAL_TYPE_DEF)\r\nRESERVE_TYPE_HASH: constant(bytes32) = keccak256(RESERVE_TYPE_DEF)\r\n\r\nreserve_message_typehash: bytes32\r\nreserve_sig_domain_separator: bytes32\r\n\r\nMINIMUM_INTEREST_PERIOD: constant(uint256) = 604800  # 7 days\r\n\r\n\r\n@external\r\ndef __init__(\r\n    _interestAccrualPeriod: uint256,\r\n    _loansCoreContract: address,\r\n    _lendingPoolPeripheralContract: address,\r\n    _collateralVaultPeripheralContract: address,\r\n    _genesisContract: address,\r\n    _isPayable: bool\r\n):\r\n    assert _loansCoreContract != empty(address), \"address is the zero address\"\r\n    assert _lendingPoolPeripheralContract != empty(address), \"address is the zero address\"\r\n    assert _collateralVaultPeripheralContract != empty(address), \"address is the zero address\"\r\n    assert _genesisContract != empty(address), \"address is the zero address\"\r\n\r\n    self.owner = msg.sender\r\n    self.admin = msg.sender\r\n    self.interestAccrualPeriod = _interestAccrualPeriod\r\n    self.loansCoreContract = _loansCoreContract\r\n    self.lendingPoolPeripheralContract = _lendingPoolPeripheralContract\r\n    self.collateralVaultPeripheralContract = _collateralVaultPeripheralContract\r\n    self.genesisContract = _genesisContract\r\n    self.isAcceptingLoans = True\r\n    self.isPayable = _isPayable\r\n\r\n    self.reserve_sig_domain_separator = keccak256(\r\n        _abi_encode(\r\n            DOMAIN_TYPE_HASH,\r\n            keccak256(ZHARTA_DOMAIN_NAME),\r\n            keccak256(ZHARTA_DOMAIN_VERSION),\r\n            chain.id,\r\n            self\r\n        )\r\n    )\r\n\r\n\r\n@pure\r\n@internal\r\ndef _collateralsAmounts(_collaterals: DynArray[Collateral, 100]) -> uint256:\r\n    sumAmount: uint256 = 0\r\n    for collateral in _collaterals:\r\n        sumAmount += collateral.amount\r\n\r\n    return sumAmount\r\n\r\n\r\n@internal\r\ndef _withinCollectionShareLimit(_collaterals: DynArray[Collateral, 100]) -> bool:\r\n    collections: DynArray[address, 100] = empty(DynArray[address, 100])\r\n\r\n    for collateral in _collaterals:\r\n        if collateral.contractAddress not in collections:\r\n            collections.append(collateral.contractAddress)\r\n            self.collectionsAmount[collateral.contractAddress] = 0\r\n\r\n        self.collectionsAmount[collateral.contractAddress] += collateral.amount\r\n\r\n    for collection in collections:\r\n        result: bool = ILiquidityControls(self.liquidityControlsContract).withinCollectionShareLimit(\r\n            self.collectionsAmount[collection],\r\n            collection,\r\n            self.loansCoreContract,\r\n            ILendingPoolPeripheral(self.lendingPoolPeripheralContract).lendingPoolCoreContract()\r\n        )\r\n        if not result:\r\n            return False\r\n\r\n    return True\r\n\r\n@pure\r\n@internal\r\ndef _loanPayableAmount(\r\n    _amount: uint256,\r\n    _paidAmount: uint256,\r\n    _interest: uint256,\r\n    _maxLoanDuration: uint256,\r\n    _timePassed: uint256,\r\n    _interestAccrualPeriod: uint256\r\n) -> uint256:\r\n    return (_amount - _paidAmount) * (10000 * _maxLoanDuration + _interest * (max(_timePassed + _interestAccrualPeriod, MINIMUM_INTEREST_PERIOD))) / (10000 * _maxLoanDuration)\r\n\r\n\r\n@pure\r\n@internal\r\ndef _computePeriodPassedInSeconds(_recentTimestamp: uint256, _olderTimestamp: uint256, _period: uint256) -> uint256:\r\n    return (_recentTimestamp - _olderTimestamp) - ((_recentTimestamp - _olderTimestamp) % _period)\r\n\r\n\r\n@internal\r\ndef _recoverReserveSigner(\r\n    _borrower: address,\r\n    _amount: uint256,\r\n    _interest: uint256,\r\n    _maturity: uint256,\r\n    _collaterals: DynArray[Collateral, 100],\r\n    _delegations: bool,\r\n    _deadline: uint256,\r\n    _nonce: uint256,\r\n    _genesisToken: uint256,\r\n    _v: uint256,\r\n    _r: uint256,\r\n    _s: uint256\r\n) -> address:\r\n    \"\"\"\r\n        @notice recovers the sender address of the signed reserve function call\r\n    \"\"\"\r\n    collaterals_data_hash: DynArray[bytes32, 100] = []\r\n    for c in _collaterals:\r\n        collaterals_data_hash.append(keccak256(_abi_encode(COLLATERAL_TYPE_HASH, c.contractAddress, c.tokenId, c.amount)))\r\n\r\n    data_hash: bytes32 = keccak256(_abi_encode(\r\n                RESERVE_TYPE_HASH,\r\n                _borrower,\r\n                _amount,\r\n                _interest,\r\n                _maturity,\r\n                keccak256(slice(_abi_encode(collaterals_data_hash), 32*2, 32*len(_collaterals))),\r\n                _delegations,\r\n                _deadline,\r\n                _nonce,\r\n                _genesisToken\r\n                ))\r\n\r\n    sig_hash: bytes32 = keccak256(concat(convert(\"\\x19\\x01\", Bytes[2]), _abi_encode(self.reserve_sig_domain_separator, data_hash)))\r\n    signer: address = ecrecover(sig_hash, _v, _r, _s)\r\n\r\n    return signer\r\n\r\n\r\n@internal\r\ndef _reserve(\r\n    _amount: uint256,\r\n    _interest: uint256,\r\n    _maturity: uint256,\r\n    _collaterals: DynArray[Collateral, 100],\r\n    _delegations: bool,\r\n    _deadline: uint256,\r\n    _nonce: uint256,\r\n    _genesisToken: uint256,\r\n    _v: uint256,\r\n    _r: uint256,\r\n    _s: uint256\r\n) -> uint256:\r\n    assert not self.isDeprecated, \"contract is deprecated\"\r\n    assert self.isAcceptingLoans, \"contract is not accepting loans\"\r\n    assert block.timestamp < _maturity, \"maturity is in the past\"\r\n    assert block.timestamp <= _deadline, \"deadline has passed\"\r\n    assert self._collateralsAmounts(_collaterals) == _amount, \"amount in collats != than amount\"\r\n    assert ILendingPoolPeripheral(self.lendingPoolPeripheralContract).maxFundsInvestable() >= _amount, \"insufficient liquidity\"\r\n\r\n    assert ILiquidityControls(self.liquidityControlsContract).withinLoansPoolShareLimit(\r\n        msg.sender,\r\n        _amount,\r\n        self.loansCoreContract,\r\n        self.lendingPoolPeripheralContract\r\n    ), \"max loans pool share surpassed\"\r\n    assert self._withinCollectionShareLimit(_collaterals), \"max collection share surpassed\"\r\n\r\n    assert not ILoansCore(self.loansCoreContract).isLoanCreated(msg.sender, _nonce), \"loan already created\"\r\n    if _nonce > 0:\r\n        assert ILoansCore(self.loansCoreContract).isLoanCreated(msg.sender, _nonce - 1), \"loan is not sequential\"\r\n    \r\n    signer: address = self._recoverReserveSigner(msg.sender, _amount, _interest, _maturity, _collaterals, _delegations, _deadline, _nonce, _genesisToken, _v, _r, _s)\r\n    assert signer == self.admin, \"invalid message signature\"\r\n\r\n    assert _genesisToken == 0 or IERC721(self.genesisContract).ownerOf(_genesisToken) == msg.sender, \"genesisToken not owned\"\r\n\r\n    newLoanId: uint256 = ILoansCore(self.loansCoreContract).addLoan(\r\n        msg.sender,\r\n        _amount,\r\n        _interest,\r\n        _maturity,\r\n        _collaterals\r\n    )\r\n\r\n    for collateral in _collaterals:\r\n        ILoansCore(self.loansCoreContract).addCollateralToLoan(msg.sender, collateral, newLoanId)\r\n        ILoansCore(self.loansCoreContract).updateCollaterals(collateral, False)\r\n\r\n        ICollateralVaultPeripheral(self.collateralVaultPeripheralContract).storeCollateral(\r\n            msg.sender,\r\n            collateral.contractAddress,\r\n            collateral.tokenId,\r\n            ILendingPoolPeripheral(self.lendingPoolPeripheralContract).erc20TokenContract(),\r\n            _delegations\r\n        )\r\n\r\n    log LoanCreated(\r\n        msg.sender,\r\n        msg.sender,\r\n        newLoanId,\r\n        ILendingPoolPeripheral(self.lendingPoolPeripheralContract).erc20TokenContract(),\r\n        _interest * 365 * 86400 / (_maturity - block.timestamp),\r\n        _amount,\r\n        _maturity - block.timestamp,\r\n        _collaterals,\r\n        _genesisToken\r\n    )\r\n\r\n    ILoansCore(self.loansCoreContract).updateLoanStarted(msg.sender, newLoanId)\r\n    ILoansCore(self.loansCoreContract).updateHighestSingleCollateralLoan(msg.sender, newLoanId)\r\n    ILoansCore(self.loansCoreContract).updateHighestCollateralBundleLoan(msg.sender, newLoanId)\r\n\r\n    return newLoanId\r\n\r\n\r\n@external\r\ndef proposeOwner(_address: address):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert _address != empty(address), \"_address it the zero address\"\r\n    assert self.owner != _address, \"proposed owner addr is the owner\"\r\n    assert self.proposedOwner != _address, \"proposed owner addr is the same\"\r\n\r\n    self.proposedOwner = _address\r\n\r\n    log OwnerProposed(\r\n        self.owner,\r\n        _address,\r\n        self.owner,\r\n        _address,\r\n        ILendingPoolPeripheral(self.lendingPoolPeripheralContract).erc20TokenContract()\r\n    )\r\n\r\n\r\n@external\r\ndef claimOwnership():\r\n    assert msg.sender == self.proposedOwner, \"msg.sender is not the proposed\"\r\n\r\n    log OwnershipTransferred(\r\n        self.owner,\r\n        self.proposedOwner,\r\n        self.owner,\r\n        self.proposedOwner,\r\n        ILendingPoolPeripheral(self.lendingPoolPeripheralContract).erc20TokenContract()\r\n    )\r\n\r\n    self.owner = self.proposedOwner\r\n    self.proposedOwner = empty(address)\r\n\r\n\r\n@external\r\ndef changeInterestAccrualPeriod(_value: uint256):\r\n    \"\"\"\r\n    @notice Sets the interest accrual period, considered on loan payment calculations\r\n    @dev Logs `InterestAccrualPeriodChanged` event\r\n    @param _value The interest accrual period in seconds\r\n    \"\"\"\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert _value != self.interestAccrualPeriod, \"_value is the same\"\r\n\r\n    log InterestAccrualPeriodChanged(\r\n        ILendingPoolPeripheral(self.lendingPoolPeripheralContract).erc20TokenContract(),\r\n        self.interestAccrualPeriod,\r\n        _value,\r\n        ILendingPoolPeripheral(self.lendingPoolPeripheralContract).erc20TokenContract()\r\n    )\r\n\r\n    self.interestAccrualPeriod = _value\r\n\r\n\r\n@external\r\ndef setLendingPoolPeripheralAddress(_address: address):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert _address != empty(address), \"_address is the zero address\"\r\n    assert self.lendingPoolPeripheralContract != _address, \"new LPPeriph addr is the same\"\r\n\r\n    log LendingPoolPeripheralAddressSet(\r\n        ILendingPoolPeripheral(self.lendingPoolPeripheralContract).erc20TokenContract(),\r\n        self.lendingPoolPeripheralContract,\r\n        _address,\r\n        ILendingPoolPeripheral(self.lendingPoolPeripheralContract).erc20TokenContract()\r\n    )\r\n\r\n    self.lendingPoolPeripheralContract = _address\r\n\r\n\r\n@external\r\ndef setCollateralVaultPeripheralAddress(_address: address):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert _address != empty(address), \"_address is the zero address\"\r\n    assert self.collateralVaultPeripheralContract != _address, \"new LPCore addr is the same\"\r\n\r\n    log CollateralVaultPeripheralAddressSet(\r\n        ILendingPoolPeripheral(self.lendingPoolPeripheralContract).erc20TokenContract(),\r\n        self.collateralVaultPeripheralContract,\r\n        _address,\r\n        ILendingPoolPeripheral(self.lendingPoolPeripheralContract).erc20TokenContract()\r\n    )\r\n\r\n    self.collateralVaultPeripheralContract = _address\r\n\r\n\r\n@external\r\ndef setLiquidationsPeripheralAddress(_address: address):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert _address != empty(address), \"_address is the zero address\"\r\n    assert self.liquidationsPeripheralContract != _address, \"new LPCore addr is the same\"\r\n\r\n    log LiquidationsPeripheralAddressSet(\r\n        ILendingPoolPeripheral(self.lendingPoolPeripheralContract).erc20TokenContract(),\r\n        self.liquidationsPeripheralContract,\r\n        _address,\r\n        ILendingPoolPeripheral(self.lendingPoolPeripheralContract).erc20TokenContract()\r\n    )\r\n\r\n    self.liquidationsPeripheralContract = _address\r\n\r\n\r\n@external\r\ndef setLiquidityControlsAddress(_address: address):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert _address != empty(address), \"_address is the zero address\"\r\n    assert _address != self.liquidityControlsContract, \"new value is the same\"\r\n\r\n    log LiquidityControlsAddressSet(\r\n        ILendingPoolPeripheral(self.lendingPoolPeripheralContract).erc20TokenContract(),\r\n        self.liquidityControlsContract,\r\n        _address,\r\n        ILendingPoolPeripheral(self.lendingPoolPeripheralContract).erc20TokenContract()\r\n    )\r\n\r\n    self.liquidityControlsContract = _address\r\n\r\n\r\n@external\r\ndef changeContractStatus(_flag: bool):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert self.isAcceptingLoans != _flag, \"new contract status is the same\"\r\n\r\n    self.isAcceptingLoans = _flag\r\n\r\n    log ContractStatusChanged(\r\n        ILendingPoolPeripheral(self.lendingPoolPeripheralContract).erc20TokenContract(),\r\n        _flag,\r\n        ILendingPoolPeripheral(self.lendingPoolPeripheralContract).erc20TokenContract()\r\n    )\r\n\r\n\r\n@external\r\ndef deprecate():\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert not self.isDeprecated, \"contract is already deprecated\"\r\n\r\n    self.isDeprecated = True\r\n    self.isAcceptingLoans = False\r\n\r\n    log ContractDeprecated(\r\n        ILendingPoolPeripheral(self.lendingPoolPeripheralContract).erc20TokenContract(),\r\n        ILendingPoolPeripheral(self.lendingPoolPeripheralContract).erc20TokenContract()\r\n    )\r\n\r\n\r\n@view\r\n@external\r\ndef erc20TokenSymbol() -> String[100]:\r\n    return IERC20Symbol(ILendingPoolPeripheral(self.lendingPoolPeripheralContract).erc20TokenContract()).symbol()\r\n\r\n\r\n@view\r\n@external\r\ndef getLoanPayableAmount(_borrower: address, _loanId: uint256, _timestamp: uint256) -> uint256:\r\n    loan: Loan = ILoansCore(self.loansCoreContract).getLoan(_borrower, _loanId)\r\n\r\n    if loan.paid:\r\n        return 0\r\n\r\n    if loan.startTime > _timestamp:\r\n        return max_value(uint256)\r\n\r\n    if loan.started:\r\n        timePassed: uint256 = self._computePeriodPassedInSeconds(\r\n            _timestamp,\r\n            loan.startTime,\r\n            self.interestAccrualPeriod\r\n        )\r\n        return self._loanPayableAmount(\r\n            loan.amount,\r\n            loan.paidPrincipal,\r\n            loan.interest,\r\n            loan.maturity - loan.startTime,\r\n            timePassed,\r\n            self.interestAccrualPeriod\r\n        )\r\n\r\n    return max_value(uint256)\r\n\r\n\r\n@external\r\ndef reserve(\r\n    _amount: uint256,\r\n    _interest: uint256,\r\n    _maturity: uint256,\r\n    _collaterals: DynArray[Collateral, 100],\r\n    _delegations: bool,\r\n    _deadline: uint256,\r\n    _nonce: uint256,\r\n    _genesisToken: uint256,\r\n    _v: uint256,\r\n    _r: uint256,\r\n    _s: uint256\r\n) -> uint256:\r\n    \"\"\"\r\n    @notice Creates a new loan with the defined amount, interest rate and collateral. The message must be signed by the contract admin.\r\n    @dev Logs `LoanCreated` event. The last 3 parameters must match a signature by the contract admin of the implicit message consisting of the remaining parameters, in order for the loan to be created\r\n    @param _amount The loan amount in wei\r\n    @param _interest The interest rate in bps (1/1000) for the loan duration\r\n    @param _maturity The loan maturity in unix epoch format\r\n    @param _collaterals The list of collaterals supporting the loan\r\n    @param _delegations Wether to set the requesting wallet as a delegate for all collaterals\r\n    @param _deadline The deadline of validity for the signed message in unix epoch format\r\n    @param _genesisToken The optional Genesis Pass token used to determine the loan conditions, must be > 0\r\n    @param _v recovery id for public key recover\r\n    @param _r r value in ECDSA signature\r\n    @param _s s value in ECDSA signature\r\n    @return The loan id\r\n    \"\"\"\r\n\r\n    newLoanId: uint256 = self._reserve(_amount, _interest, _maturity, _collaterals, _delegations, _deadline, _nonce, _genesisToken, _v, _r, _s)\r\n\r\n    ILendingPoolPeripheral(self.lendingPoolPeripheralContract).sendFunds(\r\n        msg.sender,\r\n        _amount\r\n    )\r\n\r\n    return newLoanId\r\n\r\n\r\n@external\r\ndef reserveEth(\r\n    _amount: uint256,\r\n    _interest: uint256,\r\n    _maturity: uint256,\r\n    _collaterals: DynArray[Collateral, 100],\r\n    _delegations: bool,\r\n    _deadline: uint256,\r\n    _nonce: uint256,\r\n    _genesisToken: uint256,\r\n    _v: uint256,\r\n    _r: uint256,\r\n    _s: uint256\r\n) -> uint256:\r\n    \"\"\"\r\n    @notice Creates a new loan with the defined amount, interest rate and collateral. The message must be signed by the contract admin.\r\n    @dev Logs `LoanCreated` event. The last 3 parameters must match a signature by the contract admin of the implicit message consisting of the remaining parameters, in order for the loan to be created\r\n    @param _amount The loan amount in wei\r\n    @param _interest The interest rate in bps (1/1000) for the loan duration\r\n    @param _maturity The loan maturity in unix epoch format\r\n    @param _collaterals The list of collaterals supporting the loan\r\n    @param _delegations Wether to set the requesting wallet as a delegate for all collaterals\r\n    @param _deadline The deadline of validity for the signed message in unix epoch format\r\n    @param _genesisToken The optional Genesis Pass token used to determine the loan conditions, must be > 0\r\n    @param _v recovery id for public key recover\r\n    @param _r r value in ECDSA signature\r\n    @param _s s value in ECDSA signature\r\n    @return The loan id\r\n    \"\"\"\r\n\r\n    newLoanId: uint256 = self._reserve(_amount, _interest, _maturity, _collaterals, _delegations, _deadline, _nonce, _genesisToken, _v, _r, _s)\r\n\r\n    ILendingPoolPeripheral(self.lendingPoolPeripheralContract).sendFundsEth(\r\n        msg.sender,\r\n        _amount\r\n    )\r\n\r\n    return newLoanId\r\n\r\n\r\n@payable\r\n@external\r\ndef pay(_loanId: uint256):\r\n\r\n    \"\"\"\r\n    @notice Closes an active loan by paying the full amount\r\n    @dev Logs the `LoanPayment` and `LoanPaid` events. The associated `LendingPoolCore` contract must be approved for the payment amount\r\n    @param _loanId The id of the loan to settle\r\n    \"\"\"\r\n\r\n    receivedAmount: uint256 = msg.value\r\n    if not self.isPayable:\r\n        assert receivedAmount == 0, \"no ETH allowed for this loan\"\r\n\r\n    assert ILoansCore(self.loansCoreContract).isLoanStarted(msg.sender, _loanId), \"loan not found\"\r\n\r\n    loan: Loan = ILoansCore(self.loansCoreContract).getLoan(msg.sender, _loanId)\r\n    assert block.timestamp <= loan.maturity, \"loan maturity reached\"\r\n    assert not loan.paid, \"loan already paid\"\r\n\r\n    # compute days passed in seconds\r\n    timePassed: uint256 = self._computePeriodPassedInSeconds(\r\n        block.timestamp,\r\n        loan.startTime,\r\n        self.interestAccrualPeriod\r\n    )\r\n\r\n    # pro-rata computation of max amount payable based on actual loan duration in days\r\n    paymentAmount: uint256 = self._loanPayableAmount(\r\n        loan.amount,\r\n        loan.paidPrincipal,\r\n        loan.interest,\r\n        loan.maturity - loan.startTime,\r\n        timePassed,\r\n        self.interestAccrualPeriod\r\n    )\r\n\r\n    erc20TokenContract: address = ILendingPoolPeripheral(self.lendingPoolPeripheralContract).erc20TokenContract()\r\n    excessAmount: uint256 = 0\r\n\r\n    if receivedAmount > 0:\r\n        assert receivedAmount >= paymentAmount, \"insufficient value received\"\r\n        excessAmount = receivedAmount - paymentAmount\r\n        log PaymentReceived(msg.sender, msg.sender, receivedAmount)\r\n    else:\r\n        assert IERC20(erc20TokenContract).balanceOf(msg.sender) >= paymentAmount, \"insufficient balance\"\r\n        assert IERC20(erc20TokenContract).allowance(\r\n                msg.sender,\r\n                ILendingPoolPeripheral(self.lendingPoolPeripheralContract).lendingPoolCoreContract()\r\n        ) >= paymentAmount, \"insufficient allowance\"\r\n\r\n    paidInterestAmount: uint256 = paymentAmount - loan.amount\r\n\r\n    ILoansCore(self.loansCoreContract).updateLoanPaidAmount(msg.sender, _loanId, loan.amount, paidInterestAmount)\r\n    ILoansCore(self.loansCoreContract).updatePaidLoan(msg.sender, _loanId)\r\n    ILoansCore(self.loansCoreContract).updateHighestRepayment(msg.sender, _loanId)\r\n\r\n    if receivedAmount > 0:\r\n        ILendingPoolPeripheral(self.lendingPoolPeripheralContract).receiveFundsEth(msg.sender, loan.amount, paidInterestAmount, value=paymentAmount)\r\n        log PaymentSent(self.lendingPoolPeripheralContract, self.lendingPoolPeripheralContract, paymentAmount)\r\n    else:\r\n        ILendingPoolPeripheral(self.lendingPoolPeripheralContract).receiveFunds(msg.sender, loan.amount, paidInterestAmount)\r\n\r\n    for collateral in loan.collaterals:\r\n        ILoansCore(self.loansCoreContract).removeCollateralFromLoan(msg.sender, collateral, _loanId)\r\n        ILoansCore(self.loansCoreContract).updateCollaterals(collateral, True)\r\n\r\n        ICollateralVaultPeripheral(self.collateralVaultPeripheralContract).transferCollateralFromLoan(\r\n            msg.sender,\r\n            collateral.contractAddress,\r\n            collateral.tokenId,\r\n            erc20TokenContract\r\n        )\r\n\r\n    if excessAmount > 0:\r\n        send(msg.sender, excessAmount)\r\n        log PaymentSent(msg.sender, msg.sender,excessAmount)\r\n\r\n    log LoanPayment(\r\n        msg.sender,\r\n        msg.sender,\r\n        _loanId,\r\n        loan.amount,\r\n        paidInterestAmount,\r\n        erc20TokenContract\r\n    )\r\n    \r\n    log LoanPaid(\r\n        msg.sender,\r\n        msg.sender,\r\n        _loanId,\r\n        erc20TokenContract\r\n    )\r\n\r\n\r\n@external\r\ndef settleDefault(_borrower: address, _loanId: uint256):\r\n    \"\"\"\r\n    @notice Settles an active loan as defaulted\r\n    @dev Logs the `LoanDefaulted` event, removes the collaterals from the loan and creates a liquidation\r\n    @param _borrower The wallet address of the borrower\r\n    @param _loanId The id of the loan to settle\r\n    \"\"\"\r\n    assert msg.sender == self.admin, \"msg.sender is not the admin\"\r\n    assert ILoansCore(self.loansCoreContract).isLoanStarted(_borrower, _loanId), \"loan not found\"\r\n    \r\n    loan: Loan = ILoansCore(self.loansCoreContract).getLoan(_borrower, _loanId)\r\n    assert not loan.paid, \"loan already paid\"\r\n    assert block.timestamp > loan.maturity, \"loan is within maturity period\"\r\n    assert self.liquidationsPeripheralContract != empty(address), \"BNPeriph is the zero address\"\r\n\r\n    ILoansCore(self.loansCoreContract).updateDefaultedLoan(_borrower, _loanId)\r\n    ILoansCore(self.loansCoreContract).updateHighestDefaultedLoan(_borrower, _loanId)\r\n\r\n    for collateral in loan.collaterals:\r\n        ILoansCore(self.loansCoreContract).removeCollateralFromLoan(_borrower, collateral, _loanId)\r\n        ILoansCore(self.loansCoreContract).updateCollaterals(collateral, True)\r\n\r\n    ILiquidationsPeripheral(self.liquidationsPeripheralContract).addLiquidation(\r\n        _borrower,\r\n        _loanId,\r\n        ILendingPoolPeripheral(self.lendingPoolPeripheralContract).erc20TokenContract()\r\n    )\r\n\r\n    log LoanDefaulted(\r\n        _borrower,\r\n        _borrower,\r\n        _loanId,\r\n        loan.amount,\r\n        ILendingPoolPeripheral(self.lendingPoolPeripheralContract).erc20TokenContract()\r\n    )\r\n\r\n\r\n@external\r\ndef setDelegation(_loanId: uint256, _collateralAddress: address, _tokenId: uint256, _value: bool):\r\n\r\n    \"\"\"\r\n    @notice Sets / unsets a delegation for some collateral of a given loan. Only available to unpaid loans until maturity is reached\r\n    @param _loanId The id of the loan to settle\r\n    @param _collateralAddress The contract address of the collateral\r\n    @param _tokenId The token id of the collateral\r\n    @param _value Wether to set or unset the token delegation\r\n    \"\"\"\r\n\r\n    loan: Loan = ILoansCore(self.loansCoreContract).getLoan(msg.sender, _loanId)\r\n    assert loan.amount > 0, \"invalid loan id\"\r\n    assert block.timestamp <= loan.maturity, \"loan maturity reached\"\r\n    assert not loan.paid, \"loan already paid\"\r\n    \r\n    for collateral in loan.collaterals:\r\n        if collateral.contractAddress ==_collateralAddress and collateral.tokenId == _tokenId:\r\n            ICollateralVaultPeripheral(self.collateralVaultPeripheralContract).setCollateralDelegation(\r\n                msg.sender,\r\n                _collateralAddress,\r\n                _tokenId,\r\n                ILendingPoolPeripheral(self.lendingPoolPeripheralContract).erc20TokenContract(),\r\n                _value\r\n            )","ABI":"[{\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"ownerIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"proposedOwnerIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"owner\",\"type\":\"address\",\"indexed\":false},{\"name\":\"proposedOwner\",\"type\":\"address\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"OwnerProposed\",\"inputs\":[{\"name\":\"ownerIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"proposedOwnerIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"owner\",\"type\":\"address\",\"indexed\":false},{\"name\":\"proposedOwner\",\"type\":\"address\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"InterestAccrualPeriodChanged\",\"inputs\":[{\"name\":\"erc20TokenContractIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"currentValue\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"newValue\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"LendingPoolPeripheralAddressSet\",\"inputs\":[{\"name\":\"erc20TokenContractIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"currentValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"newValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"CollateralVaultPeripheralAddressSet\",\"inputs\":[{\"name\":\"erc20TokenContractIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"currentValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"newValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"LiquidationsPeripheralAddressSet\",\"inputs\":[{\"name\":\"erc20TokenContractIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"currentValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"newValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"LiquidityControlsAddressSet\",\"inputs\":[{\"name\":\"erc20TokenContractIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"currentValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"newValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ContractStatusChanged\",\"inputs\":[{\"name\":\"erc20TokenContractIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"bool\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ContractDeprecated\",\"inputs\":[{\"name\":\"erc20TokenContractIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"LoanCreated\",\"inputs\":[{\"name\":\"walletIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"wallet\",\"type\":\"address\",\"indexed\":false},{\"name\":\"loanId\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false},{\"name\":\"apr\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"duration\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"collaterals\",\"type\":\"tuple[]\",\"components\":[{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false},{\"name\":\"genesisToken\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"LoanPayment\",\"inputs\":[{\"name\":\"walletIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"wallet\",\"type\":\"address\",\"indexed\":false},{\"name\":\"loanId\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"principal\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"interestAmount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"LoanPaid\",\"inputs\":[{\"name\":\"walletIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"wallet\",\"type\":\"address\",\"indexed\":false},{\"name\":\"loanId\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"LoanDefaulted\",\"inputs\":[{\"name\":\"walletIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"wallet\",\"type\":\"address\",\"indexed\":false},{\"name\":\"loanId\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"PaymentSent\",\"inputs\":[{\"name\":\"walletIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"wallet\",\"type\":\"address\",\"indexed\":false},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"PaymentReceived\",\"inputs\":[{\"name\":\"walletIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"wallet\",\"type\":\"address\",\"indexed\":false},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_interestAccrualPeriod\",\"type\":\"uint256\"},{\"name\":\"_loansCoreContract\",\"type\":\"address\"},{\"name\":\"_lendingPoolPeripheralContract\",\"type\":\"address\"},{\"name\":\"_collateralVaultPeripheralContract\",\"type\":\"address\"},{\"name\":\"_genesisContract\",\"type\":\"address\"},{\"name\":\"_isPayable\",\"type\":\"bool\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"proposeOwner\",\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claimOwnership\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"changeInterestAccrualPeriod\",\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setLendingPoolPeripheralAddress\",\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setCollateralVaultPeripheralAddress\",\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setLiquidationsPeripheralAddress\",\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setLiquidityControlsAddress\",\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"changeContractStatus\",\"inputs\":[{\"name\":\"_flag\",\"type\":\"bool\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deprecate\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"erc20TokenSymbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getLoanPayableAmount\",\"inputs\":[{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_loanId\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"reserve\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_interest\",\"type\":\"uint256\"},{\"name\":\"_maturity\",\"type\":\"uint256\"},{\"name\":\"_collaterals\",\"type\":\"tuple[]\",\"components\":[{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}]},{\"name\":\"_delegations\",\"type\":\"bool\"},{\"name\":\"_deadline\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_genesisToken\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint256\"},{\"name\":\"_r\",\"type\":\"uint256\"},{\"name\":\"_s\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"reserveEth\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_interest\",\"type\":\"uint256\"},{\"name\":\"_maturity\",\"type\":\"uint256\"},{\"name\":\"_collaterals\",\"type\":\"tuple[]\",\"components\":[{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}]},{\"name\":\"_delegations\",\"type\":\"bool\"},{\"name\":\"_deadline\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_genesisToken\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint256\"},{\"name\":\"_r\",\"type\":\"uint256\"},{\"name\":\"_s\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"pay\",\"inputs\":[{\"name\":\"_loanId\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"settleDefault\",\"inputs\":[{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_loanId\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setDelegation\",\"inputs\":[{\"name\":\"_loanId\",\"type\":\"uint256\"},{\"name\":\"_collateralAddress\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"bool\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admin\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"proposedOwner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"interestAccrualPeriod\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isAcceptingLoans\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isDeprecated\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"loansCoreContract\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lendingPoolPeripheralContract\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"collateralVaultPeripheralContract\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"liquidationsPeripheralContract\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"liquidityControlsContract\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"genesisContract\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isPayable\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]}]","ContractName":"Loans","CompilerVersion":"vyper:0.3.9","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000015180000000000000000000000000e6c79bb163c90fbe4b5263572c88b1f576c5189c000000000000000000000000a5df70a7b426f077e24b6365237fc9ccfde5ea10000000000000000000000000c22b024dbae8701a0bf2670767b11fa007da5f85000000000000000000000000ca54733a772c83096e40f644c9286c9779191e500000000000000000000000000000000000000000000000000000000000000001","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}