{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.3.10\r\n\"\"\"\r\n@title CryptoFromPool\r\n@notice Price oracle for pools which contain cryptos and crvUSD. This is NOT suitable for minted crvUSD - only for lent out\r\n@author Curve.Fi\r\n@license MIT\r\n\"\"\"\r\ninterface Pool:\r\n    def price_oracle(i: uint256 = 0) -> uint256: view  # Universal method!\r\n\r\n\r\nPOOL: public(immutable(Pool))\r\nBORROWED_IX: public(immutable(uint256))\r\nCOLLATERAL_IX: public(immutable(uint256))\r\nN_COINS: public(immutable(uint256))\r\nNO_ARGUMENT: public(immutable(bool))\r\n\r\n\r\n@external\r\ndef __init__(\r\n        pool: Pool,\r\n        N: uint256,\r\n        borrowed_ix: uint256,\r\n        collateral_ix: uint256\r\n    ):\r\n    assert borrowed_ix != collateral_ix\r\n    assert borrowed_ix < N\r\n    assert collateral_ix < N\r\n    POOL = pool\r\n    N_COINS = N\r\n    BORROWED_IX = borrowed_ix\r\n    COLLATERAL_IX = collateral_ix\r\n\r\n    no_argument: bool = False\r\n    if N == 2:\r\n        success: bool = False\r\n        res: Bytes[32] = empty(Bytes[32])\r\n        success, res = raw_call(\r\n            pool.address,\r\n            _abi_encode(empty(uint256), method_id=method_id(\"price_oracle(uint256)\")),\r\n            max_outsize=32, is_static_call=True, revert_on_failure=False)\r\n        if not success:\r\n            no_argument = True\r\n    NO_ARGUMENT = no_argument\r\n\r\n\r\n@internal\r\n@view\r\ndef _raw_price() -> uint256:\r\n    p_borrowed: uint256 = 10**18\r\n    p_collateral: uint256 = 10**18\r\n\r\n    if NO_ARGUMENT:\r\n        p: uint256 = POOL.price_oracle()\r\n        if COLLATERAL_IX > 0:\r\n            p_collateral = p\r\n        else:\r\n            p_borrowed = p\r\n\r\n    else:\r\n        if BORROWED_IX > 0:\r\n            p_borrowed = POOL.price_oracle(BORROWED_IX - 1)\r\n        if COLLATERAL_IX > 0:\r\n            p_collateral = POOL.price_oracle(COLLATERAL_IX - 1)\r\n\r\n    return p_collateral * 10**18 / p_borrowed\r\n\r\n\r\n@external\r\n@view\r\ndef price() -> uint256:\r\n    return self._raw_price()\r\n\r\n\r\n@external\r\ndef price_w() -> uint256:\r\n    return self._raw_price()","ABI":"[{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"pool\",\"type\":\"address\"},{\"name\":\"N\",\"type\":\"uint256\"},{\"name\":\"borrowed_ix\",\"type\":\"uint256\"},{\"name\":\"collateral_ix\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"price\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"price_w\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"POOL\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"BORROWED_IX\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"COLLATERAL_IX\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"N_COINS\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"NO_ARGUMENT\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]}]","ContractName":"CryptoFromPool","CompilerVersion":"vyper:0.3.10","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"0000000000000000000000004ebdf703948ddcea3b11f675b4d1fba9d2414a14000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}