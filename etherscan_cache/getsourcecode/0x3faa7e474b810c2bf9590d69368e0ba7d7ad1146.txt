{"status":"1","message":"OK","result":[{"SourceCode":"#pragma version ^0.3.0\r\n\r\nMAX_INTERVALS: constant(uint256) = 128\r\nMAX_PROOF_LENGTH: constant(uint256) = 32\r\nMAX_MINIPOOLS: constant(uint256) = 1024\r\n\r\ninterface RPLInterface:\r\n  def balanceOf(_who: address) -> uint256: view\r\n  def transfer(_to: address, _value: uint256) -> bool: nonpayable\r\n  def transferFrom(_from: address, _to: address, _value: uint256) -> bool: nonpayable\r\n  def approve(_spender: address, _value: uint256) -> bool: nonpayable\r\n\r\ninterface RocketStorageInterface:\r\n  def getAddress(_key: bytes32) -> address: view\r\n  def getNodeWithdrawalAddress(_nodeAddress: address) -> address: view\r\n  def confirmWithdrawalAddress(_nodeAddress: address): nonpayable\r\n  def setWithdrawalAddress(_nodeAddress: address, _newWithdrawalAddress: address, _confirm: bool): nonpayable\r\n\r\ninterface RocketNodeStakingInterface:\r\n  def getNodeRPLStake(_nodeAddress: address) -> uint256: view\r\n  def stakeRPLFor(_nodeAddress: address, _amount: uint256): nonpayable\r\n\r\ninterface RocketNodeDistributorFactoryInterface:\r\n  def getProxyAddress(_nodeAddress: address) -> address: view\r\n\r\ninterface RocketNodeDistributorInterface:\r\n  def distribute(): nonpayable\r\n\r\ninterface RocketMerkleDistributorInterface:\r\n  def claim(_nodeAddress: address,\r\n            _rewardIndex: DynArray[uint256, MAX_INTERVALS],\r\n            _amountRPL: DynArray[uint256, MAX_INTERVALS],\r\n            _amountETH: DynArray[uint256, MAX_INTERVALS],\r\n            _merkleProof: DynArray[DynArray[bytes32, MAX_PROOF_LENGTH], MAX_INTERVALS]): nonpayable\r\n\r\ninterface MinipoolInterface:\r\n  def distributeBalance(_rewardsOnly: bool): nonpayable\r\n\r\ninterface EnsRevRegInterface:\r\n  def setName(_name: String[256]) -> bytes32: nonpayable\r\n\r\ninterface EnsRegInterface:\r\n  def owner(_node: bytes32) -> address: view\r\n\r\nstruct Fee:\r\n  numerator: uint256\r\n  denominator: uint256\r\n\r\ninterface RocketSplitInterface:\r\n  def setup(_nodeAddress: address, _ETHOwner: address, _RPLOwner: address, _ETHFee: Fee, _RPLFee: Fee, _refundRPL: bool): nonpayable\r\n\r\naddrReverseNode: constant(bytes32) = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2\r\nensRegAddress: constant(address) = 0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\r\nrocketNodeStakingKey: constant(bytes32) = keccak256(\"contract.addressrocketNodeStaking\")\r\nrocketTokenRPLKey: constant(bytes32) = keccak256(\"contract.addressrocketTokenRPL\")\r\nrocketMerkleDistributorKey: constant(bytes32) = keccak256(\"contract.addressrocketMerkleDistributorMainnet\")\r\nrocketNodeDistributorFactoryKey: constant(bytes32) = keccak256(\"contract.addressrocketNodeDistributorFactory\")\r\nrocketStorage: immutable(RocketStorageInterface)\r\nRPLToken: immutable(RPLInterface)\r\n\r\nguardian: public(address)\r\nnodeAddress: public(address)\r\ndistributor: public(RocketNodeDistributorInterface)\r\nETHOwner: public(address)\r\nRPLOwner: public(address)\r\npendingWithdrawalAddress: public(address)\r\npendingForce: public(bool)\r\nETHFee: public(Fee)\r\nRPLFee: public(Fee)\r\nRPLPrincipal: public(uint256)\r\nRPLRefundee: public(address)\r\nRPLRefund: public(uint256)\r\n\r\n@external\r\ndef __init__(_rocketStorageAddress: address):\r\n  rocketStorage = RocketStorageInterface(_rocketStorageAddress)\r\n  RPLToken = RPLInterface(rocketStorage.getAddress(rocketTokenRPLKey))\r\n  self.guardian = msg.sender\r\n\r\nallowPaymentsFrom: address\r\n@external\r\n@payable\r\ndef __default__():\r\n  assert msg.sender == self.allowPaymentsFrom, \"external payment not allowed\"\r\n\r\nevent DeployRocketSplit:\r\n  self: address\r\n  node: indexed(address)\r\n  ETHOwner: indexed(address)\r\n  RPLOwner: indexed(address)\r\n  ETHFee: Fee\r\n  RPLFee: Fee\r\n  RPLRefund: bool\r\n\r\n@external\r\ndef deploy(_nodeAddress: address,\r\n           _ETHOwner: address, _RPLOwner: address,\r\n           _ETHFee: Fee, _RPLFee: Fee,\r\n           _refundRPL: bool) -> address:\r\n  assert self.guardian != empty(address), \"proxy\"\r\n  contract: RocketSplitInterface = RocketSplitInterface(create_minimal_proxy_to(self))\r\n  contract.setup(_nodeAddress, _ETHOwner, _RPLOwner, _ETHFee, _RPLFee, _refundRPL)\r\n  log DeployRocketSplit(contract.address, _nodeAddress, _ETHOwner, _RPLOwner, _ETHFee, _RPLFee, _refundRPL)\r\n  return contract.address\r\n\r\n@external\r\ndef setup(_nodeAddress: address,\r\n          _ETHOwner: address, _RPLOwner: address,\r\n          _ETHFee: Fee, _RPLFee: Fee,\r\n          _refundRPL: bool):\r\n  assert self.guardian == empty(address), \"auth\"\r\n  assert _ETHFee.numerator <= _ETHFee.denominator, \"fee ETH\"\r\n  assert _RPLFee.numerator <= _RPLFee.denominator, \"fee RPL\"\r\n  self.guardian = msg.sender\r\n  self.nodeAddress = _nodeAddress\r\n  self.distributor = RocketNodeDistributorInterface(\r\n      RocketNodeDistributorFactoryInterface(\r\n        rocketStorage.getAddress(rocketNodeDistributorFactoryKey)\r\n      ).getProxyAddress(_nodeAddress)\r\n    )\r\n  self.ETHOwner = _ETHOwner\r\n  self.RPLOwner = _RPLOwner\r\n  self.ETHFee = _ETHFee\r\n  self.RPLFee = _RPLFee\r\n  if _refundRPL:\r\n    self.RPLRefundee = rocketStorage.getNodeWithdrawalAddress(_nodeAddress)\r\n    self.RPLRefund = self._getRocketNodeStaking().getNodeRPLStake(_nodeAddress)\r\n\r\n@internal\r\ndef _getRocketNodeStaking() -> RocketNodeStakingInterface:\r\n  rocketNodeStakingAddress: address = rocketStorage.getAddress(rocketNodeStakingKey)\r\n  return RocketNodeStakingInterface(rocketNodeStakingAddress)\r\n\r\n@external\r\ndef stakeRPL(_amount: uint256):\r\n  assert msg.sender == self.RPLOwner, \"auth\"\r\n  rocketNodeStaking: RocketNodeStakingInterface = self._getRocketNodeStaking()\r\n  assert RPLToken.transferFrom(msg.sender, self, _amount), \"transferFrom\"\r\n  assert RPLToken.approve(rocketNodeStaking.address, _amount), \"approve\"\r\n  rocketNodeStaking.stakeRPLFor(self.nodeAddress, _amount)\r\n  self.RPLPrincipal = rocketNodeStaking.getNodeRPLStake(self.nodeAddress) - self.RPLRefund\r\n\r\n@external\r\ndef withdrawRPL():\r\n  refund: uint256 = self.RPLRefund\r\n  if 0 < refund:\r\n    refundUpToBalance: uint256 = min(RPLToken.balanceOf(self), refund)\r\n    assert RPLToken.transfer(self.RPLRefundee, refundUpToBalance), \"refund\"\r\n    self.RPLRefund -= refundUpToBalance\r\n    if msg.sender == self.RPLRefundee:\r\n      return\r\n  assert msg.sender == self.RPLOwner, \"auth\"\r\n  rocketNodeStaking: RocketNodeStakingInterface = self._getRocketNodeStaking()\r\n  principal: uint256 = self.RPLPrincipal\r\n  remainder: uint256 = rocketNodeStaking.getNodeRPLStake(self.nodeAddress)\r\n  amount: uint256 = principal - remainder\r\n  if 0 < amount:\r\n    assert RPLToken.transfer(msg.sender, amount), \"transfer\"\r\n    self.RPLPrincipal = remainder\r\n\r\n@external\r\ndef withdrawETH():\r\n  assert msg.sender == self.ETHOwner, \"auth\"\r\n  # TODO: withdraw ETH from the node if possible?\r\n  assert self._getRocketNodeStaking().getNodeRPLStake(self.nodeAddress) == 0, \"stake\"\r\n  assert self.RPLRefund == 0, \"refund\"\r\n  assert self.RPLPrincipal == 0, \"principal\"\r\n  send(msg.sender, self.balance, gas=msg.gas)\r\n\r\n@external\r\ndef claimMerkleRewards(\r\n    _rewardIndex: DynArray[uint256, 128], # TODO: MAX_INTERVALS inlined because of https://github.com/vyperlang/vyper/issues/3294\r\n    _amountRPL: DynArray[uint256, 128],\r\n    _amountETH: DynArray[uint256, 128],\r\n    _merkleProof: DynArray[DynArray[bytes32, 32], 128]): # TODO: MAX_PROOF_LENGTH inlined, same reason as above\r\n  assert msg.sender == self.RPLOwner or msg.sender == self.ETHOwner, \"auth\"\r\n  rocketMerkleDistributor: RocketMerkleDistributorInterface = RocketMerkleDistributorInterface(rocketStorage.getAddress(rocketMerkleDistributorKey))\r\n  self.allowPaymentsFrom = rocketMerkleDistributor.address\r\n  rocketMerkleDistributor.claim(self.nodeAddress, _rewardIndex, _amountRPL, _amountETH, _merkleProof)\r\n  self.allowPaymentsFrom = empty(address)\r\n\r\n@external\r\ndef claimDistributorRewards():\r\n  assert msg.sender == self.ETHOwner, \"auth\"\r\n  self.allowPaymentsFrom = self.distributor.address\r\n  self.distributor.distribute()\r\n  self.allowPaymentsFrom = empty(address)\r\n\r\n@external\r\ndef distributeMinipoolBalance(_minipool: DynArray[address, 1024]): # TODO: MAX_MINIPOOLS inlined, as above\r\n  assert msg.sender == self.ETHOwner or msg.sender == self.RPLOwner, \"auth\"\r\n  for minipoolAddress in _minipool:\r\n    minipool: MinipoolInterface = MinipoolInterface(minipoolAddress)\r\n    self.allowPaymentsFrom = minipoolAddress\r\n    minipool.distributeBalance(True)\r\n  self.allowPaymentsFrom = empty(address)\r\n\r\n@internal\r\ndef _calculateFee(_amount: uint256, _fee: Fee) -> uint256:\r\n  if _fee.numerator == 0:\r\n    return 0\r\n  else:\r\n    return (_amount * _fee.numerator) / _fee.denominator\r\n\r\n@external\r\ndef withdrawRewards():\r\n  assert msg.sender == self.RPLOwner, \"auth\"\r\n\r\n  amount: uint256 = RPLToken.balanceOf(self)\r\n  fee: uint256 = self._calculateFee(amount, self.RPLFee)\r\n  if fee != 0:\r\n    assert RPLToken.transfer(self.ETHOwner, fee), \"transfer fee\"\r\n  assert RPLToken.transfer(self.RPLOwner, amount - fee), \"transfer reward\"\r\n\r\n  fee = self._calculateFee(self.balance, self.ETHFee)\r\n  if fee != 0:\r\n    send(self.RPLOwner, fee, gas=msg.gas)\r\n  send(self.ETHOwner, self.balance, gas=msg.gas)\r\n\r\n@external\r\ndef confirmWithdrawalAddress():\r\n  rocketStorage.confirmWithdrawalAddress(self.nodeAddress)\r\n  rocketNodeStaking: RocketNodeStakingInterface = self._getRocketNodeStaking()\r\n  self.RPLPrincipal = rocketNodeStaking.getNodeRPLStake(self.nodeAddress) - self.RPLRefund\r\n\r\n@external\r\ndef ensSetName(_name: String[256]):\r\n  assert msg.sender == self.RPLOwner or msg.sender == self.ETHOwner or msg.sender == self.guardian, \"auth\"\r\n  EnsRevRegInterface(\r\n    EnsRegInterface(ensRegAddress).owner(addrReverseNode)).setName(_name)\r\n\r\n@external\r\ndef onERC1155Received(_operator: address, _from: address, _id: uint256, _value: uint256, _data: Bytes[1]) -> bytes4:\r\n  return convert(4063915617, bytes4)\r\n\r\n@external\r\ndef changeWithdrawalAddress(_newWithdrawalAddress: address, _force: bool):\r\n  assert msg.sender == self.ETHOwner, \"auth\"\r\n  self.pendingWithdrawalAddress = _newWithdrawalAddress\r\n  self.pendingForce = _force\r\n\r\n@external\r\ndef confirmChangeWithdrawalAddress(_newWithdrawalAddress: address, _force: bool):\r\n  assert msg.sender == self.RPLOwner, \"auth\"\r\n  assert _newWithdrawalAddress == self.pendingWithdrawalAddress, \"pendingWithdrawalAddress\"\r\n  assert _force == self.pendingForce, \"pendingForce\"\r\n  rocketStorage.setWithdrawalAddress(self.nodeAddress, _newWithdrawalAddress, _force)","ABI":"[{\"name\":\"DeployRocketSplit\",\"inputs\":[{\"name\":\"self\",\"type\":\"address\",\"indexed\":false},{\"name\":\"node\",\"type\":\"address\",\"indexed\":true},{\"name\":\"ETHOwner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"RPLOwner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"ETHFee\",\"type\":\"tuple\",\"components\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"}],\"indexed\":false},{\"name\":\"RPLFee\",\"type\":\"tuple\",\"components\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"}],\"indexed\":false},{\"name\":\"RPLRefund\",\"type\":\"bool\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_rocketStorageAddress\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deploy\",\"inputs\":[{\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"name\":\"_ETHOwner\",\"type\":\"address\"},{\"name\":\"_RPLOwner\",\"type\":\"address\"},{\"name\":\"_ETHFee\",\"type\":\"tuple\",\"components\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"}]},{\"name\":\"_RPLFee\",\"type\":\"tuple\",\"components\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"}]},{\"name\":\"_refundRPL\",\"type\":\"bool\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setup\",\"inputs\":[{\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"name\":\"_ETHOwner\",\"type\":\"address\"},{\"name\":\"_RPLOwner\",\"type\":\"address\"},{\"name\":\"_ETHFee\",\"type\":\"tuple\",\"components\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"}]},{\"name\":\"_RPLFee\",\"type\":\"tuple\",\"components\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"}]},{\"name\":\"_refundRPL\",\"type\":\"bool\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"stakeRPL\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdrawRPL\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdrawETH\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claimMerkleRewards\",\"inputs\":[{\"name\":\"_rewardIndex\",\"type\":\"uint256[]\"},{\"name\":\"_amountRPL\",\"type\":\"uint256[]\"},{\"name\":\"_amountETH\",\"type\":\"uint256[]\"},{\"name\":\"_merkleProof\",\"type\":\"bytes32[][]\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claimDistributorRewards\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"distributeMinipoolBalance\",\"inputs\":[{\"name\":\"_minipool\",\"type\":\"address[]\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdrawRewards\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"confirmWithdrawalAddress\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"ensSetName\",\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"onERC1155Received\",\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"changeWithdrawalAddress\",\"inputs\":[{\"name\":\"_newWithdrawalAddress\",\"type\":\"address\"},{\"name\":\"_force\",\"type\":\"bool\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"confirmChangeWithdrawalAddress\",\"inputs\":[{\"name\":\"_newWithdrawalAddress\",\"type\":\"address\"},{\"name\":\"_force\",\"type\":\"bool\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"guardian\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"nodeAddress\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"distributor\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"ETHOwner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"RPLOwner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pendingWithdrawalAddress\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pendingForce\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"ETHFee\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"}]}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"RPLFee\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"}]}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"RPLPrincipal\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"RPLRefundee\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"RPLRefund\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.3.10","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"0000000000000000000000001d8f8f00cfa6758d7be78336684788fb0ee0fa46","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":""}]}