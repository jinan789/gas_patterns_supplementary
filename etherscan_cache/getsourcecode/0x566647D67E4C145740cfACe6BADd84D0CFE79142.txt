{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"\r\n    },\r\n    \"contracts/esVIBMinerV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.17;\\n/**\\n * @title esVIBMiner is a stripped down version of Synthetix StakingRewards.sol, to reward esVIB to VUSD minters.\\n * Differences from the original contract,\\n * - Get `totalStaked` from totalSupply() in contract VUSD.\\n * - Get `stakedOf(user)` from getBorrowedOf(user) in contract VUSD.\\n * - When an address borrowed VUSD amount changes, call the refreshReward method to update rewards to be claimed.\\n */\\n\\nimport \\\"./IVibranium.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./IesVIB.sol\\\";\\n\\ninterface Ihelper {\\n    function getCollateralRate(address user) external view returns (uint256);\\n}\\n\\ninterface IvibraniumFund {\\n    function refreshReward(address user) external;\\n}\\n\\ninterface IesVIBBoost {\\n    function getUserBoost(\\n        address user,\\n        uint256 userUpdatedAt,\\n        uint256 finishAt\\n    ) external view returns (uint256);\\n\\n    function getUnlockTime(address user)\\n        external\\n        view\\n        returns (uint256 unlockTime);\\n}\\n\\ncontract esVIBMinerV2 is Ownable {\\n    IVibranium public immutable vibranium;\\n    Ihelper public helper;\\n    IesVIBBoost public esVIBBoost;\\n    IvibraniumFund public vibraniumFund;\\n    address public esVIB;\\n\\n    // Duration of rewards to be paid out (in seconds)\\n    uint256 public duration = 2_592_000;\\n    // Timestamp of when the rewards finish\\n    uint256 public finishAt;\\n    // Minimum of last updated time and reward finish time\\n    uint256 public updatedAt;\\n    // Reward to be paid out per second\\n    uint256 public rewardRate;\\n    // Sum of (reward rate * dt * 1e18 / total supply)\\n    uint256 public rewardPerTokenStored;\\n    // User address => rewardPerTokenStored\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    // User address => rewards to be claimed\\n    mapping(address => uint256) public rewards;\\n    mapping(address => uint256) public userUpdatedAt;\\n    uint256 public extraRate = 100 * 1e18;\\n    // Currently, the official rebase time for Lido is between 12PM to 13PM UTC.\\n    uint256 public lockdownPeriod = 12 hours;\\n\\n    constructor(\\n        address _vibranium,\\n        address _helper,\\n        address _boost,\\n        address _fund\\n    ) {\\n        vibranium = IVibranium(_vibranium);\\n        helper = Ihelper(_helper);\\n        esVIBBoost = IesVIBBoost(_boost);\\n        vibraniumFund = IvibraniumFund(_fund);\\n    }\\n\\n    function setEsVIB(address _esVIB) external onlyOwner {\\n        esVIB = _esVIB;\\n    }\\n\\n    function setExtraRate(uint256 rate) external onlyOwner {\\n        extraRate = rate;\\n    }\\n\\n    function setLockdownPeriod(uint256 _time) external onlyOwner {\\n        lockdownPeriod = _time;\\n    }\\n\\n    function setBoost(address _boost) external onlyOwner {\\n        esVIBBoost = IesVIBBoost(_boost);\\n    }\\n\\n    function setVibraniumFund(address _fund) external onlyOwner {\\n        vibraniumFund = IvibraniumFund(_fund);\\n    }\\n\\n    function setRewardsDuration(uint256 _duration) external onlyOwner {\\n        require(finishAt < block.timestamp, \\\"reward duration not finished\\\");\\n        duration = _duration;\\n    }\\n\\n    function totalStaked() internal view returns (uint256) {\\n        return vibranium.totalSupply();\\n    }\\n\\n    function stakedOf(address user) public view returns (uint256) {\\n        return vibranium.getBorrowedOf(user);\\n    }\\n\\n    modifier updateReward(address _account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        updatedAt = lastTimeRewardApplicable();\\n\\n        if (_account != address(0)) {\\n            rewards[_account] = earned(_account);\\n            userRewardPerTokenPaid[_account] = rewardPerTokenStored;\\n            userUpdatedAt[_account] = block.timestamp;\\n        }\\n\\n        _;\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return _min(finishAt, block.timestamp);\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (totalStaked() == 0) {\\n            return rewardPerTokenStored;\\n        }\\n\\n        return\\n            rewardPerTokenStored +\\n            (rewardRate * (lastTimeRewardApplicable() - updatedAt) * 1e18) /\\n            totalStaked();\\n    }\\n\\n    /**\\n     * @dev To limit the behavior of arbitrageurs who mint a large amount of vUSD after stETH rebase and before vUSD interest distribution to earn extra profit,\\n     * a 1-hour revert during stETH rebase is implemented to eliminate this issue.\\n     * If the user's collateral ratio is below safeCollateralRate, they are not subject to this restriction.\\n     */\\n    function pausedByLido(address _account) public view returns(bool) {\\n        uint256 collateralRate = helper.getCollateralRate(_account);\\n        return (block.timestamp - lockdownPeriod) % 1 days < 1 hours &&\\n            collateralRate >= vibranium.safeCollateralRate();\\n    }\\n\\n    /**\\n     * @notice Update user's claimable reward data and record the timestamp.\\n     */\\n    function refreshReward(address _account) external updateReward(_account) {\\n        if (\\n            pausedByLido(_account)\\n        ) {\\n            revert(\\n                \\\"Minting and repaying functions of vUSD are temporarily disabled during stETH rebasing periods.\\\"\\n            );\\n        }\\n    }\\n\\n    function getBoost(address _account) public view returns (uint256) {\\n        uint256 redemptionBoost;\\n        if (!vibranium.isRedemptionProvider(_account)) {\\n            redemptionBoost = extraRate;\\n        }\\n        return 100 * 1e18 + redemptionBoost + esVIBBoost.getUserBoost(\\n            _account,\\n            userUpdatedAt[_account],\\n            finishAt\\n        );\\n    }\\n\\n    function earned(address _account) public view returns (uint256) {\\n        return\\n            ((stakedOf(_account) *\\n                getBoost(_account) *\\n                (rewardPerToken() - userRewardPerTokenPaid[_account])) / 1e38) +\\n            rewards[_account];\\n    }\\n\\n    function getReward() external updateReward(msg.sender) {\\n        require(\\n            block.timestamp >= esVIBBoost.getUnlockTime(msg.sender),\\n            \\\"Your lock-in period has not ended. You can't claim your esVIB now.\\\"\\n        );\\n        uint256 reward = rewards[msg.sender];\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            vibraniumFund.refreshReward(msg.sender);\\n            IesVIB(esVIB).mint(msg.sender, reward);\\n        }\\n    }\\n\\n    function notifyRewardAmount(uint256 amount)\\n        external\\n        onlyOwner\\n        updateReward(address(0))\\n    {\\n        require(amount > 0, \\\"amount = 0\\\");\\n        if (block.timestamp >= finishAt) {\\n            rewardRate = amount / duration;\\n        } else {\\n            uint256 remainingRewards = (finishAt - block.timestamp) *\\n                rewardRate;\\n            rewardRate = (amount + remainingRewards) / duration;\\n        }\\n\\n        require(rewardRate > 0, \\\"reward rate = 0\\\");\\n\\n        finishAt = block.timestamp + duration;\\n        updatedAt = block.timestamp;\\n    }\\n\\n    function _min(uint256 x, uint256 y) private pure returns (uint256) {\\n        return x <= y ? x : y;\\n    }\\n}\"\r\n    },\r\n    \"contracts/IesVIB.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\ninterface IesVIB {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function mint(address user, uint256 amount) external returns(bool);\\n    function burn(address user, uint256 amount) external returns(bool);\\n}\"\r\n    },\r\n    \"contracts/IVibranium.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\ninterface IVibranium {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function totalDepositedEther() external view returns (uint256);\\n\\n    function safeCollateralRate() external view returns (uint256);\\n\\n    function redemptionFee() external view returns (uint256);\\n\\n    function keeperRate() external view returns (uint256);\\n\\n    function depositedEther(address user) external view returns (uint256);\\n\\n    function getBorrowedOf(address user) external view returns (uint256);\\n\\n    function isRedemptionProvider(address user) external view returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function badCollateralRate() external view returns (uint256);\\n\\n    function burn(address onBehalfOf, uint256 amount) external;\\n\\n    function transfer(\\n        address _recipient,\\n        uint256 _amount\\n    ) external returns (bool);\\n    \\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transferShares(\\n        address _recipient,\\n        uint256 _sharesAmount\\n    ) external returns (uint256);\\n\\n    function getSharesByMintedVUSD(\\n        uint256 _VUSDAmount\\n    ) external view returns (uint256);\\n\\n    function getMintedVUSDByShares(\\n        uint256 _sharesAmount\\n    ) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vibranium\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_helper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_boost\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fund\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"esVIB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"esVIBBoost\",\"outputs\":[{\"internalType\":\"contract IesVIBBoost\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"helper\",\"outputs\":[{\"internalType\":\"contract Ihelper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockdownPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"pausedByLido\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"refreshReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_boost\",\"type\":\"address\"}],\"name\":\"setBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_esVIB\",\"type\":\"address\"}],\"name\":\"setEsVIB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setExtraRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setLockdownPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fund\",\"type\":\"address\"}],\"name\":\"setVibraniumFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"stakedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userUpdatedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vibranium\",\"outputs\":[{\"internalType\":\"contract IVibranium\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vibraniumFund\",\"outputs\":[{\"internalType\":\"contract IvibraniumFund\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"esVIBMinerV2","CompilerVersion":"v0.8.17+commit.8df45f5f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001aa3745f9ecacb090e5e6e309474d411dabf27cf000000000000000000000000c874294282e874fbc2be860b41fcb8b5522bf6cd000000000000000000000000b84677cd95252624be7262d30478eae95704a21d000000000000000000000000b3fa9373b10dd0d5904f2e6624e2f2ca79ac5465","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}