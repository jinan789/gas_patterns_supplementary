{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.3.10\r\n\"\"\"\r\n@title Vote weight measure with delegation and decay\r\n@author 0xkorin, Yearn Finance\r\n@license GNU AGPLv3\r\n@notice\r\n    Base voting weight equal to the measure at launch.\r\n    Weight decays linearly to zero in the final 24 hours of the epoch.\r\n    Management can delegate voting weight from one account to the other,\r\n    which zeroes out the weight for the origin and adds some weight based on the \r\n    token balance to the delegate.\r\n\"\"\"\r\n\r\ninterface Measure:\r\n    def total_vote_weight() -> uint256: view\r\n    def vote_weight(_account: address) -> uint256: view\r\nimplements: Measure\r\n\r\ninterface Staking:\r\n    def totalSupply() -> uint256: view\r\n    def balanceOf(_account: address) -> uint256: view\r\n    def vote_weight(_account: address) -> uint256: view\r\n\r\ninterface Bootstrap:\r\n    def deposited() -> uint256: view\r\n    def deposits(_account: address) -> uint256: view\r\n\r\ngenesis: public(immutable(uint256))\r\nstaking: public(immutable(Staking))\r\nbootstrap: public(immutable(address))\r\ndelegated_staking: public(immutable(Measure))\r\nmanagement: public(address)\r\npending_management: public(address)\r\n\r\ndelegate_multiplier: public(uint256)\r\ndelegator: public(HashMap[address, address]) # account => delegate to\r\ndelegated: public(HashMap[address, address]) # account => delegated from\r\n\r\nevent SetDelegateMultiplier:\r\n    multiplier: uint256\r\n\r\nevent Delegate:\r\n    account: indexed(address)\r\n    receiver: indexed(address)\r\n\r\nevent PendingManagement:\r\n    management: indexed(address)\r\n\r\nevent SetManagement:\r\n    management: indexed(address)\r\n\r\nDELEGATE_SCALE: constant(uint256) = 10_000\r\nDAY: constant(uint256) = 24 * 60 * 60\r\nEPOCH_LENGTH: constant(uint256) = 4 * 7 * DAY\r\n\r\n@external\r\ndef __init__(_genesis: uint256, _staking: address, _bootstrap: address, _delegated_staking: address):\r\n    \"\"\"\r\n    @notice Constructor\r\n    @param _genesis Genesis time\r\n    @param _staking Staking contract\r\n    @param _bootstrap Bootstrap contract\r\n    @param _delegated_staking Delegated staking contract\r\n    \"\"\"\r\n    genesis = _genesis\r\n    staking = Staking(_staking)\r\n    delegated_staking = Measure(_delegated_staking)\r\n    bootstrap = _bootstrap\r\n    self.management = msg.sender\r\n\r\n@external\r\n@view\r\ndef total_vote_weight() -> uint256:\r\n    \"\"\"\r\n    @notice Get total vote weight\r\n    @return Total vote weight\r\n    @dev\r\n        Care should be taken to use for quorum purposes, as the sum of actual available \r\n        vote weights will be lower than this due to asymptotical vote weight increase.\r\n    \"\"\"\r\n    return staking.totalSupply()\r\n\r\n@external\r\n@view\r\ndef vote_weight(_account: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get account vote weight\r\n    @param _account Account to get vote weight for\r\n    @return Account vote weight\r\n    \"\"\"\r\n    weight: uint256 = Bootstrap(bootstrap).deposits(_account)\r\n    if weight > 0:\r\n        deposited: uint256 = Bootstrap(bootstrap).deposited()\r\n        if deposited > 0:\r\n            weight = weight * staking.vote_weight(bootstrap) / deposited\r\n        else:\r\n            weight = 0\r\n    weight += staking.vote_weight(_account)\r\n\r\n    delegated: address = self.delegated[_account]\r\n    if delegated != empty(address):\r\n        weight += delegated_staking.vote_weight(delegated) * self.delegate_multiplier / DELEGATE_SCALE\r\n\r\n    left: uint256 = EPOCH_LENGTH - ((block.timestamp - genesis) % EPOCH_LENGTH)\r\n    if left <= DAY:\r\n        return weight * left / DAY\r\n\r\n    return weight\r\n    \r\n@external\r\ndef set_delegate_multiplier(_multiplier: uint256):\r\n    \"\"\"\r\n    @notice\r\n        Set the delegate multiplier, the value by which delegated \r\n        voting weight is multipied by.\r\n    @param _multiplier\r\n        Delegate multiplier value. \r\n        Maximum value is `DELEGATE_SCALE`, which corresponds to one.\r\n    \"\"\"\r\n    assert msg.sender == self.management\r\n    assert _multiplier <= DELEGATE_SCALE\r\n    self.delegate_multiplier = _multiplier\r\n    log SetDelegateMultiplier(_multiplier)\r\n\r\n@external\r\ndef delegate(_account: address, _receiver: address):\r\n    \"\"\"\r\n    @notice Delegate someones voting weight to someone else\r\n    @param _account Account to delegate voting weight from\r\n    @param _receiver Account to delegate voting weight to\r\n    \"\"\"\r\n    assert msg.sender == self.management\r\n\r\n    previous: address = self.delegator[_account]\r\n    if previous != empty(address):\r\n        self.delegated[previous] = empty(address)\r\n\r\n    self.delegator[_account] = _receiver\r\n    if _receiver != empty(address):\r\n        assert self.delegated[_receiver] == empty(address)\r\n        self.delegated[_receiver] = _account\r\n    log Delegate(_account, _receiver)\r\n\r\n@external\r\ndef set_management(_management: address):\r\n    \"\"\"\r\n    @notice \r\n        Set the pending management address.\r\n        Needs to be accepted by that account separately to transfer management over\r\n    @param _management New pending management address\r\n    \"\"\"\r\n    assert msg.sender == self.management\r\n    self.pending_management = _management\r\n    log PendingManagement(_management)\r\n\r\n@external\r\ndef accept_management():\r\n    \"\"\"\r\n    @notice \r\n        Accept management role.\r\n        Can only be called by account previously marked as pending management by current management\r\n    \"\"\"\r\n    assert msg.sender == self.pending_management\r\n    self.pending_management = empty(address)\r\n    self.management = msg.sender\r\n    log SetManagement(msg.sender)","ABI":"[{\"name\":\"SetDelegateMultiplier\",\"inputs\":[{\"name\":\"multiplier\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Delegate\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":true},{\"name\":\"receiver\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"PendingManagement\",\"inputs\":[{\"name\":\"management\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetManagement\",\"inputs\":[{\"name\":\"management\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_genesis\",\"type\":\"uint256\"},{\"name\":\"_staking\",\"type\":\"address\"},{\"name\":\"_bootstrap\",\"type\":\"address\"},{\"name\":\"_delegated_staking\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"total_vote_weight\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"vote_weight\",\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_delegate_multiplier\",\"inputs\":[{\"name\":\"_multiplier\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"delegate\",\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_management\",\"inputs\":[{\"name\":\"_management\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"accept_management\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"genesis\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"staking\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"bootstrap\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"delegated_staking\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"management\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pending_management\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"delegate_multiplier\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"delegator\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"delegated\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]}]","ContractName":"Vote weight measure with delegation and decay","CompilerVersion":"vyper:0.3.10","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000064d42880000000000000000000000000583019ff0f430721ada9cfb4fac8f06ca104d0b40000000000000000000000007cf484d9d16ba26ab3bcdc8ec4a73ac50136d491000000000000000000000000bb595031c02810b8f4e035017fb4502ae481e75c","EVMVersion":"Default","Library":"","LicenseType":"GNU AGPLv3","Proxy":"0","Implementation":"","SwarmSource":""}]}