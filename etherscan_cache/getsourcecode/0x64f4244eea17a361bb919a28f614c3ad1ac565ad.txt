{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/contracts/middleware/BLSRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin-upgrades/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin-upgrades/contracts/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"./RegistryBase.sol\\\";\\nimport \\\"../interfaces/IBLSPublicKeyCompendium.sol\\\";\\nimport \\\"../interfaces/IBLSRegistry.sol\\\";\\nimport \\\"../libraries/BN254.sol\\\";\\nimport \\\"../interfaces/IRegistryPermission.sol\\\";\\n\\n/**\\n * @title A Registry-type contract using aggregate BLS signatures.\\n * @author Layr Labs, Inc.\\n * @notice This contract is used for\\n * - registering new operators\\n * - committing to and finalizing de-registration as an operator\\n * - updating the stakes of the operator\\n */\\ncontract BLSRegistry is Initializable, OwnableUpgradeable, RegistryBase, IBLSRegistry {\\n    using BytesLib for bytes;\\n\\n    // Hash of the zero public key\\n    bytes32 internal constant ZERO_PK_HASH = hex\\\"012893657d8eb2efad4de0a91bcd0e39ad9837745dec3ea923737ea803fc8e3d\\\";\\n\\n    /// @notice contract used for looking up operators' BLS public keys\\n    IBLSPublicKeyCompendium public immutable pubkeyCompendium;\\n\\n    /// @notice contract used for manage operator register permission\\n    IRegistryPermission public immutable permissionManager;\\n\\n    /**\\n     * @notice list of keccak256(apk_x, apk_y) of operators, and the block numbers at which the aggregate\\n     * pubkeys were updated. This occurs whenever a new operator registers or deregisters.\\n     */\\n    ApkUpdate[] internal _apkUpdates;\\n\\n    /**\\n     * @dev Initialized value of APK is the point at infinity: (0, 0)\\n     * @notice used for storing current aggregate public key\\n     */\\n    BN254.G1Point public apk;\\n\\n\\n    /// @notice Address that has permission to deregister any operator\\n    address public forceDeregister;\\n\\n    // EVENTS\\n    /**\\n     * @notice Emitted upon the registration of a new operator for the middleware\\n     * @param operator Address of the new operator\\n     * @param pkHash The keccak256 hash of the operator's public key\\n     * @param pk The operator's public key itself\\n     * @param apkHashIndex The index of the latest (i.e. the new) APK update\\n     * @param apkHash The keccak256 hash of the new Aggregate Public Key\\n     */\\n    event Registration(\\n        address indexed operator,\\n        bytes32 pkHash,\\n        BN254.G1Point pk,\\n        uint32 apkHashIndex,\\n        bytes32 apkHash,\\n        string socket\\n    );\\n\\n    /// @notice when applied to a function, ensures that the function is only callable by the `feeSetter`.\\n    modifier onlyForceDeregister() {\\n        require(msg.sender == forceDeregister, \\\"onlyForceDeregister can do this action\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        IInvestmentManager _investmentManager,\\n        IServiceManager _serviceManager,\\n        uint8 _NUMBER_OF_QUORUMS,\\n        IBLSPublicKeyCompendium _pubkeyCompendium,\\n        IRegistryPermission _permissionManager,\\n        address _forceDeregister\\n    )\\n        RegistryBase(\\n            _investmentManager,\\n            _serviceManager,\\n            _NUMBER_OF_QUORUMS\\n        )\\n    {\\n        // set compendium\\n        pubkeyCompendium = _pubkeyCompendium;\\n        // set permission\\n        permissionManager = _permissionManager;\\n        // set forceDeregister\\n        forceDeregister = _forceDeregister;\\n    }\\n\\n    /// @notice Initialize the APK, the payment split between quorums, and the quorum strategies + multipliers.\\n    function initialize(\\n        uint256[] memory _quorumBips,\\n        address initialOwner,\\n        StrategyAndWeightingMultiplier[] memory _firstQuorumStrategiesConsideredAndMultipliers,\\n        StrategyAndWeightingMultiplier[] memory _secondQuorumStrategiesConsideredAndMultipliers\\n    ) public virtual initializer {\\n        _transferOwnership(initialOwner);\\n\\n        // process an apk update to get index and totalStake arrays to the same length\\n        _processApkUpdate(BN254.G1Point(0, 0));\\n        RegistryBase._initialize(\\n            _quorumBips,\\n            _firstQuorumStrategiesConsideredAndMultipliers,\\n            _secondQuorumStrategiesConsideredAndMultipliers\\n        );\\n    }\\n\\n    /**\\n     * @notice called for registering as an operator\\n     * @param operatorType specifies whether the operator want to register as staker for one or both quorums\\n     * @param pk is the operator's G1 public key\\n     * @param socket is the socket address of the operator\\n     */\\n    function registerOperator(uint8 operatorType, BN254.G1Point memory pk, string calldata socket) external virtual {\\n        require(\\n            permissionManager.getOperatorRegisterPermission(msg.sender) == true,\\n            \\\"BLSRegistry.registerOperator: Operator does not permission to register\\\"\\n        );\\n        _registerOperator(msg.sender, operatorType, pk, socket);\\n    }\\n\\n    /**\\n     * @param operator is the node who is registering to be a operator\\n     * @param operatorType specifies whether the operator want to register as staker for one or both quorums\\n     * @param pk is the operator's G1 public key\\n     * @param socket is the socket address of the operator\\n     */\\n    function _registerOperator(address operator, uint8 operatorType, BN254.G1Point memory pk, string calldata socket)\\n        internal\\n    {\\n        // validate the registration of `operator` and find their `OperatorStake`\\n        OperatorStake memory _operatorStake = _registrationStakeEvaluation(operator, operatorType);\\n\\n        // getting pubkey hash\\n        bytes32 pubkeyHash = BN254.hashG1Point(pk);\\n\\n        require(pubkeyHash != ZERO_PK_HASH, \\\"BLSRegistry._registerOperator: Cannot register with 0x0 public key\\\");\\n\\n        require(\\n            pubkeyCompendium.pubkeyHashToOperator(pubkeyHash) == operator,\\n            \\\"BLSRegistry._registerOperator: operator does not own pubkey\\\"\\n        );\\n\\n        // the new aggregate public key is the current one added to registering operator's public key\\n        BN254.G1Point memory newApk = BN254.plus(apk, pk);\\n\\n        // record the APK update and get the hash of the new APK\\n        bytes32 newApkHash = _processApkUpdate(newApk);\\n\\n        // add the operator to the list of registrants and do accounting\\n        _addRegistrant(operator, pubkeyHash, _operatorStake);\\n\\n        emit Registration(operator, pubkeyHash, pk, uint32(_apkUpdates.length - 1), newApkHash, socket);\\n    }\\n\\n    /**\\n     * @notice Used by an operator to de-register itself from providing service to the middleware.\\n     * @param pkToRemove is the sender's pubkey in affine coordinates\\n     * @param index is the sender's location in the dynamic array `operatorList`\\n     */\\n    function deregisterOperator(BN254.G1Point memory pkToRemove, uint32 index) external virtual returns (bool) {\\n        require(\\n            permissionManager.getOperatorDeregisterPermission(msg.sender) == true,\\n            \\\"BLSRegistry.deregisterOperator: Operator should apply deregister permission first and then can deregister\\\"\\n        );\\n        _deregisterOperator(msg.sender, pkToRemove, index);\\n        return true;\\n    }\\n\\n    function forceDeregisterOperator(BN254.G1Point memory pkToRemove, address operator, uint32 index) external onlyForceDeregister returns (bool) {\\n        _deregisterOperator(operator, pkToRemove, index);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Used to process de-registering an operator from providing service to the middleware.\\n     * @param operator The operator to be deregistered\\n     * @param pkToRemove is the sender's pubkey\\n     * @param index is the sender's location in the dynamic array `operatorList`\\n     */\\n    function _deregisterOperator(address operator, BN254.G1Point memory pkToRemove, uint32 index) internal {\\n        // verify that the `operator` is an active operator and that they've provided the correct `index`\\n        _deregistrationCheck(operator, index);\\n\\n\\n        /// @dev Fetch operator's stored pubkeyHash\\n        bytes32 pubkeyHash = registry[operator].pubkeyHash;\\n        /// @dev Verify that the stored pubkeyHash matches the 'pubkeyToRemoveAff' input\\n        require(\\n            pubkeyHash == BN254.hashG1Point(pkToRemove),\\n            \\\"BLSRegistry._deregisterOperator: pubkey input does not match stored pubkeyHash\\\"\\n        );\\n\\n        // the new apk is the current one minus the sender's pubkey (apk = apk + (-pk))\\n        BN254.G1Point memory newApk = BN254.plus(apk, BN254.negate(pkToRemove));\\n\\n        bytes32 newApkHash = BN254.hashG1Point(newApk);\\n\\n        // Perform necessary updates for removing operator, including updating operator list and index histories\\n        _removeOperator(operator, pubkeyHash, pkToRemove, newApkHash, index);\\n\\n        // update the aggregate public key of all registered operators and record this update in history\\n        _processApkUpdate(newApk);\\n    }\\n\\n    /**\\n     * @notice Used for updating information on deposits of nodes.\\n     * @param operators are the nodes whose deposit information is getting updated\\n     * @param prevElements are the elements before this middleware in the operator's linked list within the slasher\\n     */\\n    function updateStakes(address[] calldata operators, uint256[] calldata prevElements) external {\\n        // copy total stake to memory\\n        OperatorStake memory _totalStake = totalStakeHistory[totalStakeHistory.length - 1];\\n\\n        // placeholders reused inside of loop\\n        OperatorStake memory currentStakes;\\n        bytes32 pubkeyHash;\\n        uint256 operatorsLength = operators.length;\\n        // make sure lengths are consistent\\n        require(operatorsLength == prevElements.length, \\\"BLSRegistry.updateStakes: prevElement is not the same length as operators\\\");\\n        // iterating over all the tuples that are to be updated\\n        for (uint256 i = 0; i < operatorsLength;) {\\n            // get operator's pubkeyHash\\n            pubkeyHash = registry[operators[i]].pubkeyHash;\\n            // fetch operator's existing stakes\\n            currentStakes = pubkeyHashToStakeHistory[pubkeyHash][pubkeyHashToStakeHistory[pubkeyHash].length - 1];\\n            // decrease _totalStake by operator's existing stakes\\n            _totalStake.firstQuorumStake -= currentStakes.firstQuorumStake;\\n            _totalStake.secondQuorumStake -= currentStakes.secondQuorumStake;\\n\\n            // update the stake for the i-th operator\\n            currentStakes = _updateOperatorStake(operators[i], pubkeyHash, currentStakes, prevElements[i]);\\n\\n            // increase _totalStake by operator's updated stakes\\n            _totalStake.firstQuorumStake += currentStakes.firstQuorumStake;\\n            _totalStake.secondQuorumStake += currentStakes.secondQuorumStake;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // update storage of total stake\\n        _recordTotalStakeUpdate(_totalStake);\\n    }\\n\\n    /**\\n     * @notice Updates the stored APK to `newApk`, calculates its hash, and pushes new entries to the `_apkUpdates` array\\n     * @param newApk The updated APK. This will be the `apk` after this function runs!\\n     */\\n    function _processApkUpdate(BN254.G1Point memory newApk) internal returns (bytes32) {\\n        // update stored aggregate public key\\n        // slither-disable-next-line costly-loop\\n        apk = newApk;\\n\\n        // find the hash of aggregate pubkey\\n        bytes32 newApkHash = BN254.hashG1Point(newApk);\\n\\n        // store the apk hash and the current block number in which the aggregated pubkey is being updated\\n        _apkUpdates.push(ApkUpdate({\\n            apkHash: newApkHash,\\n            blockNumber: uint32(block.number)\\n        }));\\n\\n        return newApkHash;\\n    }\\n\\n    /// @notice Used by Eigenlayr governance to adjust the address of the `forceDeregister`\\n    function setForceDeregister(address _forceDeregister) external onlyOwner {\\n        require(_forceDeregister != address(0), \\\"BLSRegistry.setForceDeregister: forceDeregister address is the zero address\\\");\\n        forceDeregister = _forceDeregister;\\n    }\\n\\n    /**\\n     * @notice get hash of a historical aggregated public key corresponding to a given index;\\n     * called by checkSignatures in BLSSignatureChecker.sol.\\n     */\\n    function getCorrectApkHash(uint256 index, uint32 blockNumber) external view returns (bytes32) {\\n        // check that the `index`-th APK update occurred at or before `blockNumber`\\n        require(blockNumber >= _apkUpdates[index].blockNumber, \\\"BLSRegistry.getCorrectApkHash: index too recent\\\");\\n\\n        // if not last update\\n        if (index != _apkUpdates.length - 1) {\\n            // check that there was not *another APK update* that occurred at or before `blockNumber`\\n            require(blockNumber < _apkUpdates[index + 1].blockNumber, \\\"BLSRegistry.getCorrectApkHash: Not latest valid apk update\\\");\\n        }\\n\\n        return _apkUpdates[index].apkHash;\\n    }\\n\\n    /// @notice returns the total number of APK updates that have ever occurred (including one for initializing the pubkey as the generator)\\n    function getApkUpdatesLength() external view returns (uint256) {\\n        return _apkUpdates.length;\\n    }\\n\\n    /// @notice returns the `ApkUpdate` struct at `index` in the list of APK updates\\n    function apkUpdates(uint256 index) external view returns (ApkUpdate memory) {\\n        return _apkUpdates[index];\\n    }\\n\\n    /// @notice returns the APK hash that resulted from the `index`th APK update\\n    function apkHashes(uint256 index) external view returns (bytes32) {\\n        return _apkUpdates[index].apkHash;\\n    }\\n\\n    /// @notice returns the block number at which the `index`th APK update occurred\\n    function apkUpdateBlockNumbers(uint256 index) external view returns (uint32) {\\n        return _apkUpdates[index].blockNumber;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"src/contracts/middleware/RegistryBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../interfaces/IServiceManager.sol\\\";\\nimport \\\"../interfaces/IQuorumRegistry.sol\\\";\\nimport \\\"../libraries/BytesLib.sol\\\";\\nimport \\\"./VoteWeigherBase.sol\\\";\\nimport \\\"../libraries/BN254.sol\\\";\\n\\n/**\\n * @title An abstract Registry-type contract that is signature scheme agnostic.\\n * @author Layr Labs, Inc.\\n * @notice This contract is used for\\n * - registering new operators\\n * - committing to and finalizing de-registration as an operator\\n * - updating the stakes of the operator\\n * @dev This contract is missing key functions. See `BLSRegistry` or `ECDSARegistry` for examples that inherit from this contract.\\n */\\nabstract contract RegistryBase is VoteWeigherBase, IQuorumRegistry {\\n    using BytesLib for bytes;\\n\\n    // TODO: set these on initialization\\n    /// @notice In order to register, an operator must have at least `minimumStakeFirstQuorum` or `minimumStakeSecondQuorum`, as\\n    /// evaluated by this contract's 'VoteWeigher' logic.\\n    uint128 public minimumStakeFirstQuorum = 1 wei;\\n    uint128 public minimumStakeSecondQuorum = 1 wei;\\n\\n    /// @notice used for storing Operator info on each operator while registration\\n    mapping(address => Operator) public registry;\\n\\n    /// @notice used for storing the list of current and past registered operators\\n    address[] public operatorList;\\n\\n    /// @notice array of the history of the total stakes -- marked as internal since getTotalStakeFromIndex is a getter for this\\n    OperatorStake[] internal totalStakeHistory;\\n\\n    /// @notice array of the history of the number of operators, and the taskNumbers at which the number of operators changed\\n    OperatorIndex[] public totalOperatorsHistory;\\n\\n    /// @notice mapping from operator's pubkeyhash to the history of their stake updates\\n    mapping(bytes32 => OperatorStake[]) public pubkeyHashToStakeHistory;\\n\\n    /// @notice mapping from operator's pubkeyhash to the history of their index in the array of all operators\\n    mapping(bytes32 => OperatorIndex[]) public pubkeyHashToIndexHistory;\\n\\n    // EVENTS\\n    /// @notice emitted when `operator` updates their socket address to `socket`\\n    event SocketUpdate(address operator, string socket);\\n\\n    /// @notice emitted whenever the stake of `operator` is updated\\n    event StakeUpdate(\\n        address operator,\\n        uint96 firstQuorumStake,\\n        uint96 secondQuorumStake,\\n        uint32 updateBlockNumber,\\n        uint32 prevUpdateBlockNumber\\n    );\\n\\n    /**\\n     * @notice Emitted whenever an operator deregisters.\\n     * The `swapped` address is the address returned by an internal call to the `_popRegistrant` function.\\n     */\\n    event Deregistration(\\n        address operator,\\n        address swapped,\\n        BN254.G1Point pk,\\n        bytes32 apkHash\\n    );\\n\\n    /**\\n     * @notice Irrevocably sets the (immutable) `delegation` & `investmentManager` addresses, and `NUMBER_OF_QUORUMS` variable.\\n     */\\n    constructor(\\n        IInvestmentManager _investmentManager,\\n        IServiceManager _serviceManager,\\n        uint8 _NUMBER_OF_QUORUMS\\n    ) VoteWeigherBase(_investmentManager, _serviceManager, _NUMBER_OF_QUORUMS)\\n    // solhint-disable-next-line no-empty-blocks\\n    {}\\n\\n    /**\\n     * @notice Adds empty first entries to the dynamic arrays `totalStakeHistory` and `totalOperatorsHistory`,\\n     * to record an initial condition of zero operators with zero total stake.\\n     * Adds `_firstQuorumStrategiesConsideredAndMultipliers` and `_secondQuorumStrategiesConsideredAndMultipliers` to the dynamic arrays\\n     * `strategiesConsideredAndMultipliers[0]` and `strategiesConsideredAndMultipliers[1]` (i.e. to the weighing functions of the quorums)\\n     */\\n    function _initialize(\\n        uint256[] memory _quorumBips,\\n        StrategyAndWeightingMultiplier[] memory _firstQuorumStrategiesConsideredAndMultipliers,\\n        StrategyAndWeightingMultiplier[] memory _secondQuorumStrategiesConsideredAndMultipliers\\n    ) internal virtual onlyInitializing {\\n        VoteWeigherBase._initialize(_quorumBips);\\n\\n        // push an empty OperatorStake struct to the total stake history to record starting with zero stake\\n        OperatorStake memory _totalStake;\\n        totalStakeHistory.push(_totalStake);\\n\\n        // push an empty OperatorIndex struct to the total operators history to record starting with zero operators\\n        OperatorIndex memory _totalOperators;\\n        totalOperatorsHistory.push(_totalOperators);\\n\\n        _addStrategiesConsideredAndMultipliers(0, _firstQuorumStrategiesConsideredAndMultipliers);\\n        _addStrategiesConsideredAndMultipliers(1, _secondQuorumStrategiesConsideredAndMultipliers);\\n    }\\n\\n    /**\\n     * @notice Looks up the `operator`'s index in the dynamic array `operatorList` at the specified `blockNumber`.\\n     * @param index Used to specify the entry within the dynamic array `pubkeyHashToIndexHistory[pubkeyHash]` to\\n     * read data from, where `pubkeyHash` is looked up from `operator`'s registration info\\n     * @param blockNumber Is the desired block number at which we wish to query the operator's position in the `operatorList` array\\n     * @dev Function will revert in the event that the specified `index` input does not identify the appropriate entry in the\\n     * array `pubkeyHashToIndexHistory[pubkeyHash]` to pull the info from.\\n    */\\n    function getOperatorIndex(address operator, uint32 blockNumber, uint32 index) external view returns (uint32) {\\n        // look up the operator's stored pubkeyHash\\n        bytes32 pubkeyHash = getOperatorPubkeyHash(operator);\\n\\n        /**\\n         * Since the 'to' field represents the blockNumber at which a new index started, it is OK if the\\n         * previous array entry has 'to' == blockNumber, so we check not strict inequality here\\n         */\\n        require(\\n            index == 0 || pubkeyHashToIndexHistory[pubkeyHash][index - 1].toBlockNumber <= blockNumber,\\n            \\\"RegistryBase.getOperatorIndex: Operator indexHistory index is too high\\\"\\n        );\\n        OperatorIndex memory operatorIndex = pubkeyHashToIndexHistory[pubkeyHash][index];\\n        /**\\n         * When deregistering, the operator does *not* serve the current block number -- 'to' gets set (from zero) to the current block number.\\n         * Since the 'to' field represents the blocknumber at which a new index started, we want to check strict inequality here.\\n        */\\n        require(\\n            operatorIndex.toBlockNumber == 0 || blockNumber < operatorIndex.toBlockNumber,\\n            \\\"RegistryBase.getOperatorIndex: indexHistory index is too low\\\"\\n        );\\n        return operatorIndex.index;\\n    }\\n\\n    /**\\n     * @notice Looks up the number of total operators at the specified `blockNumber`.\\n     * @param index Input used to specify the entry within the dynamic array `totalOperatorsHistory` to read data from.\\n     * @dev This function will revert if the provided `index` is out of bounds.\\n    */\\n    function getTotalOperators(uint32 blockNumber, uint32 index) external view returns (uint32) {\\n        /**\\n         * Since the 'to' field represents the blockNumber at which a new index started, it is OK if the\\n         * previous array entry has 'to' == blockNumber, so we check not strict inequality here\\n         */\\n        require(\\n            index == 0 || totalOperatorsHistory[index - 1].toBlockNumber <= blockNumber,\\n            \\\"RegistryBase.getTotalOperators: TotalOperatorsHistory index is too high\\\"\\n        );\\n\\n        OperatorIndex memory operatorIndex = totalOperatorsHistory[index];\\n        // since the 'to' field represents the blockNumber at which a new index started, we want to check strict inequality here\\n\\n//        require(\\n//            operatorIndex.toBlockNumber == 0 || blockNumber < operatorIndex.toBlockNumber,\\n//            \\\"RegistryBase.getTotalOperators: TotalOperatorsHistory index is too low\\\"\\n//        );\\n        return operatorIndex.index;\\n    }\\n\\n    /// @notice Returns whether or not the `operator` is currently an active operator, i.e. is \\\"registered\\\".\\n    function isActiveOperator(address operator) external view virtual returns (bool) {\\n        return (registry[operator].status == IQuorumRegistry.Status.ACTIVE);\\n    }\\n\\n    /// @notice Returns the stored pubkeyHash for the specified `operator`.\\n    function getOperatorPubkeyHash(address operator) public view returns (bytes32) {\\n        return registry[operator].pubkeyHash;\\n    }\\n\\n    /**\\n     * @notice Returns the stake weight corresponding to `pubkeyHash`, at the\\n     * `index`-th entry in the `pubkeyHashToStakeHistory[pubkeyHash]` array.\\n     * @param pubkeyHash Hash of the public key of the operator of interest.\\n     * @param index Array index for lookup, within the dynamic array `pubkeyHashToStakeHistory[pubkeyHash]`.\\n     * @dev Function will revert if `index` is out-of-bounds.\\n     */\\n    function getStakeFromPubkeyHashAndIndex(bytes32 pubkeyHash, uint256 index)\\n        external\\n        view\\n        returns (OperatorStake memory)\\n    {\\n        return pubkeyHashToStakeHistory[pubkeyHash][index];\\n    }\\n\\n    /**\\n     * @notice Checks that the `operator` was active at the `blockNumber`, using the specified `stakeHistoryIndex` as proof.\\n     * @param operator is the operator of interest\\n     * @param blockNumber is the block number of interest\\n     * @param stakeHistoryIndex specifies an index in `pubkeyHashToStakeHistory[pubkeyHash]`, where `pubkeyHash` is looked up\\n     * in `registry[operator].pubkeyHash`\\n     * @return 'true' if it is succesfully proven that  the `operator` was active at the `blockNumber`, and 'false' otherwise\\n     * @dev In order for this function to return 'true', the inputs must satisfy all of the following list:\\n     * 1) `pubkeyHashToStakeHistory[pubkeyHash][index].updateBlockNumber <= blockNumber`\\n     * 2) `pubkeyHashToStakeHistory[pubkeyHash][index].nextUpdateBlockNumber` must be either `0` (signifying no next update) or\\n     * is must be strictly greater than `blockNumber`\\n     * 3) `pubkeyHashToStakeHistory[pubkeyHash][index].firstQuorumStake > 0`\\n     * or `pubkeyHashToStakeHistory[pubkeyHash][index].secondQuorumStake > 0`, i.e. the operator had nonzero stake\\n     * @dev Note that a return value of 'false' does not guarantee that the `operator` was inactive at `blockNumber`, since a\\n     * bad `stakeHistoryIndex` can be supplied in order to obtain a response of 'false'.\\n     */\\n    function checkOperatorActiveAtBlockNumber(\\n        address operator,\\n        uint256 blockNumber,\\n        uint256 stakeHistoryIndex\\n        ) external view returns (bool)\\n    {\\n        // fetch the `operator`'s pubkey hash\\n        bytes32 pubkeyHash = registry[operator].pubkeyHash;\\n        // pull the stake history entry specified by `stakeHistoryIndex`\\n        OperatorStake memory operatorStake = pubkeyHashToStakeHistory[pubkeyHash][stakeHistoryIndex];\\n        return (\\n            // check that the update specified by `stakeHistoryIndex` occurred at or prior to `blockNumber`\\n            (operatorStake.updateBlockNumber <= blockNumber)\\n            &&\\n            // if there is a next update, then check that the next update occurred strictly after `blockNumber`\\n            (operatorStake.nextUpdateBlockNumber == 0 || operatorStake.nextUpdateBlockNumber > blockNumber)\\n            &&\\n            /// verify that the stake was non-zero at the time (note: here was use the assumption that the operator was 'inactive'\\n            /// once their stake fell to zero)\\n            (operatorStake.firstQuorumStake != 0 || operatorStake.secondQuorumStake != 0)\\n        );\\n    }\\n\\n    /**\\n     * @notice Checks that the `operator` was inactive at the `blockNumber`, using the specified `stakeHistoryIndex` as proof.\\n     * @param operator is the operator of interest\\n     * @param blockNumber is the block number of interest\\n     * @param stakeHistoryIndex specifies an index in `pubkeyHashToStakeHistory[pubkeyHash]`, where `pubkeyHash` is looked up\\n     * in `registry[operator].pubkeyHash`\\n     * @return 'true' if it is succesfully proven that  the `operator` was inactive at the `blockNumber`, and 'false' otherwise\\n     * @dev In order for this function to return 'true', the inputs must satisfy all of the following list:\\n     * 1) `pubkeyHashToStakeHistory[pubkeyHash][index].updateBlockNumber <= blockNumber`\\n     * 2) `pubkeyHashToStakeHistory[pubkeyHash][index].nextUpdateBlockNumber` must be either `0` (signifying no next update) or\\n     * is must be strictly greater than `blockNumber`\\n     * 3) `pubkeyHashToStakeHistory[pubkeyHash][index].firstQuorumStake > 0`\\n     * or `pubkeyHashToStakeHistory[pubkeyHash][index].secondQuorumStake > 0`, i.e. the operator had nonzero stake\\n     * @dev Note that a return value of 'false' does not guarantee that the `operator` was active at `blockNumber`, since a\\n     * bad `stakeHistoryIndex` can be supplied in order to obtain a response of 'false'.\\n     */\\n    function checkOperatorInactiveAtBlockNumber(\\n        address operator,\\n        uint256 blockNumber,\\n        uint256 stakeHistoryIndex\\n        ) external view returns (bool)\\n    {\\n        // fetch the `operator`'s pubkey hash\\n        bytes32 pubkeyHash = registry[operator].pubkeyHash;\\n        // special case for `pubkeyHashToStakeHistory[pubkeyHash]` having lenght zero -- in which case we know the operator was never registered\\n        if (pubkeyHashToStakeHistory[pubkeyHash].length == 0) {\\n            return true;\\n        }\\n        // pull the stake history entry specified by `stakeHistoryIndex`\\n        OperatorStake memory operatorStake = pubkeyHashToStakeHistory[pubkeyHash][stakeHistoryIndex];\\n        return (\\n            // check that the update specified by `stakeHistoryIndex` occurred at or prior to `blockNumber`\\n            (operatorStake.updateBlockNumber <= blockNumber)\\n            &&\\n            // if there is a next update, then check that the next update occurred strictly after `blockNumber`\\n            (operatorStake.nextUpdateBlockNumber == 0 || operatorStake.nextUpdateBlockNumber > blockNumber)\\n            &&\\n            /// verify that the stake was zero at the time (note: here was use the assumption that the operator was 'inactive'\\n            /// once their stake fell to zero)\\n            (operatorStake.firstQuorumStake == 0 && operatorStake.secondQuorumStake == 0)\\n        );\\n    }\\n\\n    /**\\n     * @notice Returns the most recent stake weight for the `operator`\\n     * @dev Function returns an OperatorStake struct with **every entry equal to 0** in the event that the operator has no stake history\\n     */\\n    function getMostRecentStakeByOperator(address operator) public view returns (OperatorStake memory) {\\n        bytes32 pubkeyHash = getOperatorPubkeyHash(operator);\\n        uint256 historyLength = pubkeyHashToStakeHistory[pubkeyHash].length;\\n        OperatorStake memory opStake;\\n        if (historyLength == 0) {\\n            return opStake;\\n        } else {\\n            opStake = pubkeyHashToStakeHistory[pubkeyHash][historyLength - 1];\\n            return opStake;\\n        }\\n    }\\n\\n    function getStakeHistoryLength(bytes32 pubkeyHash) external view returns (uint256) {\\n        return pubkeyHashToStakeHistory[pubkeyHash].length;\\n    }\\n\\n    function firstQuorumStakedByOperator(address operator) external view returns (uint96) {\\n        OperatorStake memory opStake = getMostRecentStakeByOperator(operator);\\n        return opStake.firstQuorumStake;\\n    }\\n\\n    function secondQuorumStakedByOperator(address operator) external view returns (uint96) {\\n        OperatorStake memory opStake = getMostRecentStakeByOperator(operator);\\n        return opStake.secondQuorumStake;\\n    }\\n\\n    /**\\n     * @notice Returns the most recent stake weights for the `operator`\\n     * @dev Function returns weights of **0** in the event that the operator has no stake history\\n     */\\n    function operatorStakes(address operator) public view returns (uint96, uint96) {\\n        OperatorStake memory opStake = getMostRecentStakeByOperator(operator);\\n        return (opStake.firstQuorumStake, opStake.secondQuorumStake);\\n    }\\n\\n    /// @notice Returns the stake amounts from the latest entry in `totalStakeHistory`.\\n    function totalStake() external view returns (uint96, uint96) {\\n        // no chance of underflow / error in next line, since an empty entry is pushed in the constructor\\n        OperatorStake memory _totalStake = totalStakeHistory[totalStakeHistory.length - 1];\\n        return (_totalStake.firstQuorumStake, _totalStake.secondQuorumStake);\\n    }\\n\\n    function getLengthOfPubkeyHashStakeHistory(bytes32 pubkeyHash) external view returns (uint256) {\\n        return pubkeyHashToStakeHistory[pubkeyHash].length;\\n    }\\n\\n    function getLengthOfPubkeyHashIndexHistory(bytes32 pubkeyHash) external view returns (uint256) {\\n        return pubkeyHashToIndexHistory[pubkeyHash].length;\\n    }\\n\\n    function getLengthOfTotalStakeHistory() external view returns (uint256) {\\n        return totalStakeHistory.length;\\n    }\\n\\n    function getLengthOfTotalOperatorsHistory() external view returns (uint256) {\\n        return totalOperatorsHistory.length;\\n    }\\n\\n    /**\\n     * @notice Returns the `index`-th entry in the dynamic array of total stake, `totalStakeHistory`.\\n     * @dev Function will revert in the event that `index` is out-of-bounds.\\n     */\\n    function getTotalStakeFromIndex(uint256 index) external view returns (OperatorStake memory) {\\n        return totalStakeHistory[index];\\n    }\\n\\n    /// @notice Returns task number from when `operator` has been registered.\\n    function getFromTaskNumberForOperator(address operator) external view returns (uint32) {\\n        return registry[operator].fromTaskNumber;\\n    }\\n\\n    /// @notice Returns the current number of operators of this service.\\n    function numOperators() public view returns (uint32) {\\n        return uint32(operatorList.length);\\n    }\\n\\n    // MUTATING FUNCTIONS\\n\\n    /// @notice Adjusts the `minimumStakeFirstQuorum` -- i.e. the node stake (weight) requirement for inclusion in the 1st quorum.\\n    function setMinimumStakeFirstQuorum(uint128 _minimumStakeFirstQuorum) external onlyServiceManagerOwner {\\n        minimumStakeFirstQuorum = _minimumStakeFirstQuorum;\\n    }\\n\\n    /// @notice Adjusts the `minimumStakeSecondQuorum` -- i.e. the node stake (weight) requirement for inclusion in the 2nd quorum.\\n    function setMinimumStakeSecondQuorum(uint128 _minimumStakeSecondQuorum) external onlyServiceManagerOwner {\\n        minimumStakeSecondQuorum = _minimumStakeSecondQuorum;\\n    }\\n\\n    function updateSocket(string calldata newSocket) external {\\n        require(\\n            registry[msg.sender].status == IQuorumRegistry.Status.ACTIVE,\\n            \\\"RegistryBase.updateSocket: Can only update socket if active on the service\\\"\\n        );\\n        emit SocketUpdate(msg.sender, newSocket);\\n    }\\n\\n\\n    // INTERNAL FUNCTIONS\\n    /**\\n     * @notice Called when the total number of operators has changed.\\n     * Sets the `toBlockNumber` field on the last entry *so far* in thedynamic array `totalOperatorsHistory` to the current `block.number`,\\n     * recording that the previous entry is *no longer the latest* and the block number at which the next was added.\\n     * Pushes a new entry to `totalOperatorsHistory`, with `index` field set equal to the new amount of operators, recording the new number\\n     * of total operators (and leaving the `toBlockNumber` field at zero, signaling that this is the latest entry in the array)\\n     */\\n    function _updateTotalOperatorsHistory() internal {\\n        // set the 'toBlockNumber' field on the last entry *so far* in 'totalOperatorsHistory' to the current block number\\n        totalOperatorsHistory[totalOperatorsHistory.length - 1].toBlockNumber = uint32(block.number);\\n        // push a new entry to 'totalOperatorsHistory', with 'index' field set equal to the new amount of operators\\n        OperatorIndex memory _totalOperators;\\n        _totalOperators.index = uint32(operatorList.length);\\n        totalOperatorsHistory.push(_totalOperators);\\n    }\\n\\n    /**\\n     * @notice Remove the operator from active status. Removes the operator with the given `pubkeyHash` from the `index` in `operatorList`,\\n     * updates operatorList and index histories, and performs other necessary updates for removing operator\\n     */\\n    function _removeOperator(address operator, bytes32 pubkeyHash, BN254.G1Point memory pk, bytes32 apkHash, uint32 index) internal virtual {\\n        // remove the operator's stake\\n        uint32 updateBlockNumber = _removeOperatorStake(pubkeyHash);\\n\\n        // store blockNumber at which operator index changed (stopped being applicable)\\n        pubkeyHashToIndexHistory[pubkeyHash][pubkeyHashToIndexHistory[pubkeyHash].length - 1].toBlockNumber =\\n            uint32(block.number);\\n\\n        // remove the operator at `index` from the `operatorList`\\n        address swappedOperator = _popRegistrant(index);\\n\\n        // @notice Registrant must continue to serve until the latest time at which an active task expires. this info is used in challenges\\n        uint32 latestTime = serviceManager.latestTime();\\n        // committing to not signing off on any more middleware tasks\\n        registry[operator].status = IQuorumRegistry.Status.INACTIVE;\\n\\n        // Emit `Deregistration` event\\n        emit Deregistration(operator, swappedOperator, pk, apkHash);\\n\\n        emit StakeUpdate(\\n            operator,\\n            // new stakes are zero\\n            0,\\n            0,\\n            uint32(block.number),\\n            updateBlockNumber\\n        );\\n    }\\n\\n    /**\\n     * @notice Removes the stakes of the operator with pubkeyHash `pubkeyHash`\\n     */\\n    function _removeOperatorStake(bytes32 pubkeyHash) internal returns(uint32) {\\n        // gas saving by caching length here\\n        uint256 pubkeyHashToStakeHistoryLengthMinusOne = pubkeyHashToStakeHistory[pubkeyHash].length - 1;\\n\\n        // determine current stakes\\n        OperatorStake memory currentStakes =\\n            pubkeyHashToStakeHistory[pubkeyHash][pubkeyHashToStakeHistoryLengthMinusOne];\\n        //set nextUpdateBlockNumber in current stakes\\n        pubkeyHashToStakeHistory[pubkeyHash][pubkeyHashToStakeHistoryLengthMinusOne].nextUpdateBlockNumber =\\n            uint32(block.number);\\n\\n        /**\\n         * @notice recording the information pertaining to change in stake for this operator in the history. operator stakes are set to 0 here.\\n         */\\n        pubkeyHashToStakeHistory[pubkeyHash].push(\\n            OperatorStake({\\n                // recording the current block number where the operator stake got updated\\n                updateBlockNumber: uint32(block.number),\\n                // mark as 0 since the next update has not yet occurred\\n                nextUpdateBlockNumber: 0,\\n                // setting the operator's stakes to 0\\n                firstQuorumStake: 0,\\n                secondQuorumStake: 0\\n            })\\n        );\\n\\n        // subtract the amounts staked by the operator that is getting deregistered from the total stake\\n        // copy latest totalStakes to memory\\n        OperatorStake memory _totalStake = totalStakeHistory[totalStakeHistory.length - 1];\\n        _totalStake.firstQuorumStake -= currentStakes.firstQuorumStake;\\n        _totalStake.secondQuorumStake -= currentStakes.secondQuorumStake;\\n        // update storage of total stake\\n        _recordTotalStakeUpdate(_totalStake);\\n\\n        emit StakeUpdate(\\n            msg.sender,\\n            // new stakes are zero\\n            0,\\n            0,\\n            uint32(block.number),\\n            currentStakes.updateBlockNumber\\n            );\\n        return currentStakes.updateBlockNumber;\\n    }\\n\\n    /**\\n     * @notice Removes the registrant at the given `index` from the `operatorList`\\n     * @return swappedOperator is the operator who was swapped with the removed operator in the operatorList,\\n     * or the *zero address* in the case that the removed operator was already the list operator in the operatorList.\\n     */\\n    function _popRegistrant(uint32 index) internal returns (address swappedOperator) {\\n        // gas saving by caching length here\\n        uint256 operatorListLengthMinusOne = operatorList.length - 1;\\n        // Update index info for operator at end of list, if they are not the same as the removed operator\\n        if (index < operatorListLengthMinusOne) {\\n            // get existing operator at end of list, and retrieve their pubkeyHash\\n            swappedOperator = operatorList[operatorListLengthMinusOne];\\n            Operator memory registrant = registry[swappedOperator];\\n            bytes32 pubkeyHash = registrant.pubkeyHash;\\n            // store blockNumber at which operator index changed\\n            // same operation as above except pubkeyHash is now different (since different operator)\\n            pubkeyHashToIndexHistory[pubkeyHash][pubkeyHashToIndexHistory[pubkeyHash].length - 1].toBlockNumber =\\n                uint32(block.number);\\n            // push new 'OperatorIndex' struct to operator's array of historical indices, with 'index' set equal to 'index' input\\n            OperatorIndex memory operatorIndex;\\n            operatorIndex.index = index;\\n            pubkeyHashToIndexHistory[pubkeyHash].push(operatorIndex);\\n\\n            // move 'swappedOperator' into 'index' slot in operatorList (swapping them with removed operator)\\n            operatorList[index] = swappedOperator;\\n        }\\n\\n        // slither-disable-next-line costly-loop\\n        operatorList.pop();\\n\\n        // Update totalOperatorsHistory\\n        _updateTotalOperatorsHistory();\\n\\n        return swappedOperator;\\n    }\\n\\n    /// @notice Adds the Operator `operator` with the given `pubkeyHash` to the `operatorList` and performs necessary related updates.\\n    function _addRegistrant(\\n        address operator,\\n        bytes32 pubkeyHash,\\n        OperatorStake memory _operatorStake\\n    )\\n        internal virtual\\n    {\\n        // store the Operator's info in mapping\\n        registry[operator] = Operator({\\n            pubkeyHash: pubkeyHash,\\n            status: IQuorumRegistry.Status.ACTIVE,\\n            fromTaskNumber: serviceManager.taskNumber()\\n        });\\n\\n        // add the operator to the list of operators\\n        operatorList.push(operator);\\n\\n        // add the `updateBlockNumber` info\\n        _operatorStake.updateBlockNumber = uint32(block.number);\\n        // check special case that operator is re-registering (and thus already has some history)\\n        if (pubkeyHashToStakeHistory[pubkeyHash].length != 0) {\\n            // correctly set the 'nextUpdateBlockNumber' field for the re-registering operator's oldest history entry\\n            pubkeyHashToStakeHistory[pubkeyHash][pubkeyHashToStakeHistory[pubkeyHash].length - 1].nextUpdateBlockNumber\\n                = uint32(block.number);\\n        }\\n        // push the new stake for the operator to storage\\n        pubkeyHashToStakeHistory[pubkeyHash].push(_operatorStake);\\n\\n        // record `operator`'s index in list of operators\\n        OperatorIndex memory operatorIndex;\\n        operatorIndex.index = uint32(operatorList.length - 1);\\n        pubkeyHashToIndexHistory[pubkeyHash].push(operatorIndex);\\n\\n        // copy latest totalStakes to memory\\n        OperatorStake memory _totalStake = totalStakeHistory[totalStakeHistory.length - 1];\\n        // add operator stakes to total stake (in memory)\\n        _totalStake.firstQuorumStake += _operatorStake.firstQuorumStake;\\n        _totalStake.secondQuorumStake += _operatorStake.secondQuorumStake;\\n        // update storage of total stake\\n        _recordTotalStakeUpdate(_totalStake);\\n\\n        // Update totalOperatorsHistory array\\n        _updateTotalOperatorsHistory();\\n\\n        emit StakeUpdate(\\n            operator,\\n            _operatorStake.firstQuorumStake,\\n            _operatorStake.secondQuorumStake,\\n            uint32(block.number),\\n            // no previous update block number -- use 0 instead\\n            0\\n        );\\n    }\\n\\n    /**\\n     * TODO: critique: \\\"Currently only `_registrationStakeEvaluation` uses the `uint8 registrantType` input -- we should **EITHER** store this\\n     * and keep using it in other places as well, **OR** stop using it altogether\\\"\\n     */\\n    /**\\n     * @notice Used inside of inheriting contracts to validate the registration of `operator` and find their `OperatorStake`.\\n     * @dev This function does **not** update the stored state of the operator's stakes -- storage updates are performed elsewhere.\\n     * @return The newly calculated `OperatorStake` for `operator`, stored in memory but not yet committed to storage.\\n     */\\n    function _registrationStakeEvaluation(address operator, uint8 operatorType)\\n        internal\\n        returns (OperatorStake memory)\\n    {\\n        // verify that the `operator` is not already registered\\n        require(\\n            registry[operator].status == IQuorumRegistry.Status.INACTIVE,\\n            \\\"RegistryBase._registrationStakeEvaluation: Operator is already registered\\\"\\n        );\\n\\n        OperatorStake memory _operatorStake;\\n\\n        // if first bit of operatorType is '1', then operator wants to be a validator for the first quorum\\n        if ((operatorType & 1) == 1) {\\n            _operatorStake.firstQuorumStake = uint96(weightOfOperator(operator, 0));\\n            // check if minimum requirement has been met\\n            if (_operatorStake.firstQuorumStake < minimumStakeFirstQuorum) {\\n                _operatorStake.firstQuorumStake = uint96(0);\\n            }\\n        }\\n\\n        //if second bit of operatorType is '1', then operator wants to be a validator for the second quorum\\n        if ((operatorType & 2) == 2) {\\n            _operatorStake.secondQuorumStake = uint96(weightOfOperator(operator, 1));\\n            // check if minimum requirement has been met\\n            if (_operatorStake.secondQuorumStake < minimumStakeSecondQuorum) {\\n                _operatorStake.secondQuorumStake = uint96(0);\\n            }\\n        }\\n\\n        require(\\n            _operatorStake.firstQuorumStake > 0 || _operatorStake.secondQuorumStake > 0,\\n            \\\"RegistryBase._registrationStakeEvaluation: Must register as at least one type of validator\\\"\\n        );\\n\\n        return _operatorStake;\\n    }\\n\\n    /**\\n     * @notice Finds the updated stake for `operator`, stores it and records the update.\\n     * @dev **DOES NOT UPDATE `totalStake` IN ANY WAY** -- `totalStake` updates must be done elsewhere.\\n     */\\n    function _updateOperatorStake(address operator, bytes32 pubkeyHash, OperatorStake memory currentOperatorStake, uint256 insertAfter)\\n        internal\\n        returns (OperatorStake memory updatedOperatorStake)\\n    {\\n        // determine new stakes\\n        updatedOperatorStake.updateBlockNumber = uint32(block.number);\\n        updatedOperatorStake.firstQuorumStake = weightOfOperator(operator, 0);\\n        updatedOperatorStake.secondQuorumStake = weightOfOperator(operator, 1);\\n\\n        // check if minimum requirements have been met\\n        if (updatedOperatorStake.firstQuorumStake < minimumStakeFirstQuorum) {\\n            updatedOperatorStake.firstQuorumStake = uint96(0);\\n        }\\n        if (updatedOperatorStake.secondQuorumStake < minimumStakeSecondQuorum) {\\n            updatedOperatorStake.secondQuorumStake = uint96(0);\\n        }\\n        // set nextUpdateBlockNumber in prev stakes\\n        pubkeyHashToStakeHistory[pubkeyHash][pubkeyHashToStakeHistory[pubkeyHash].length - 1].nextUpdateBlockNumber =\\n            uint32(block.number);\\n        // push new stake to storage\\n        pubkeyHashToStakeHistory[pubkeyHash].push(updatedOperatorStake);\\n\\n        emit StakeUpdate(\\n            operator,\\n            updatedOperatorStake.firstQuorumStake,\\n            updatedOperatorStake.secondQuorumStake,\\n            uint32(block.number),\\n            currentOperatorStake.updateBlockNumber\\n            );\\n    }\\n\\n    /// @notice Records that the `totalStake` is now equal to the input param @_totalStake\\n    function _recordTotalStakeUpdate(OperatorStake memory _totalStake) internal {\\n        _totalStake.updateBlockNumber = uint32(block.number);\\n        totalStakeHistory[totalStakeHistory.length - 1].nextUpdateBlockNumber = uint32(block.number);\\n        totalStakeHistory.push(_totalStake);\\n    }\\n\\n    /// @notice Verify that the `operator` is an active operator and that they've provided the correct `index`\\n    function _deregistrationCheck(address operator, uint32 index) internal view {\\n        require(\\n            registry[operator].status == IQuorumRegistry.Status.ACTIVE,\\n            \\\"RegistryBase._deregistrationCheck: Operator is not registered\\\"\\n        );\\n\\n        require(operator == operatorList[index], \\\"RegistryBase._deregistrationCheck: Incorrect index supplied\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/IBLSPublicKeyCompendium.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"../libraries/BN254.sol\\\";\\n\\n/**\\n * @title Minimal interface for the `BLSPublicKeyCompendium` contract.\\n * @author Layr Labs, Inc.\\n */\\ninterface IBLSPublicKeyCompendium {\\n    /**\\n     * @notice mapping from operator address to pubkey hash.\\n     * Returns *zero* if the `operator` has never registered, and otherwise returns the hash of the public key of the operator.\\n     */\\n    function operatorToPubkeyHash(address operator) external view returns (bytes32);\\n\\n    /**\\n     * @notice mapping from pubkey hash to operator address.\\n     * Returns *zero* if no operator has ever registered the public key corresponding to `pubkeyHash`,\\n     * and otherwise returns the (unique) registered operator who owns the BLS public key that is the preimage of `pubkeyHash`.\\n     */\\n    function pubkeyHashToOperator(bytes32 pubkeyHash) external view returns (address);\\n\\n    /**\\n     * @notice Called by an operator to register themselves as the owner of a BLS public key and reveal their G1 and G2 public key.\\n     * @param s is the field element of the operator's Schnorr signature\\n     * @param rPoint is the group element of the operator's Schnorr signature\\n     * @param pubkeyG1 is the the G1 pubkey of the operator\\n     * @param pubkeyG2 is the G2 with the same private key as the pubkeyG1\\n     */\\n    function registerBLSPublicKey(uint256 s, BN254.G1Point memory rPoint, BN254.G1Point memory pubkeyG1, BN254.G2Point memory pubkeyG2) external;\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/IBLSRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IQuorumRegistry.sol\\\";\\n\\n/**\\n * @title Minimal interface extension to `IQuorumRegistry`.\\n * @author Layr Labs, Inc.\\n * @notice Adds BLS-specific functions to the base interface.\\n */\\ninterface IBLSRegistry is IQuorumRegistry {\\n    /// @notice Data structure used to track the history of the Aggregate Public Key of all operators\\n    struct ApkUpdate {\\n        // keccak256(apk_x0, apk_x1, apk_y0, apk_y1)\\n        bytes32 apkHash;\\n        // block number at which the update occurred\\n        uint32 blockNumber;\\n    }\\n\\n    /**\\n     * @notice get hash of a historical aggregated public key corresponding to a given index;\\n     * called by checkSignatures in BLSSignatureChecker.sol.\\n     */\\n    function getCorrectApkHash(uint256 index, uint32 blockNumber) external returns (bytes32);\\n\\n    /// @notice returns the `ApkUpdate` struct at `index` in the list of APK updates\\n    function apkUpdates(uint256 index) external view returns (ApkUpdate memory);\\n\\n    /// @notice returns the APK hash that resulted from the `index`th APK update\\n    function apkHashes(uint256 index) external view returns (bytes32);\\n\\n    /// @notice returns the block number at which the `index`th APK update occurred\\n    function apkUpdateBlockNumbers(uint256 index) external view returns (uint32);\\n}\\n\"\r\n    },\r\n    \"src/contracts/libraries/BN254.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED AND MIT\\n// several functions are taken or adapted from https://github.com/HarryR/solcrypto/blob/master/contracts/altbn128.sol (MIT license):\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to\\n// deal in the Software without restriction, including without limitation the\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\\n// sell copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\\n// IN THE SOFTWARE.\\n\\n// The remainder of the code is written by LayrLabs Inc. and UNLICENSED\\n\\npragma solidity ^0.8.12;\\n\\n/**\\n * @title Library for operations on the BN254 elliptic curve.\\n * @author Layr Labs, Inc.\\n * @notice Contains BN254 parameters, common operations (addition, scalar mul, pairing), and BLS signature functionality.\\n */\\nlibrary BN254 {\\n    // modulus for the underlying field F_p of the elliptic curve\\n    uint256 internal constant FP_MODULUS =\\n        21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n    // modulus for the underlying field F_r of the elliptic curve\\n    uint256 internal constant FR_MODULUS =\\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n    // primitive root of unity \\n    uint256 internal constant OMEGA = 10359452186428527605436343203440067497552205259388878191021578220384701716497;\\n    \\n\\n    struct G1Point {\\n        uint256 X;\\n        uint256 Y;\\n    }\\n\\n    // Encoding of field elements is: X[1] * i + X[0]\\n    struct G2Point {\\n        uint256[2] X;\\n        uint256[2] Y;\\n    }\\n\\n    // generator of group G2\\n    /// @dev Generator point in F_q2 is of the form: (x0 + ix1, y0 + iy1).\\n    uint256 internal constant G2x1 =\\n        11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 internal constant G2x0 =\\n        10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 internal constant G2y1 =\\n        4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 internal constant G2y0 =\\n        8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n    /// @notice returns the G2 generator\\n    /// @dev mind the ordering of the 1s and 0s!\\n    ///      this is because of the (unknown to us) convention used in the bn254 pairing precompile contract\\n    ///      \\\"Elements a * i + b of F_p^2 are encoded as two elements of F_p, (a, b).\\\"\\n    ///      https://github.com/ethereum/EIPs/blob/master/EIPS/eip-197.md#encoding\\n    function generatorG2() internal pure returns (G2Point memory) {\\n        return G2Point(\\n            [G2x1, G2x0], [G2y1, G2y0]\\n        );\\n    }\\n\\n    // negation of the generator of group G2\\n    /// @dev Generator point in F_q2 is of the form: (x0 + ix1, y0 + iy1).\\n    uint256 internal constant nG2x1 =\\n        11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 internal constant nG2x0 =\\n        10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 internal constant nG2y1 =\\n        17805874995975841540914202342111839520379459829704422454583296818431106115052;\\n    uint256 internal constant nG2y0 =\\n        13392588948715843804641432497768002650278120570034223513918757245338268106653;\\n    function negGeneratorG2() internal pure returns (G2Point memory) {\\n        return G2Point(\\n            [nG2x1, nG2x0], [nG2y1, nG2y0]\\n        );\\n    }\\n\\n    // first power of srs in G2\\n    // TODO: change in production\\n    uint256 internal constant G2SRSx1 = 7912312892787135728292535536655271843828059318189722219035249994421084560563;\\n    uint256 internal constant G2SRSx0 = 21039730876973405969844107393779063362038454413254731404052240341412356318284;\\n    uint256 internal constant G2SRSy1 = 18697407556011630376420900106252341752488547575648825575049647403852275261247;\\n    uint256 internal constant G2SRSy0 = 7586489485579523767759120334904353546627445333297951253230866312564920951171;\\n    function G2SRSFirstPower() internal pure returns (G2Point memory) {\\n        return G2Point(\\n            [G2SRSx0, G2SRSx1], [G2SRSy0, G2SRSy1]\\n        );\\n    }\\n\\n    bytes32 internal constant powersOfTauMerkleRoot =\\n        0x22c998e49752bbb1918ba87d6d59dd0e83620a311ba91dd4b2cc84990b31b56f;\\n\\n\\n    /**\\n     * @param p Some point in G1.\\n     * @return The negation of `p`, i.e. p.plus(p.negate()) should be zero.\\n     */\\n    function negate(G1Point memory p) internal pure returns (G1Point memory) {\\n        // The prime q in the base field F_q for G1\\n        if (p.X == 0 && p.Y == 0) {\\n            return G1Point(0, 0);\\n        } else {\\n            return G1Point(p.X, FP_MODULUS - (p.Y % FP_MODULUS));\\n        }\\n    }\\n\\n    /**\\n     * @return r the sum of two points of G1\\n     */\\n    function plus(\\n        G1Point memory p1,\\n        G1Point memory p2\\n    ) internal view returns (G1Point memory r) {\\n        uint256[4] memory input;\\n        input[0] = p1.X;\\n        input[1] = p1.Y;\\n        input[2] = p2.X;\\n        input[3] = p2.Y;\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 6, input, 0x80, r, 0x40)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 {\\n                invalid()\\n            }\\n        }\\n\\n        require(success, \\\"ec-add-failed\\\");\\n    }\\n\\n    /**\\n     * @return r the product of a point on G1 and a scalar, i.e.\\n     *         p == p.scalar_mul(1) and p.plus(p) == p.scalar_mul(2) for all\\n     *         points p.\\n     */\\n    function scalar_mul(\\n        G1Point memory p,\\n        uint256 s\\n    ) internal view returns (G1Point memory r) {\\n        uint256[3] memory input;\\n        input[0] = p.X;\\n        input[1] = p.Y;\\n        input[2] = s;\\n        bool success;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 7, input, 0x60, r, 0x40)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 {\\n                invalid()\\n            }\\n        }\\n        require(success, \\\"ec-mul-failed\\\");\\n    }\\n\\n    /**\\n     *  @return The result of computing the pairing check\\n     *         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n     *         For example,\\n     *         pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\\n     */\\n    function pairing(\\n        G1Point memory a1,\\n        G2Point memory a2,\\n        G1Point memory b1,\\n        G2Point memory b2\\n    ) internal view returns (bool) {\\n        G1Point[2] memory p1 = [a1, b1];\\n        G2Point[2] memory p2 = [a2, b2];\\n\\n        uint256[12] memory input;\\n\\n        for (uint256 i = 0; i < 2; i++) {\\n            uint256 j = i * 6;\\n            input[j + 0] = p1[i].X;\\n            input[j + 1] = p1[i].Y;\\n            input[j + 2] = p2[i].X[0];\\n            input[j + 3] = p2[i].X[1];\\n            input[j + 4] = p2[i].Y[0];\\n            input[j + 5] = p2[i].Y[1];\\n        }\\n\\n        uint256[1] memory out;\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(\\n                sub(gas(), 2000),\\n                8,\\n                input,\\n                mul(12, 0x20),\\n                out,\\n                0x20\\n            )\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 {\\n                invalid()\\n            }\\n        }\\n\\n        require(success, \\\"pairing-opcode-failed\\\");\\n\\n        return out[0] != 0;\\n    }\\n\\n    /**\\n     * @notice This function is functionally the same as pairing(), however it specifies a gas limit\\n     *         the user can set, as a precompile may use the entire gas budget if it reverts.\\n     */\\n    function safePairing(\\n        G1Point memory a1,\\n        G2Point memory a2,\\n        G1Point memory b1,\\n        G2Point memory b2,\\n        uint256 pairingGas\\n    ) internal view returns (bool, bool) {\\n        G1Point[2] memory p1 = [a1, b1];\\n        G2Point[2] memory p2 = [a2, b2];\\n\\n        uint256[12] memory input;\\n\\n        for (uint256 i = 0; i < 2; i++) {\\n            uint256 j = i * 6;\\n            input[j + 0] = p1[i].X;\\n            input[j + 1] = p1[i].Y;\\n            input[j + 2] = p2[i].X[0];\\n            input[j + 3] = p2[i].X[1];\\n            input[j + 4] = p2[i].Y[0];\\n            input[j + 5] = p2[i].Y[1];\\n        }\\n\\n        uint256[1] memory out;\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(\\n                pairingGas,\\n                8,\\n                input,\\n                mul(12, 0x20),\\n                out,\\n                0x20\\n            )\\n        }\\n\\n        //Out is the output of the pairing precompile, either 0 or 1 based on whether the two pairings are equal.\\n        //Success is true if the precompile actually goes through (aka all inputs are valid)\\n\\n        return (success, out[0] != 0);\\n    }\\n\\n    /// @return the keccak256 hash of the G1 Point\\n    /// @dev used for BLS signatures\\n    function hashG1Point(\\n        BN254.G1Point memory pk\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(pk.X, pk.Y));\\n    }\\n\\n\\n    /**\\n     * @notice adapted from https://github.com/HarryR/solcrypto/blob/master/contracts/altbn128.sol\\n     */\\n    function hashToG1(bytes32 _x) internal view returns (uint256, uint256) {\\n        uint256 beta = 0;\\n        uint256 y = 0;\\n\\n        // XXX: Gen Order (n) or Field Order (p) ?\\n        uint256 x = uint256(_x) % FP_MODULUS;\\n\\n        while( true ) {\\n            (beta, y) = findYFromX(x);\\n\\n            // y^2 == beta\\n            if( beta == mulmod(y, y, FP_MODULUS) ) {\\n                return (x, y);\\n            }\\n\\n            x = addmod(x, 1, FP_MODULUS);\\n        }\\n        return (0, 0);\\n    }\\n\\n    /**\\n    * Given X, find Y\\n    *\\n    *   where y = sqrt(x^3 + b)\\n    *\\n    * Returns: (x^3 + b), y\\n    */\\n    function findYFromX(uint256 x)\\n        internal view returns(uint256, uint256)\\n    {\\n        // beta = (x^3 + b) % p\\n        uint256 beta = addmod(mulmod(mulmod(x, x, FP_MODULUS), x, FP_MODULUS), 3, FP_MODULUS);\\n\\n        // y^2 = x^3 + b\\n        // this acts like: y = sqrt(beta) = beta^((p+1) / 4)\\n        uint256 y = expMod(beta, 0xc19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f52, FP_MODULUS);\\n\\n        return (beta, y);\\n    }\\n\\n    function expMod(uint256 _base, uint256 _exponent, uint256 _modulus) internal view returns (uint256 retval) {\\n        bool success;\\n        uint256[1] memory output;\\n        uint[6] memory input;\\n        input[0] = 0x20;        // baseLen = new(big.Int).SetBytes(getData(input, 0, 32))\\n        input[1] = 0x20;        // expLen  = new(big.Int).SetBytes(getData(input, 32, 32))\\n        input[2] = 0x20;        // modLen  = new(big.Int).SetBytes(getData(input, 64, 32))\\n        input[3] = _base;\\n        input[4] = _exponent;\\n        input[5] = _modulus;\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 5, input, 0xc0, output, 0x20)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n        require(success);\\n        return output[0];\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/IRegistryPermission.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Interface for the primary 'RegistryPermission' contract for Mantle.\\n * @author mantle, Inc.\\n * @notice See the `RegistryPermission` contract itself for implementation details.\\n */\\ninterface IRegistryPermission {\\n    function addOperatorRegisterPermission(address operator) external;\\n    function addOperatorDeregisterPermission(address operator) external;\\n    function addDataStoreRollupPermission(address pusher) external;\\n    function addDelegatorPermission(address delegator) external;\\n\\n    function changeOperatorRegisterPermission(address operator, bool status) external;\\n    function changeOperatorDeregisterPermission(address operator, bool status) external;\\n    function changeDataStoreRollupPermission(address pusher, bool status) external;\\n    function changeDelegatorPermission(address delegator, bool status) external;\\n\\n    function getOperatorRegisterPermission(address operator) external view returns (bool);\\n    function getOperatorDeregisterPermission(address operator) external view returns (bool);\\n    function getDataStoreRollupPermission(address pusher) external view returns (bool);\\n    function getDelegatorPermission(address delegator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/IServiceManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IEigenLayrDelegation.sol\\\";\\n\\n/**\\n * @title Interface for a `ServiceManager`-type contract.\\n * @author Layr Labs, Inc.\\n */\\n// TODO: provide more functions for this spec\\ninterface IServiceManager {\\n    /// @notice Returns the current 'taskNumber' for the middleware\\n    function taskNumber() external view returns (uint32);\\n\\n    /// @notice The Delegation contract of EigenLayer.\\n    function eigenLayrDelegation() external view returns (IEigenLayrDelegation);\\n\\n    /// @notice Returns the `latestTime` until which operators must serve.\\n    function latestTime() external view returns (uint32);\\n\\n    function owner() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/IQuorumRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IRegistry.sol\\\";\\n\\n/**\\n * @title Interface for a `Registry`-type contract that uses either 1 or 2 quorums.\\n * @author Layr Labs, Inc.\\n * @notice This contract does not currently support n-quorums where n >= 3.\\n * Note in particular the presence of only `firstQuorumStake` and `secondQuorumStake` in the `OperatorStake` struct.\\n */\\ninterface IQuorumRegistry is IRegistry {\\n    // DATA STRUCTURES\\n    enum Status\\n    {\\n        // default is inactive\\n        INACTIVE,\\n        ACTIVE\\n    }\\n\\n    /**\\n     * @notice  Data structure for storing info on operators to be used for:\\n     * - sending data by the sequencer\\n     * - payment and associated challenges\\n     */\\n    struct Operator {\\n        // hash of pubkey of the operator\\n        bytes32 pubkeyHash;\\n        // start taskNumber from which the  operator has been registered\\n        uint32 fromTaskNumber;\\n        // indicates whether the operator is actively registered for serving the middleware or not\\n        Status status;\\n    }\\n\\n    // struct used to give definitive ordering to operators at each blockNumber\\n    struct OperatorIndex {\\n        // blockNumber number at which operator index changed\\n        // note that the operator's index is different *for this block number*, i.e. the *new* index is *inclusive* of this value\\n        uint32 toBlockNumber;\\n        // index of the operator in array of operators, or the total number of operators if in the 'totalOperatorsHistory'\\n        uint32 index;\\n    }\\n\\n    /// @notice struct used to store the stakes of an individual operator or the sum of all operators' stakes, for storage\\n    struct OperatorStake {\\n        // the block number at which the stake amounts were updated and stored\\n        uint32 updateBlockNumber;\\n        // the block number at which the *next update* occurred.\\n        /// @notice This entry has the value **0** until another update takes place.\\n        uint32 nextUpdateBlockNumber;\\n        // stake weight for the first quorum\\n        uint96 firstQuorumStake;\\n        // stake weight for the second quorum. Will always be zero in the event that only one quorum is used\\n        uint96 secondQuorumStake;\\n    }\\n\\n    function getLengthOfTotalStakeHistory() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the `index`-th entry in the dynamic array of total stake, `totalStakeHistory`.\\n     * @dev Function will revert in the event that `index` is out-of-bounds.\\n     */\\n    function getTotalStakeFromIndex(uint256 index) external view returns (OperatorStake memory);\\n\\n    /// @notice Returns the stored pubkeyHash for the specified `operator`.\\n    function getOperatorPubkeyHash(address operator) external view returns (bytes32);\\n\\n    /// @notice Returns task number from when `operator` has been registered.\\n    function getFromTaskNumberForOperator(address operator) external view returns (uint32);\\n\\n    /**\\n     * @notice Returns the stake weight corresponding to `pubkeyHash`, at the\\n     * `index`-th entry in the `pubkeyHashToStakeHistory[pubkeyHash]` array.\\n     * @param pubkeyHash Hash of the public key of the operator of interest.\\n     * @param index Array index for lookup, within the dynamic array `pubkeyHashToStakeHistory[pubkeyHash]`.\\n     * @dev Function will revert if `index` is out-of-bounds.\\n     */\\n    function getStakeFromPubkeyHashAndIndex(bytes32 pubkeyHash, uint256 index)\\n        external\\n        view\\n        returns (OperatorStake memory);\\n\\n    /**\\n     * @notice Checks that the `operator` was active at the `blockNumber`, using the specified `stakeHistoryIndex` as proof.\\n     * @param operator is the operator of interest\\n     * @param blockNumber is the block number of interest\\n     * @param stakeHistoryIndex specifies an index in `pubkeyHashToStakeHistory[pubkeyHash]`, where `pubkeyHash` is looked up\\n     * in `registry[operator].pubkeyHash`\\n     * @return 'true' if it is succesfully proven that  the `operator` was active at the `blockNumber`, and 'false' otherwise\\n     * @dev In order for this function to return 'true', the inputs must satisfy all of the following list:\\n     * 1) `pubkeyHashToStakeHistory[pubkeyHash][index].updateBlockNumber <= blockNumber`\\n     * 2) `pubkeyHashToStakeHistory[pubkeyHash][index].nextUpdateBlockNumber` must be either `0` (signifying no next update) or\\n     * is must be strictly greater than `blockNumber`\\n     * 3) `pubkeyHashToStakeHistory[pubkeyHash][index].firstQuorumStake > 0`\\n     * or `pubkeyHashToStakeHistory[pubkeyHash][index].secondQuorumStake > 0`, i.e. the operator had nonzero stake\\n     * @dev Note that a return value of 'false' does not guarantee that the `operator` was inactive at `blockNumber`, since a\\n     * bad `stakeHistoryIndex` can be supplied in order to obtain a response of 'false'.\\n     */\\n    function checkOperatorActiveAtBlockNumber(\\n        address operator,\\n        uint256 blockNumber,\\n        uint256 stakeHistoryIndex\\n        ) external view returns (bool);\\n\\n    /**\\n     * @notice Checks that the `operator` was inactive at the `blockNumber`, using the specified `stakeHistoryIndex` as proof.\\n     * @param operator is the operator of interest\\n     * @param blockNumber is the block number of interest\\n     * @param stakeHistoryIndex specifies an index in `pubkeyHashToStakeHistory[pubkeyHash]`, where `pubkeyHash` is looked up\\n     * in `registry[operator].pubkeyHash`\\n     * @return 'true' if it is succesfully proven that  the `operator` was inactive at the `blockNumber`, and 'false' otherwise\\n     * @dev In order for this function to return 'true', the inputs must satisfy all of the following list:\\n     * 1) `pubkeyHashToStakeHistory[pubkeyHash][index].updateBlockNumber <= blockNumber`\\n     * 2) `pubkeyHashToStakeHistory[pubkeyHash][index].nextUpdateBlockNumber` must be either `0` (signifying no next update) or\\n     * is must be strictly greater than `blockNumber`\\n     * 3) `pubkeyHashToStakeHistory[pubkeyHash][index].firstQuorumStake > 0`\\n     * or `pubkeyHashToStakeHistory[pubkeyHash][index].secondQuorumStake > 0`, i.e. the operator had nonzero stake\\n     * @dev Note that a return value of 'false' does not guarantee that the `operator` was active at `blockNumber`, since a\\n     * bad `stakeHistoryIndex` can be supplied in order to obtain a response of 'false'.\\n     */\\n    function checkOperatorInactiveAtBlockNumber(\\n        address operator,\\n        uint256 blockNumber,\\n        uint256 stakeHistoryIndex\\n        ) external view returns (bool);\\n\\n    /**\\n     * @notice Looks up the `operator`'s index in the dynamic array `operatorList` at the specified `blockNumber`.\\n     * @param index Used to specify the entry within the dynamic array `pubkeyHashToIndexHistory[pubkeyHash]` to \\n     * read data from, where `pubkeyHash` is looked up from `operator`'s registration info\\n     * @param blockNumber Is the desired block number at which we wish to query the operator's position in the `operatorList` array\\n     * @dev Function will revert in the event that the specified `index` input does not identify the appropriate entry in the\\n     * array `pubkeyHashToIndexHistory[pubkeyHash]` to pull the info from.\\n    */\\n    function getOperatorIndex(address operator, uint32 blockNumber, uint32 index) external view returns (uint32);\\n\\n    /**\\n     * @notice Looks up the number of total operators at the specified `blockNumber`.\\n     * @param index Input used to specify the entry within the dynamic array `totalOperatorsHistory` to read data from.\\n     * @dev This function will revert if the provided `index` is out of bounds.\\n    */\\n    function getTotalOperators(uint32 blockNumber, uint32 index) external view returns (uint32);\\n\\n    /// @notice Returns the current number of operators of this service.\\n    function numOperators() external view returns (uint32);\\n\\n    /**\\n     * @notice Returns the most recent stake weights for the `operator`\\n     * @dev Function returns weights of **0** in the event that the operator has no stake history\\n     */\\n    function operatorStakes(address operator) external view returns (uint96, uint96);\\n\\n    /// @notice Returns the stake amounts from the latest entry in `totalStakeHistory`.\\n    function totalStake() external view returns (uint96, uint96);\\n}\\n\"\r\n    },\r\n    \"src/contracts/libraries/BytesLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary BytesLib {\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for { let cc := add(_postBytes, 0x20) } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } { mstore(mc, mload(cc)) }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(fslot, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } { sstore(sc, mload(mc)) }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                // solhint-disable-next-line no-unused-vars\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } { sstore(sc, mload(mc)) }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(bytes memory _bytes, uint256 _start, uint256 _length) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } { mstore(mc, mload(cc)) }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for { let cc := add(_postBytes, 0x20) }\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        // solhint-disable-next-line no-empty-blocks\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/middleware/VoteWeigherBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/IInvestmentManager.sol\\\";\\nimport \\\"./VoteWeigherBaseStorage.sol\\\";\\n\\n// import \\\"forge-std/Test.sol\\\";\\n\\n/**\\n * @title A simple implementation of the `IVoteWeigher` interface.\\n * @author Layr Labs, Inc.\\n * @notice This contract is used for\\n * - computing the total weight of an operator for any of the quorums that are considered\\n * by the middleware\\n * - addition and removal of strategies and the associated weighting criteria that are assigned\\n * by the middleware for each of the quorum(s)\\n * @dev\\n */\\nabstract contract VoteWeigherBase is VoteWeigherBaseStorage {\\n    /// @notice emitted when `strategy` has been added to the array at `strategiesConsideredAndMultipliers[quorumNumber]`\\n    event StrategyAddedToQuorum(uint256 indexed quorumNumber, IInvestmentStrategy strategy);\\n    /// @notice emitted when `strategy` has removed from the array at `strategiesConsideredAndMultipliers[quorumNumber]`\\n    event StrategyRemovedFromQuorum(uint256 indexed quorumNumber, IInvestmentStrategy strategy);\\n\\n    /// @notice when applied to a function, ensures that the function is only callable by the current `owner` of the `serviceManager`\\n    modifier onlyServiceManagerOwner() {\\n        require(msg.sender == serviceManager.owner(), \\\"onlyServiceManagerOwner\\\");\\n        _;\\n    }\\n\\n    /// @notice Sets the (immutable) `delegation` and `investmentManager` addresses, as well as the (immutable) `NUMBER_OF_QUORUMS` variable\\n    constructor(\\n        IInvestmentManager _investmentManager,\\n        IServiceManager _serviceManager,\\n        uint8 _NUMBER_OF_QUORUMS\\n    ) VoteWeigherBaseStorage(_investmentManager, _serviceManager, _NUMBER_OF_QUORUMS) \\n    // solhint-disable-next-line no-empty-blocks\\n    {}\\n\\n    /// @notice Set the split in earnings between the different quorums.\\n    function _initialize(uint256[] memory _quorumBips) internal virtual onlyInitializing {\\n        // verify that the provided `_quorumBips` is of the correct length\\n        require(\\n            _quorumBips.length == NUMBER_OF_QUORUMS,\\n            \\\"VoteWeigherBase._initialize: _quorumBips.length != NUMBER_OF_QUORUMS\\\"\\n        );\\n        uint256 totalQuorumBips;\\n        for (uint256 i; i < NUMBER_OF_QUORUMS; ++i) {\\n            totalQuorumBips += _quorumBips[i];\\n            quorumBips[i] = _quorumBips[i];\\n        }\\n        // verify that the provided `_quorumBips` do indeed sum to 10,000!\\n        require(totalQuorumBips == MAX_BIPS, \\\"VoteWeigherBase._initialize: totalQuorumBips != MAX_BIPS\\\");\\n    }\\n\\n    /**\\n     * @notice This function computes the total weight of the @param operator in the quorum @param quorumNumber.\\n     * @dev returns zero in the case that `quorumNumber` is greater than or equal to `NUMBER_OF_QUORUMS`\\n     */\\n    function weightOfOperator(address operator, uint256 quorumNumber) public virtual returns (uint96) {\\n        uint96 weight;\\n\\n        if (quorumNumber < NUMBER_OF_QUORUMS) {\\n            uint256 stratsLength = strategiesConsideredAndMultipliersLength(quorumNumber);\\n\\n            StrategyAndWeightingMultiplier memory strategyAndMultiplier;\\n\\n            for (uint256 i = 0; i < stratsLength;) {\\n                // accessing i^th StrategyAndWeightingMultiplier struct for the quorumNumber\\n                strategyAndMultiplier = strategiesConsideredAndMultipliers[quorumNumber][i];\\n\\n                // shares of the operator in the investment strategy\\n                uint256 sharesAmount = delegation.operatorShares(operator, strategyAndMultiplier.strategy);\\n\\n                // add the weight from the shares for this strategy to the total weight\\n                if (sharesAmount > 0) {\\n                    weight += uint96(\\n                        (\\n                            (strategyAndMultiplier.strategy).sharesToUnderlying(sharesAmount)\\n                                * strategyAndMultiplier.multiplier\\n                        ) / WEIGHTING_DIVISOR\\n                    );\\n                }\\n\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        }\\n\\n        return weight;\\n    }\\n\\n    /// @notice Adds new strategies and the associated multipliers to the @param quorumNumber.\\n    function addStrategiesConsideredAndMultipliers(\\n        uint256 quorumNumber,\\n        StrategyAndWeightingMultiplier[] memory _newStrategiesConsideredAndMultipliers\\n    ) external virtual onlyServiceManagerOwner {\\n        _addStrategiesConsideredAndMultipliers(quorumNumber, _newStrategiesConsideredAndMultipliers);\\n    }\\n\\n    /**\\n     * @notice This function is used for removing strategies and their associated weights from the\\n     * mapping strategiesConsideredAndMultipliers for a specific @param quorumNumber.\\n     * @dev higher indices should be *first* in the list of @param indicesToRemove, since otherwise\\n     * the removal of lower index entries will cause a shift in the indices of the other strategiesToRemove\\n     */\\n    function removeStrategiesConsideredAndMultipliers(\\n        uint256 quorumNumber,\\n        IInvestmentStrategy[] calldata _strategiesToRemove,\\n        uint256[] calldata indicesToRemove\\n    ) external virtual onlyServiceManagerOwner {\\n        uint256 numStrats = _strategiesToRemove.length;\\n        // sanity check on input lengths\\n        require(indicesToRemove.length == numStrats, \\\"VoteWeigherBase.removeStrategiesConsideredAndWeights: input length mismatch\\\");\\n\\n        for (uint256 i = 0; i < numStrats;) {\\n            // check that the provided index is correct\\n            require(\\n                strategiesConsideredAndMultipliers[quorumNumber][indicesToRemove[i]].strategy == _strategiesToRemove[i],\\n                \\\"VoteWeigherBase.removeStrategiesConsideredAndWeights: index incorrect\\\"\\n            );\\n\\n            // remove strategy and its associated multiplier\\n            strategiesConsideredAndMultipliers[quorumNumber][indicesToRemove[i]] = strategiesConsideredAndMultipliers[quorumNumber][strategiesConsideredAndMultipliers[quorumNumber]\\n                .length - 1];\\n            strategiesConsideredAndMultipliers[quorumNumber].pop();\\n            emit StrategyRemovedFromQuorum(quorumNumber, _strategiesToRemove[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the length of the dynamic array stored in `strategiesConsideredAndMultipliers[quorumNumber]`.\\n     * @dev Reverts if `quorumNumber` < `NUMBER_OF_QUORUMS`, i.e. the input is out of bounds.\\n     */\\n    function strategiesConsideredAndMultipliersLength(uint256 quorumNumber) public view returns (uint256) {\\n        require(\\n            quorumNumber < NUMBER_OF_QUORUMS,\\n            \\\"VoteWeigherBase.strategiesConsideredAndMultipliersLength: quorumNumber input exceeds NUMBER_OF_QUORUMS\\\"\\n        );\\n        return strategiesConsideredAndMultipliers[quorumNumber].length;\\n    }\\n\\n    /** \\n     * @notice Adds `_newStrategiesConsideredAndMultipliers` to the `quorumNumber`-th quorum.\\n     * @dev Checks to make sure that the *same* strategy cannot be added multiple times (checks against both against existing and new strategies).\\n     * @dev This function has no check to make sure that the strategies for a single quorum have the same underlying asset. This is a concious choice,\\n     * since a middleware may want, e.g., a stablecoin quorum that accepts USDC, USDT, DAI, etc. as underlying assets and trades them as \\\"equivalent\\\".\\n     */\\n    function _addStrategiesConsideredAndMultipliers(\\n        uint256 quorumNumber,\\n        StrategyAndWeightingMultiplier[] memory _newStrategiesConsideredAndMultipliers\\n    ) internal {\\n        uint256 numStratsToAdd = _newStrategiesConsideredAndMultipliers.length;\\n        uint256 numStratsExisting = strategiesConsideredAndMultipliers[quorumNumber].length;\\n        require(\\n            numStratsExisting + numStratsToAdd <= MAX_WEIGHING_FUNCTION_LENGTH,\\n            \\\"VoteWeigherBase._addStrategiesConsideredAndMultipliers: exceed MAX_WEIGHING_FUNCTION_LENGTH\\\"\\n        );\\n        for (uint256 i = 0; i < numStratsToAdd;) {\\n            // fairly gas-expensive internal loop to make sure that the *same* strategy cannot be added multiple times\\n            for (uint256 j = 0; j < (numStratsExisting + i);) {\\n                require(\\n                    strategiesConsideredAndMultipliers[quorumNumber][j].strategy\\n                        != _newStrategiesConsideredAndMultipliers[i].strategy,\\n                    \\\"VoteWeigherBase._addStrategiesConsideredAndMultipliers: cannot add same strategy 2x\\\"\\n                );\\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n            strategiesConsideredAndMultipliers[quorumNumber].push(_newStrategiesConsideredAndMultipliers[i]);\\n            emit StrategyAddedToQuorum(quorumNumber, _newStrategiesConsideredAndMultipliers[i].strategy);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/IEigenLayrDelegation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IInvestmentStrategy.sol\\\";\\n\\n/**\\n * @title The interface for the primary delegation contract for EigenLayr.\\n * @author Layr Labs, Inc.\\n * @notice  This is the contract for delegation in EigenLayr. The main functionalities of this contract are\\n * - enabling anyone to register as an operator in EigenLayr\\n * - allowing new operators to provide a DelegationTerms-type contract, which may mediate their interactions with stakers who delegate to them\\n * - enabling any staker to delegate its stake to the operator of its choice\\n * - enabling a staker to undelegate its assets from an operator (performed as part of the withdrawal process, initiated through the InvestmentManager)\\n */\\ninterface IEigenLayrDelegation {\\n\\n    /**\\n     * @notice This will be called by an operator to register itself as an operator that stakers can choose to delegate to.\\n     * @param rewardReciveAddress another EOA address for receive from mantle network\\n     */\\n    function registerAsOperator(address rewardReciveAddress) external;\\n\\n    /**\\n     *  @notice This will be called by a staker to delegate its assets to some operator.\\n     *  @param operator is the operator to whom staker (msg.sender) is delegating its assets\\n     */\\n    function delegateTo(address operator) external;\\n\\n    /**\\n     * @notice Delegates from `staker` to `operator`.\\n     * @dev requires that r, vs are a valid ECSDA signature from `staker` indicating their intention for this action\\n     */\\n    function delegateToBySignature(address staker, address operator, uint256 expiry, bytes32 r, bytes32 vs) external;\\n\\n    /**\\n     * @notice Undelegates `staker` from the operator who they are delegated to.\\n     * @notice Callable only by the InvestmentManager\\n     * @dev Should only ever be called in the event that the `staker` has no active deposits in EigenLayer.\\n     */\\n    function undelegate(address staker) external;\\n\\n    /// @notice returns the address of the operator that `staker` is delegated to.\\n    function delegatedTo(address staker) external view returns (address);\\n\\n    /// @notice returns the eoa address of the `operator`, which may mediate their interactions with stakers who delegate to them.\\n    function getOperatorRewardAddress(address operator) external view returns (address);\\n\\n    /// @notice returns the total number of shares in `strategy` that are delegated to `operator`.\\n    function operatorShares(address operator, IInvestmentStrategy strategy) external view returns (uint256);\\n\\n    /**\\n     * @notice Increases the `staker`'s delegated shares in `strategy` by `shares, typically called when the staker has further deposits into EigenLayr\\n     * @dev Callable only by the InvestmentManager\\n     */\\n    function increaseDelegatedShares(address staker, IInvestmentStrategy strategy, uint256 shares) external;\\n\\n    /**\\n     * @notice Decreases the `staker`'s delegated shares in each entry of `strategies` by its respective `shares[i]`, typically called when the staker withdraws from EigenLayr\\n     * @dev Callable only by the InvestmentManager\\n     */\\n    function decreaseDelegatedShares(\\n        address staker,\\n        IInvestmentStrategy[] calldata strategies,\\n        uint256[] calldata shares\\n    ) external;\\n\\n    /// @notice Returns 'true' if `staker` *is* actively delegated, and 'false' otherwise.\\n    function isDelegated(address staker) external view returns (bool);\\n\\n    /// @notice Returns 'true' if `staker` is *not* actively delegated, and 'false' otherwise.\\n    function isNotDelegated(address staker) external returns (bool);\\n\\n    /// @notice Returns if an operator can be delegated to, i.e. it has called `registerAsOperator`.\\n    function isOperator(address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/IRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Minimal interface for a `Registry`-type contract.\\n * @author Layr Labs, Inc.\\n * @notice Functions related to the registration process itself have been intentionally excluded\\n * because their function signatures may vary significantly.\\n */\\ninterface IRegistry {\\n    /// @notice Returns 'true' if `operator` is registered as an active operator, and 'false' otherwise.\\n    function isActiveOperator(address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/IInvestmentManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IInvestmentStrategy.sol\\\";\\nimport \\\"./IEigenLayrDelegation.sol\\\";\\nimport \\\"./IServiceManager.sol\\\";\\n\\n/**\\n * @title Interface for the primary entrypoint for funds into EigenLayr.\\n * @author Layr Labs, Inc.\\n * @notice See the `InvestmentManager` contract itself for implementation details.\\n */\\ninterface IInvestmentManager {\\n    // packed struct for queued withdrawals\\n    struct WithdrawerAndNonce {\\n        address withdrawer;\\n        uint96 nonce;\\n    }\\n\\n    /**\\n     * Struct type used to specify an existing queued withdrawal. Rather than storing the entire struct, only a hash is stored.\\n     * In functions that operate on existing queued withdrawals -- e.g. `startQueuedWithdrawalWaitingPeriod` or `completeQueuedWithdrawal`,\\n     * the data is resubmitted and the hash of the submitted data is computed by `calculateWithdrawalRoot` and checked against the\\n     * stored hash in order to confirm the integrity of the submitted data.\\n     */\\n    struct QueuedWithdrawal {\\n        IInvestmentStrategy[] strategies;\\n        IERC20[] tokens;\\n        uint256[] shares;\\n        address depositor;\\n        WithdrawerAndNonce withdrawerAndNonce;\\n        uint32 withdrawalStartBlock;\\n        address delegatedAddress;\\n    }\\n\\n    /**\\n     * @notice Deposits `amount` of `token` into the specified `strategy`, with the resultant shares credited to `depositor`\\n     * @param strategy is the specified strategy where investment is to be made,\\n     * @param token is the denomination in which the investment is to be made,\\n     * @param amount is the amount of token to be invested in the strategy by the depositor\\n     * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\\n     * @dev Cannot be called by an address that is 'frozen' (this function will revert if the `msg.sender` is frozen).\\n     */\\n    function depositIntoStrategy(IInvestmentStrategy strategy, IERC20 token, uint256 amount)\\n        external\\n        returns (uint256);\\n\\n\\n\\n\\n    /**\\n     * @notice Used for investing an asset into the specified strategy with the resultant shared created to `staker`,\\n     * who must sign off on the action\\n     * @param strategy is the specified strategy where investment is to be made,\\n     * @param token is the denomination in which the investment is to be made,\\n     * @param amount is the amount of token to be invested in the strategy by the depositor\\n     * @param staker the staker that the assets will be deposited on behalf of\\n     * @param expiry the timestamp at which the signature expires\\n     * @param r and @param vs are the elements of the ECDSA signature\\n     * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\\n     * @dev A signature is required for this function to eliminate the possibility of griefing attacks, specifically those\\n     * targetting stakers who may be attempting to undelegate.\\n     * @dev Cannot be called on behalf of a staker that is 'frozen' (this function will revert if the `staker` is frozen).\\n     */\\n    function depositIntoStrategyOnBehalfOf(\\n        IInvestmentStrategy strategy,\\n        IERC20 token,\\n        uint256 amount,\\n        address staker,\\n        uint256 expiry,\\n        bytes32 r,\\n        bytes32 vs\\n    )\\n        external\\n        returns (uint256 shares);\\n\\n    /// @notice Returns the current shares of `user` in `strategy`\\n    function investorStratShares(address user, IInvestmentStrategy strategy) external view returns (uint256 shares);\\n\\n    /**\\n     * @notice Get all details on the depositor's investments and corresponding shares\\n     * @return (depositor's strategies, shares in these strategies)\\n     */\\n    function getDeposits(address depositor) external view returns (IInvestmentStrategy[] memory, uint256[] memory);\\n\\n    /// @notice Simple getter function that returns `investorStrats[staker].length`.\\n    function investorStratsLength(address staker) external view returns (uint256);\\n\\n    /// @notice Returns the single, central Delegation contract of EigenLayer\\n    function delegation() external view returns (IEigenLayrDelegation);\\n\\n}\\n\"\r\n    },\r\n    \"src/contracts/middleware/VoteWeigherBaseStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IEigenLayrDelegation.sol\\\";\\nimport \\\"../interfaces/IInvestmentStrategy.sol\\\";\\nimport \\\"../interfaces/IInvestmentManager.sol\\\";\\nimport \\\"../interfaces/IVoteWeigher.sol\\\";\\n\\nimport \\\"@openzeppelin-upgrades/contracts/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title Storage variables for the `VoteWeigherBase` contract.\\n * @author Layr Labs, Inc.\\n * @notice This storage contract is separate from the logic to simplify the upgrade process.\\n */\\nabstract contract VoteWeigherBaseStorage is Initializable, IVoteWeigher {\\n    /**\\n     * @notice In weighing a particular investment strategy, the amount of underlying asset for that strategy is\\n     * multiplied by its multiplier, then divided by WEIGHTING_DIVISOR\\n     */\\n    struct StrategyAndWeightingMultiplier {\\n        IInvestmentStrategy strategy;\\n        uint96 multiplier;\\n    }\\n\\n    /// @notice Constant used as a divisor in calculating weights.\\n    uint256 internal constant WEIGHTING_DIVISOR = 1e18;\\n    /// @notice Maximum length of dynamic arrays in the `strategiesConsideredAndMultipliers` mapping.\\n    uint8 internal constant MAX_WEIGHING_FUNCTION_LENGTH = 32;\\n    /// @notice Constant used as a divisor in dealing with BIPS amounts.\\n    uint256 internal constant MAX_BIPS = 10000;\\n\\n    /// @notice The address of the Delegation contract for EigenLayr.\\n    IEigenLayrDelegation public immutable delegation;\\n\\n    /// @notice The address of the InvestmentManager contract for EigenLayr.\\n    IInvestmentManager public immutable investmentManager;\\n\\n    /// @notice The ServiceManager contract for this middleware, where tasks are created / initiated.\\n    IServiceManager public immutable serviceManager;\\n\\n    /// @notice Number of quorums that are being used by the middleware.\\n    uint256 public immutable NUMBER_OF_QUORUMS;\\n\\n    /**\\n     * @notice mapping from quorum number to the list of strategies considered and their\\n     * corresponding multipliers for that specific quorum\\n     */\\n    mapping(uint256 => StrategyAndWeightingMultiplier[]) public strategiesConsideredAndMultipliers;\\n\\n    /**\\n     * @notice This defines the earnings split between different quorums. Mapping is quorumNumber => BIPS which the quorum earns, out of the total earnings.\\n     * @dev The sum of all entries, i.e. sum(quorumBips[0] through quorumBips[NUMBER_OF_QUORUMS - 1]) should *always* be 10,000!\\n     */\\n    mapping(uint256 => uint256) public quorumBips;\\n\\n    constructor(\\n        IInvestmentManager _investmentManager,\\n        IServiceManager _serviceManager,\\n        uint8 _NUMBER_OF_QUORUMS\\n    ) {\\n        // sanity check that the VoteWeigher is being initialized with at least 1 quorum\\n        require(_NUMBER_OF_QUORUMS != 0, \\\"VoteWeigherBaseStorage.constructor: _NUMBER_OF_QUORUMS == 0\\\");\\n        investmentManager = _investmentManager;\\n        delegation = _investmentManager.delegation();\\n        serviceManager = _serviceManager;\\n        NUMBER_OF_QUORUMS = _NUMBER_OF_QUORUMS;\\n        // disable initializers so that the implementation contract cannot be initialized\\n        _disableInitializers();\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/IInvestmentStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Minimal interface for an `InvestmentStrategy` contract.\\n * @author Layr Labs, Inc.\\n * @notice Custom `InvestmentStrategy` implementations may expand extensively on this interface.\\n */\\ninterface IInvestmentStrategy {\\n    /**\\n     * @notice Used to deposit tokens into this InvestmentStrategy\\n     * @param token is the ERC20 token being deposited\\n     * @param amount is the amount of token being deposited\\n     * @dev This function is only callable by the investmentManager contract. It is invoked inside of the investmentManager's\\n     * `depositIntoStrategy` function, and individual share balances are recorded in the investmentManager as well.\\n     * @return newShares is the number of new shares issued at the current exchange ratio.\\n     */\\n    function deposit(IERC20 token, uint256 amount) external returns (uint256);\\n\\n    /**\\n     * @notice Used to withdraw tokens from this InvestmentStrategy, to the `depositor`'s address\\n     * @param token is the ERC20 token being transferred out\\n     * @param amountShares is the amount of shares being withdrawn\\n     * @dev This function is only callable by the investmentManager contract. It is invoked inside of the investmentManager's\\n     * other functions, and individual share balances are recorded in the investmentManager as well.\\n     */\\n    function withdraw(address depositor, IERC20 token, uint256 amountShares) external;\\n\\n    /**\\n     * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\\n     * @notice In contrast to `sharesToUnderlyingView`, this function **may** make state modifications\\n     * @param amountShares is the amount of shares to calculate its conversion into the underlying token\\n     * @dev Implementation for these functions in particular may vary signifcantly for different strategies\\n     */\\n    function sharesToUnderlying(uint256 amountShares) external returns (uint256);\\n\\n    /**\\n     * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\\n     * @notice In contrast to `underlyingToSharesView`, this function **may** make state modifications\\n     * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\\n     * @dev Implementation for these functions in particular may vary signifcantly for different strategies\\n     */\\n    function underlyingToShares(uint256 amountUnderlying) external view returns (uint256);\\n\\n    /**\\n     * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\\n     * this strategy. In contrast to `userUnderlyingView`, this function **may** make state modifications\\n     */\\n    function userUnderlying(address user) external returns (uint256);\\n\\n     /**\\n     * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\\n     * @notice In contrast to `sharesToUnderlying`, this function guarantees no state modifications\\n     * @param amountShares is the amount of shares to calculate its conversion into the underlying token\\n     * @dev Implementation for these functions in particular may vary signifcantly for different strategies\\n     */\\n    function sharesToUnderlyingView(uint256 amountShares) external view returns (uint256);\\n\\n    /**\\n     * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\\n     * @notice In contrast to `underlyingToShares`, this function guarantees no state modifications\\n     * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\\n     * @dev Implementation for these functions in particular may vary signifcantly for different strategies\\n     */\\n    function underlyingToSharesView(uint256 amountUnderlying) external view returns (uint256);\\n\\n    /**\\n     * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\\n     * this strategy. In contrast to `userUnderlying`, this function guarantees no state modifications\\n     */\\n    function userUnderlyingView(address user) external view returns (uint256);\\n\\n    /// @notice The underyling token for shares in this InvestmentStrategy\\n    function underlyingToken() external view returns (IERC20);\\n\\n    /// @notice The total number of extant shares in thie InvestmentStrategy\\n    function totalShares() external view returns (uint256);\\n\\n    /// @notice Returns either a brief string explaining the strategy's goal & purpose, or a link to metadata that explains in more detail.\\n    function explanation() external view returns (string memory);\\n\\n    /// @notice set min deposit for node staking\\n    function setMinDepositAmount(uint256 minDepositAmount) external;\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/IVoteWeigher.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Interface for a `VoteWeigher`-type contract.\\n * @author Layr Labs, Inc.\\n * @notice Note that `NUMBER_OF_QUORUMS` is expected to remain constant, as suggested by its uppercase formatting.\\n */\\ninterface IVoteWeigher {\\n    /**\\n     * @notice This function computes the total weight of the @param operator in the quorum @param quorumNumber.\\n     * @dev returns zero in the case that `quorumNumber` is greater than or equal to `NUMBER_OF_QUORUMS`\\n     */\\n    function weightOfOperator(address operator, uint256 quorumNumber) external returns (uint96);\\n\\n    /// @notice Number of quorums that are being used by the middleware.\\n    function NUMBER_OF_QUORUMS() external view returns (uint256);\\n\\n    /**\\n     * @notice This defines the earnings split between different quorums. Mapping is quorumNumber => BIPS which the quorum earns, out of the total earnings.\\n     * @dev The sum of all entries, i.e. sum(quorumBips[0] through quorumBips[NUMBER_OF_QUORUMS - 1]) should *always* be 10,000!\\n     */\\n    function quorumBips(uint256 quorumNumber) external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin-upgrades/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"ds-test/=lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"lib/forge-std:ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"lib/openzeppelin-contracts:ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\r\n      \"lib/openzeppelin-contracts:forge-std/=lib/openzeppelin-contracts/lib/forge-std/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IInvestmentManager\",\"name\":\"_investmentManager\",\"type\":\"address\"},{\"internalType\":\"contract IServiceManager\",\"name\":\"_serviceManager\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_NUMBER_OF_QUORUMS\",\"type\":\"uint8\"},{\"internalType\":\"contract IBLSPublicKeyCompendium\",\"name\":\"_pubkeyCompendium\",\"type\":\"address\"},{\"internalType\":\"contract IRegistryPermission\",\"name\":\"_permissionManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_forceDeregister\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapped\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct BN254.G1Point\",\"name\":\"pk\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"apkHash\",\"type\":\"bytes32\"}],\"name\":\"Deregistration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"pkHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct BN254.G1Point\",\"name\":\"pk\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"apkHashIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"apkHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"socket\",\"type\":\"string\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"socket\",\"type\":\"string\"}],\"name\":\"SocketUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"firstQuorumStake\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"secondQuorumStake\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"updateBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"prevUpdateBlockNumber\",\"type\":\"uint32\"}],\"name\":\"StakeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"quorumNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IInvestmentStrategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyAddedToQuorum\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"quorumNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IInvestmentStrategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyRemovedFromQuorum\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NUMBER_OF_QUORUMS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quorumNumber\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract IInvestmentStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"struct VoteWeigherBaseStorage.StrategyAndWeightingMultiplier[]\",\"name\":\"_newStrategiesConsideredAndMultipliers\",\"type\":\"tuple[]\"}],\"name\":\"addStrategiesConsideredAndMultipliers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"apkHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"apkUpdateBlockNumbers\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"apkUpdates\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"apkHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"internalType\":\"struct IBLSRegistry.ApkUpdate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeHistoryIndex\",\"type\":\"uint256\"}],\"name\":\"checkOperatorActiveAtBlockNumber\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeHistoryIndex\",\"type\":\"uint256\"}],\"name\":\"checkOperatorInactiveAtBlockNumber\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegation\",\"outputs\":[{\"internalType\":\"contract IEigenLayrDelegation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"pkToRemove\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"name\":\"deregisterOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"firstQuorumStakedByOperator\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceDeregister\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"pkToRemove\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"name\":\"forceDeregisterOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getApkUpdatesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"getCorrectApkHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getFromTaskNumberForOperator\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"pubkeyHash\",\"type\":\"bytes32\"}],\"name\":\"getLengthOfPubkeyHashIndexHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"pubkeyHash\",\"type\":\"bytes32\"}],\"name\":\"getLengthOfPubkeyHashStakeHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLengthOfTotalOperatorsHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLengthOfTotalStakeHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getMostRecentStakeByOperator\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"updateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"firstQuorumStake\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"secondQuorumStake\",\"type\":\"uint96\"}],\"internalType\":\"struct IQuorumRegistry.OperatorStake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"name\":\"getOperatorIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getOperatorPubkeyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"pubkeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getStakeFromPubkeyHashAndIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"updateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"firstQuorumStake\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"secondQuorumStake\",\"type\":\"uint96\"}],\"internalType\":\"struct IQuorumRegistry.OperatorStake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"pubkeyHash\",\"type\":\"bytes32\"}],\"name\":\"getStakeHistoryLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"name\":\"getTotalOperators\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTotalStakeFromIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"updateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"firstQuorumStake\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"secondQuorumStake\",\"type\":\"uint96\"}],\"internalType\":\"struct IQuorumRegistry.OperatorStake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_quorumBips\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IInvestmentStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"struct VoteWeigherBaseStorage.StrategyAndWeightingMultiplier[]\",\"name\":\"_firstQuorumStrategiesConsideredAndMultipliers\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"contract IInvestmentStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"struct VoteWeigherBaseStorage.StrategyAndWeightingMultiplier[]\",\"name\":\"_secondQuorumStrategiesConsideredAndMultipliers\",\"type\":\"tuple[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investmentManager\",\"outputs\":[{\"internalType\":\"contract IInvestmentManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isActiveOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStakeFirstQuorum\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStakeSecondQuorum\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numOperators\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"operatorList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"operatorStakes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permissionManager\",\"outputs\":[{\"internalType\":\"contract IRegistryPermission\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pubkeyCompendium\",\"outputs\":[{\"internalType\":\"contract IBLSPublicKeyCompendium\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pubkeyHashToIndexHistory\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"toBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pubkeyHashToStakeHistory\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"updateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"firstQuorumStake\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"secondQuorumStake\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"quorumBips\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"operatorType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"pk\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"socket\",\"type\":\"string\"}],\"name\":\"registerOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"pubkeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"fromTaskNumber\",\"type\":\"uint32\"},{\"internalType\":\"enum IQuorumRegistry.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quorumNumber\",\"type\":\"uint256\"},{\"internalType\":\"contract IInvestmentStrategy[]\",\"name\":\"_strategiesToRemove\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"indicesToRemove\",\"type\":\"uint256[]\"}],\"name\":\"removeStrategiesConsideredAndMultipliers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"secondQuorumStakedByOperator\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceManager\",\"outputs\":[{\"internalType\":\"contract IServiceManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forceDeregister\",\"type\":\"address\"}],\"name\":\"setForceDeregister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_minimumStakeFirstQuorum\",\"type\":\"uint128\"}],\"name\":\"setMinimumStakeFirstQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_minimumStakeSecondQuorum\",\"type\":\"uint128\"}],\"name\":\"setMinimumStakeSecondQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"strategiesConsideredAndMultipliers\",\"outputs\":[{\"internalType\":\"contract IInvestmentStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quorumNumber\",\"type\":\"uint256\"}],\"name\":\"strategiesConsideredAndMultipliersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalOperatorsHistory\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"toBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStake\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newSocket\",\"type\":\"string\"}],\"name\":\"updateSocket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prevElements\",\"type\":\"uint256[]\"}],\"name\":\"updateStakes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quorumNumber\",\"type\":\"uint256\"}],\"name\":\"weightOfOperator\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BLSRegistry","CompilerVersion":"v0.8.12+commit.f00d7308","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000023754725a49c0f003c349a6c7869ff8609a7cefd0000000000000000000000005bd63a7ecc13b955c4f57e3f12a64c10263c14c1000000000000000000000000000000000000000000000000000000000000000200000000000000000000000092986cd63c3409b7da2882624b6d6e7cf660707a000000000000000000000000bcf6d8273daf842b6fc288b08e48c438fa911d01000000000000000000000000207e804758e28f2b3fd6e4219671b327100b82f8","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}