{"status":"1","message":"OK","result":[{"SourceCode":"# pragma version 0.3.10\r\n# pragma evm-version shanghai\r\n\"\"\"\r\n@title CurveFeeReceiver\r\n@author Curve.Fi\r\n@license Copyright (c) Curve.Fi, 2020-2021 - all rights reserved\r\n@notice Receives Fee\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\nECB: constant(address) = 0xeCb456EA5365865EbAb8a2661B0c503410e9B347\r\ni: constant(int128) = 1\r\nj: constant(int128) = 0\r\ndx: constant(uint256) = 0\r\n_min_dy: constant(uint256) = 0\r\n\r\n\r\nGAS_CHECK: constant(uint256) = 5000\r\n\r\n@external\r\n@payable\r\n@nonreentrant(\"lock\")\r\ndef __default__():\r\n\r\n    gas_before: uint256 = msg.gas\r\n    success: bool = raw_call(\r\n        msg.sender,\r\n        _abi_encode(\r\n            i, j, dx, _min_dy, \r\n            method_id=method_id(\"exchange(int128,int128,uint256,uint256)\")\r\n        ),\r\n        value=0,\r\n        gas = 5000,\r\n        revert_on_failure=False\r\n    )\r\n    gas_consumed: uint256 = gas_before - msg.gas\r\n\r\n    assert not success and gas_consumed > GAS_CHECK\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef forward_tokens(_tokens: DynArray[address, 10]):\r\n\r\n    for _token in _tokens:\r\n        token_amounts: uint256 = ERC20(_token).balanceOf(self)\r\n        ERC20(_token).transfer(ECB, token_amounts)\r\n\r\n\r\n@external\r\n@payable\r\n@nonreentrant('lock')\r\ndef forward_eth():\r\n    raw_call(ECB, b\"\", value=self.balance)","ABI":"[{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"forward_tokens\",\"inputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"forward_eth\",\"inputs\":[],\"outputs\":[]}]","ContractName":"CurveFeeReceiver","CompilerVersion":"vyper:0.3.10","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}