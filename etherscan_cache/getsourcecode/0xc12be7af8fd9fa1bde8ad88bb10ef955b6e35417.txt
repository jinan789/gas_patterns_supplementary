{"status":"1","message":"OK","result":[{"SourceCode":"#pragma version 0.3.10\r\n#pragma optimize gas\r\n#pragma evm-version shanghai\r\n\"\"\"\r\n@title Curve Leverage Bot\r\n@license Apache 2.0\r\n@author Volume.finance\r\n\"\"\"\r\n\r\ninterface Controller:\r\n    def create_loan_extended(collateral: uint256, debt: uint256, N: uint256, callbacker: address, callback_args: DynArray[uint256,5]): payable\r\n    def repay_extended(callbacker: address, callback_args: DynArray[uint256,5]): nonpayable\r\n    def user_state(user: address) -> uint256[4]: view\r\n    def health(user: address, full: bool) -> int256: view\r\n\r\ninterface WrappedEth:\r\n    def withdraw(amount: uint256): nonpayable\r\n\r\ninterface ERC20:\r\n    def balanceOf(_owner: address) -> uint256: view\r\n    def approve(_spender: address, _value: uint256) -> bool: nonpayable\r\n    def transfer(_to: address, _value: uint256) -> bool: nonpayable\r\n\r\nFACTORY: immutable(address)\r\nCONTROLLER: immutable(address)\r\nCOLLATERAL: immutable(address)\r\nWETH: immutable(address)\r\nOWNER: immutable(address)\r\nSTABLECOIN: immutable(address)\r\n\r\n@external\r\n@payable\r\ndef __init__(controller: address, weth: address, owner: address, collateral: address, stablecoin: address):\r\n    FACTORY = msg.sender\r\n    CONTROLLER = controller\r\n    COLLATERAL = collateral\r\n    WETH = weth\r\n    OWNER = owner\r\n    STABLECOIN = stablecoin\r\n\r\n@external\r\ndef create_loan_extended(collateral_amount: uint256, debt: uint256, N: uint256, callbacker: address, callback_args: DynArray[uint256,5]):\r\n    assert msg.sender == FACTORY, \"not factory\"\r\n    if COLLATERAL == WETH:\r\n        Controller(CONTROLLER).create_loan_extended(collateral_amount, debt, N, callbacker, callback_args, value=collateral_amount)\r\n    else:\r\n        assert ERC20(COLLATERAL).approve(CONTROLLER, collateral_amount, default_return_value=True), \"Ap fail\"\r\n        Controller(CONTROLLER).create_loan_extended(collateral_amount, debt, N, callbacker, callback_args)\r\n\r\n@external\r\ndef repay_extended(callbacker: address, callback_args: DynArray[uint256,5]) -> uint256:\r\n    assert msg.sender == FACTORY, \"Unauthorized\"\r\n    bal: uint256 = ERC20(STABLECOIN).balanceOf(self)\r\n    Controller(CONTROLLER).repay_extended(callbacker, callback_args)\r\n    bal = unsafe_sub(ERC20(STABLECOIN).balanceOf(self), bal)\r\n    assert bal > 0, \"repay fail\"\r\n    assert ERC20(STABLECOIN).transfer(OWNER, bal, default_return_value=True), \"Tr fail\"\r\n    return bal\r\n\r\n@external\r\n@view\r\ndef state() -> uint256[4]:\r\n    return Controller(CONTROLLER).user_state(self)\r\n\r\n@external\r\n@view\r\ndef health() -> int256:\r\n    return Controller(CONTROLLER).health(self, True)\r\n\r\n@external\r\n@payable\r\ndef __default__():\r\n    pass","ABI":"[{\"stateMutability\":\"payable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"controller\",\"type\":\"address\"},{\"name\":\"weth\",\"type\":\"address\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"collateral\",\"type\":\"address\"},{\"name\":\"stablecoin\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"create_loan_extended\",\"inputs\":[{\"name\":\"collateral_amount\",\"type\":\"uint256\"},{\"name\":\"debt\",\"type\":\"uint256\"},{\"name\":\"N\",\"type\":\"uint256\"},{\"name\":\"callbacker\",\"type\":\"address\"},{\"name\":\"callback_args\",\"type\":\"uint256[]\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"repay_extended\",\"inputs\":[{\"name\":\"callbacker\",\"type\":\"address\"},{\"name\":\"callback_args\",\"type\":\"uint256[]\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"state\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256[4]\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"health\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}]},{\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Curve Leverage Bot","CompilerVersion":"vyper:0.3.10","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000a920de414ea4ab66b97da1bfe9e6eca7d4219635000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000b957dccaa1ccfb1eb78b495b499801d591d8a403000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000f939e0a03fb07f59a73314e73794be0e57ac1b4e","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":""}]}