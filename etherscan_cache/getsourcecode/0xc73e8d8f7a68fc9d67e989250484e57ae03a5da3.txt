{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.3.10\r\n\"\"\"\r\n@title Updater\r\n\"\"\"\r\n\r\ninterface OVMMessenger:\r\n    def sendMessage(_target: address, _data: Bytes[1024], _gas_limit: uint32): nonpayable\r\n\r\ninterface OVMChain:\r\n    def enqueueL2GasPrepaid() -> uint32: view\r\n\r\ninterface VotingEscrow:\r\n    def epoch() -> uint256: view\r\n    def point_history(_idx: uint256) -> Point: view\r\n    def user_point_epoch(_user: address) -> uint256: view\r\n    def user_point_history(_user: address, _idx: uint256) -> Point: view\r\n    def locked(_user: address) -> LockedBalance: view\r\n    def slope_changes(_ts: uint256) -> int128: view\r\n\r\n\r\nstruct LockedBalance:\r\n    amount: int128\r\n    end: uint256\r\n\r\nstruct Point:\r\n    bias: int128\r\n    slope: int128\r\n    ts: uint256\r\n    blk: uint256\r\n\r\n\r\nWEEK: constant(uint256) = 86400 * 7\r\nVOTING_ESCROW: public(constant(address)) = 0x5f3b5DfEb7B28CDbD7FAba78963EE202a494e2A2\r\n\r\n\r\novm_chain: public(address)  # CanonicalTransactionChain\r\novm_messenger: public(address)  # CrossDomainMessenger\r\n\r\n\r\n@external\r\ndef __init__(_ovm_chain: address, _ovm_messenger: address):\r\n    self.ovm_chain = _ovm_chain\r\n    self.ovm_messenger = _ovm_messenger\r\n\r\n\r\n@external\r\ndef update(_user: address = msg.sender, _gas_limit: uint32 = 0):\r\n    # https://community.optimism.io/docs/developers/bridge/messaging/#for-l1-%E2%87%92-l2-transactions\r\n    gas_limit: uint32 = _gas_limit\r\n    if gas_limit == 0:\r\n        gas_limit = OVMChain(self.ovm_chain).enqueueL2GasPrepaid()\r\n\r\n    epoch: uint256 = VotingEscrow(VOTING_ESCROW).epoch()\r\n    point_history: Point = VotingEscrow(VOTING_ESCROW).point_history(epoch)\r\n\r\n    user_point_epoch: uint256 = VotingEscrow(VOTING_ESCROW).user_point_epoch(_user)\r\n    user_point_history: Point = VotingEscrow(VOTING_ESCROW).user_point_history(_user, user_point_epoch)\r\n    locked: LockedBalance = VotingEscrow(VOTING_ESCROW).locked(_user)\r\n\r\n    start_time: uint256 = WEEK + (point_history.ts / WEEK) * WEEK\r\n    slope_changes: int128[12] = empty(int128[12])\r\n\r\n    for i in range(12):\r\n        slope_changes[i] = VotingEscrow(VOTING_ESCROW).slope_changes(start_time + WEEK * i)\r\n\r\n    OVMMessenger(self.ovm_messenger).sendMessage(\r\n        self,\r\n        _abi_encode(\r\n            _user,\r\n            epoch,\r\n            point_history,\r\n            user_point_epoch,\r\n            user_point_history,\r\n            locked,\r\n            slope_changes,\r\n            method_id=method_id(\"update(address,uint256,(int128,int128,uint256,uint256),uint256,(int128,int128,uint256,uint256),(int128,uint256),int128[12])\")\r\n        ),\r\n        gas_limit\r\n    )","ABI":"[{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_ovm_chain\",\"type\":\"address\"},{\"name\":\"_ovm_messenger\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"update\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"update\",\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"update\",\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_gas_limit\",\"type\":\"uint32\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"VOTING_ESCROW\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"ovm_chain\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"ovm_messenger\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]}]","ContractName":"Updater","CompilerVersion":"vyper:0.3.10","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000126bcc31bc076b3d515f60fbc81fdde0b0d542ed","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}