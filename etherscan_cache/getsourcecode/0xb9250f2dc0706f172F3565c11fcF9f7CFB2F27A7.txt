{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address account) external view returns (uint);\\n\\n    function transfer(address recipient, uint amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint amount) external returns (bool);\\n    \\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint value);\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/IVoteForLaunch.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IVoteForLaunch {\\n    struct Application {\\n        uint128     totalVotes;\\n        uint128     deposit;\\n        address     applicant;\\n        uint40      expireAt;\\n        uint40      passedTimestamp;\\n        bool        passed;\\n        string      cid;\\n        bool        deployed;\\n        uint128     topVotes;\\n    }\\n    \\n    struct Ballot {\\n        address addr;\\n        uint128 amount;\\n    }\\n\\n    function getApplication(string memory _tick) external view returns(Application memory);\\n    function getStatus(string memory _tick, address _sender) external view returns(bool result, uint8 code, string memory description);\\n    function isPassed(string memory _tick, address _sender) external view returns(bool);\\n    function setDeployedTicks(string memory _tick, uint8 _code) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libs/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\"\r\n    },\r\n    \"contracts/VoteForLaunch.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./libs/TransferHelper.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IVoteForLaunch.sol\\\";\\n\\ncontract VoteForLaunch is Ownable {\\n    uint32 public UNDEPLOYED_EXPIRE = 3 * 24 * 3600;\\n    uint32 public MAX_VOTING_DAYS = 10 * 24 * 3600;\\n    uint16 public PASSED_RATIO = 3000; // Passed if 30% of total ballots voted.\\n    uint128 public totalBallots = 10000000 * 10**18 * 10 / 100; // 10% of total supply\\n    uint128 public newVoteDeposit = 1000 * 10**18;\\n    uint128 public totalDeposit = 0;\\n    uint128 public totalVoted = 0;\\n\\n    IERC20 public voteToken;\\n    address public inscriptionFactory;\\n\\n    mapping(string => IVoteForLaunch.Application) public applications; // tick => Application\\n    mapping(string => IVoteForLaunch.Ballot[]) public everyVotes;\\n    mapping(string => mapping(address => uint)) public Ids; // min is 1\\n\\n    string[] public tickArray;\\n    mapping(string => uint) public tickIds; // min is 1\\n\\n    mapping(address => uint128) public deposits;   // user => deposit amount\\n    mapping(address => uint128) public ballots;    // user => ballots\\n\\n    mapping(string => bool) public reservedTicks;     // check if tick is occupied\\n    mapping(string => bool) public deployedTicks;     // note: not all deployed ticks are voted\\n\\n    event NewApplication(string tick, address applicant, uint40 expireAt, string cid, uint128 deposit);\\n    event AddVote(string tick, address applicant, address voter, uint128 amount);\\n    event CancelVote(string tick, address applicant, address voter, uint128 amount);\\n    event Deposit(address sender, uint128 amount, uint ballots);\\n    event Withdraw(address sender, uint128 amount, uint ballots);\\n\\n    constructor() {\\n        _batchUpdateStockTick();\\n    }\\n\\n    function newVote(string memory _tick, uint40 _expireSeconds, string memory _cid) public {\\n        require(_expireSeconds <= MAX_VOTING_DAYS, \\\"more than max days to vote\\\");\\n        require(!reservedTicks[_tick], \\\"reserved ticks can not apply\\\");\\n        require(applications[_tick].expireAt == 0, \\\"tick application exist\\\");\\n        require(bytes(_tick).length < 6, \\\"tick name too long\\\");\\n\\n        // Deposit for new vote\\n        require(voteToken.allowance(msg.sender, address(this)) >= newVoteDeposit, \\\"allowance of ferc as deposit not enough\\\");\\n        require(voteToken.balanceOf(msg.sender) >= newVoteDeposit, \\\"balance of ferc as deposit not enough\\\");\\n        TransferHelper.safeTransferFrom(address(voteToken), msg.sender, address(this), newVoteDeposit);\\n\\n        applications[_tick] = IVoteForLaunch.Application(\\n            0,\\n            newVoteDeposit,\\n            msg.sender,\\n            uint40(block.timestamp + _expireSeconds),\\n            0,\\n            false,\\n            _cid,\\n            false,\\n            0\\n        );\\n\\n        if(tickIds[_tick] == 0) {\\n            tickArray.push(_tick);\\n            tickIds[_tick] = tickArray.length;\\n        }\\n\\n        emit NewApplication(_tick, msg.sender, uint40(block.timestamp + _expireSeconds), _cid, newVoteDeposit);\\n    }\\n\\n    function withdrawNewVote(string memory _tick) public {\\n        IVoteForLaunch.Application memory application = applications[_tick];\\n        require(application.applicant == msg.sender, \\\"only applicant can withdraw\\\");\\n        require(application.expireAt + UNDEPLOYED_EXPIRE < block.timestamp, \\\"should be wait until some days after vote finish\\\");\\n        require(application.deposit > 0, \\\"deposit is zero\\\");\\n        TransferHelper.safeTransfer(address(voteToken), application.applicant, application.deposit);\\n        applications[_tick].deposit = 0;\\n    }\\n\\n    function deposit(uint128 _amount) public {\\n        require(voteToken.allowance(msg.sender, address(this)) >= _amount, \\\"allowance is not enough\\\");\\n        require(voteToken.balanceOf(msg.sender) >= _amount, \\\"balance is not enough\\\");\\n        TransferHelper.safeTransferFrom(address(voteToken), msg.sender, address(this), _amount);\\n\\n        deposits[msg.sender] += _amount;\\n        totalDeposit += _amount;\\n        ballots[msg.sender] += _amount;\\n        emit Deposit(msg.sender, _amount, _amount);\\n    }\\n\\n    function withdraw(uint128 _amount) public {\\n        require(deposits[msg.sender] >= _amount, \\\"balance is not enough\\\");\\n        require(ballots[msg.sender] >= _amount, \\\"ballots is not enough\\\");\\n        \\n        deposits[msg.sender] -= _amount;\\n        totalDeposit -= _amount;\\n        ballots[msg.sender] -= _amount;\\n        \\n        TransferHelper.safeTransfer(address(voteToken), msg.sender, _amount);\\n        emit Withdraw(msg.sender, _amount, _amount);\\n    }\\n\\n    function addVote(string memory _tick, uint128 _ballots) public {\\n        require(ballots[msg.sender] >= _ballots, \\\"you ballots is not enough\\\");\\n        require(applications[_tick].expireAt >= block.timestamp, \\\"vote is expired\\\");\\n        require(Ids[_tick][msg.sender] == 0, \\\"you have voted, cancel and revote if you want\\\");\\n\\n        applications[_tick].totalVotes += _ballots;\\n        applications[_tick].topVotes = applications[_tick].totalVotes;\\n\\n        everyVotes[_tick].push(IVoteForLaunch.Ballot(msg.sender, _ballots));\\n        Ids[_tick][msg.sender] = totalVoters(_tick);\\n        ballots[msg.sender] -= _ballots;\\n        totalVoted += _ballots;\\n\\n        if(!applications[_tick].passed && applications[_tick].totalVotes >= totalBallots * PASSED_RATIO / 10000) {\\n            applications[_tick].passed = true;\\n            applications[_tick].passedTimestamp = uint40(block.timestamp);\\n        }\\n        emit AddVote(_tick, applications[_tick].applicant, msg.sender, _ballots);\\n    }\\n\\n    function cancelVote(string memory _tick) public {\\n        uint128 voted = everyVotes[_tick][Ids[_tick][msg.sender] - 1].amount;\\n        require(voted > 0, \\\"You did not voted\\\");\\n        ballots[msg.sender] += voted;\\n        totalVoted -= voted;\\n        applications[_tick].totalVotes -= voted;\\n\\n        _removeVoteByAddress(_tick, msg.sender);\\n        \\n        emit CancelVote(_tick, applications[_tick].applicant, msg.sender, voted);\\n    }\\n\\n    function cancelFailedApplication(string memory _tick) public {\\n        IVoteForLaunch.Application memory application = applications[_tick];\\n        require(application.expireAt < block.timestamp, \\\"vote is not expired\\\");\\n        require(!application.passed, \\\"tick is passed\\\");\\n        _reset(_tick);\\n    }\\n\\n    function cancelUndeployedApplication(string memory _tick) public {\\n        IVoteForLaunch.Application memory application = applications[_tick];\\n        require(application.passed && !application.deployed && application.passedTimestamp + UNDEPLOYED_EXPIRE < block.timestamp, \\\"waiting for deploying\\\");\\n        _reset(_tick);\\n    }\\n\\n    function getCurrentVotes(string memory _tick) public view returns(IVoteForLaunch.Ballot[] memory) {\\n        return everyVotes[_tick];\\n    }\\n\\n    function totalVoters(string memory _tick) public view returns(uint) {\\n        return everyVotes[_tick].length;\\n    }\\n\\n    function getVotesByAddress(string memory _tick, address _addr) public view returns(uint128 votes) {\\n        if(Ids[_tick][_addr] > 0) votes = everyVotes[_tick][Ids[_tick][_addr] - 1].amount;\\n    }\\n\\n    function getApplication(string memory _tick) public view returns(IVoteForLaunch.Application memory) {\\n        return applications[_tick];\\n    }\\n\\n    function getVotedApplications(address _addr) public view returns(\\n        IVoteForLaunch.Application[] memory applications_,\\n        uint128[] memory amount_,\\n        bool[] memory isExpireForVote_,\\n        bool[] memory isExpireForDeploy_,\\n        bool[] memory canDeploy_,\\n        uint8[] memory code_,\\n        string[] memory description_,\\n        string[] memory tick_\\n    ) {\\n        uint len = tickArray.length;\\n        if(len > 0) {\\n            tick_ = new string[](len);\\n            applications_ = new IVoteForLaunch.Application[](len);\\n            amount_ = new uint128[](len);\\n            isExpireForVote_ = new bool[](len);\\n            isExpireForDeploy_ = new bool[](len);\\n            canDeploy_ = new bool[](len);\\n            code_ = new uint8[](len);\\n            description_ = new string[](len);\\n\\n            uint index = 0;\\n            for(uint i = 0; i < len; i++) {\\n                string memory _tick = tickArray[i];\\n                uint128 _votes = getVotesByAddress(_tick, _addr);\\n                if(applications[_tick].expireAt == 0) continue;\\n                tick_[index] = _tick;\\n                applications_[index] = applications[_tick];\\n                amount_[index] = _votes;\\n                isExpireForVote_[index] = isExpireForVote(_tick);\\n                isExpireForDeploy_[index] = isExpireForDeploy(_tick);\\n                (bool _canDeploy, uint8 _code, string memory _description) = getStatus(_tick, _addr);\\n                canDeploy_[index] = _canDeploy;\\n                code_[index] = _code;\\n                description_[index] = _description;\\n                index++;\\n            }\\n        }\\n    }\\n\\n    function getStatus(string memory _tick, address _sender) public view returns(bool result, uint8 code, string memory description) {\\n        // Check the diagram: https://drive.google.com/file/d/1hSIF4OeWjPh7wBGYIgXdjr5WVciky1x8/view?usp=sharing\\n        IVoteForLaunch.Application memory application = applications[_tick];\\n        if(reservedTicks[_tick]) return(false, 1, \\\"#1 reserved tick name\\\");\\n        else if(deployedTicks[_tick]) {\\n            if(application.expireAt == 0) return(false, 2, \\\"#2 double name but no vote\\\");\\n            else if(application.deployed) return(false, 8, \\\"#8 tick has deployed\\\");\\n            else if(!application.passed) return(false, 3, \\\"#3 vote not passed\\\");\\n            else if(block.timestamp > application.passedTimestamp + UNDEPLOYED_EXPIRE) return(false, 4, \\\"#4 vote passed but not deployed on time\\\");\\n            else if(application.applicant == _sender) return(true, 11, \\\"#11\\\");\\n            else return(false, 7, \\\"#7 you are not applicant\\\");\\n        } else {\\n            if(application.expireAt == 0) return(true, 12, \\\"#12\\\");\\n            else if(application.deployed) return(false, 9, \\\"#9 tick has deployed\\\");\\n            else if(block.timestamp > application.expireAt && !application.passed) return(true, 13, \\\"#13\\\");\\n            else if(block.timestamp <= application.expireAt && !application.passed) return(false, 5, \\\"#5 vote not passed\\\");\\n            else if(block.timestamp > application.passedTimestamp + UNDEPLOYED_EXPIRE) return(true, 14, \\\"#14\\\");\\n            else if(application.applicant == _sender) return(true, 15, \\\"#15\\\");\\n            else return(false, 6, \\\"#6 you are not applicant\\\");\\n        }\\n    }\\n\\n    function isPassed(string memory _tick, address _sender) public view returns(bool) {\\n        IVoteForLaunch.Application memory application = applications[_tick];\\n        return application.expireAt > 0 && application.passed && _sender == application.applicant;\\n    }\\n\\n    function isExpireForVote(string memory _tick) public view returns(bool) {\\n        return block.timestamp > applications[_tick].expireAt;\\n    }\\n\\n    function isExpireForDeploy(string memory _tick) public view returns(bool) {\\n        return applications[_tick].passed && block.timestamp > applications[_tick].passedTimestamp + UNDEPLOYED_EXPIRE;\\n    }\\n\\n    function setDeployedTicks(string memory _tick, uint8 _code) public {\\n        require(msg.sender == inscriptionFactory, \\\"calls only from factory\\\");\\n        deployedTicks[_tick] = true;\\n        if(_code == 13 || _code == 14) {\\n            _reset(_tick);\\n        } else if(_code == 11 || _code == 15) {\\n            _removeDeposit(_tick); // If the vote succeed and deployed by the applicant, don't cancel votes, let the voters cancel by themselves\\n        }\\n        if(applications[_tick].expireAt > 0) applications[_tick].deployed = true;\\n    }\\n\\n    // ===================================\\n    // ============ only Owner ===========\\n    // ===================================\\n    function updateNewVoteDeposit(uint128 _amount) public onlyOwner {\\n        newVoteDeposit = _amount;\\n    }\\n\\n    function updateVoteToken(address _addr) public onlyOwner {\\n        voteToken = IERC20(_addr);\\n    }\\n\\n    function updateInscriptionFactory(address _addr) public onlyOwner {\\n        inscriptionFactory = _addr;\\n    }\\n\\n    function updateBaseBallots(uint128 _value) public onlyOwner {\\n        totalBallots = _value;\\n    }\\n\\n    function updateUndeployedExpire(uint32 _value) public onlyOwner {\\n        UNDEPLOYED_EXPIRE = _value;\\n    }\\n\\n    function updateMaxVotingDays(uint32 _value) public onlyOwner {\\n        MAX_VOTING_DAYS = _value;\\n    }\\n\\n    function updatePassedRatio(uint16 _value) public onlyOwner {\\n        PASSED_RATIO = _value;\\n    }\\n\\n    // ===================================\\n    // ======== Private functions ========\\n    // ===================================\\n    // Upgrade from v1 to v2\\n    function _batchUpdateStockTick() private {\\n        string[4] memory v1StockTicks = [\\n            \\\"ferc\\\",\\n            \\\"fdao\\\",\\n            \\\"cash\\\",\\n            \\\"fair\\\"\\n        ];\\n\\n        for(uint256 i = 0; i < v1StockTicks.length; i++) {\\n            reservedTicks[v1StockTicks[i]] = true;\\n        }\\n    }\\n\\n    function _reset(string memory _tick) private {\\n        _removeDeposit(_tick);\\n        _removeAllVotes(_tick);\\n        _removeFromTickArray(_tick);\\n        delete(applications[_tick]);\\n    }\\n\\n    function _removeDeposit(string memory _tick) private {\\n        if(applications[_tick].deposit > 0) TransferHelper.safeTransfer(address(voteToken), applications[_tick].applicant, applications[_tick].deposit);\\n    }\\n\\n    function _removeAllVotes(string memory _tick) private {\\n        // remove all votes, including vote history data\\n        for(uint i = 0; i < totalVoters(_tick); i++) {\\n            IVoteForLaunch.Ballot memory ballot = everyVotes[_tick][uint(i)];\\n            ballots[ballot.addr] += ballot.amount;\\n            delete(Ids[_tick][ballot.addr]);\\n            emit CancelVote(_tick, applications[_tick].applicant, ballot.addr, ballot.amount);\\n        }\\n        delete(everyVotes[_tick]);\\n    }\\n\\n    function _removeFromTickArray(string memory _tick) private {\\n        uint len = tickArray.length;\\n        if(len == 0) return;\\n        if(tickIds[_tick] == 0) return;\\n        uint id = tickIds[_tick] - 1;\\n\\n        if(id < len - 1) {\\n            tickArray[id] = tickArray[len - 1];\\n            tickArray.pop();\\n            tickIds[tickArray[id]] = id + 1;\\n        } else {\\n            tickArray.pop();\\n        }\\n        delete(tickIds[_tick]);\\n    }\\n\\n    function _removeVoteByAddress(string memory _tick, address _addr) private {\\n        uint _totalVoters = totalVoters(_tick);\\n        require(_totalVoters > 0, \\\"no votes\\\");\\n        require(Ids[_tick][_addr] > 0, \\\"You did not voted\\\");\\n        uint id = Ids[_tick][_addr] - 1;\\n\\n        if(id < _totalVoters - 1) {\\n            // exchange\\n            everyVotes[_tick][id] = everyVotes[_tick][_totalVoters - 1];\\n            everyVotes[_tick].pop();\\n            Ids[_tick][everyVotes[_tick][id].addr] = id + 1;\\n        } else {\\n            // no exchange\\n            everyVotes[_tick].pop();\\n        }\\n        delete(Ids[_tick][_addr]);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tick\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"AddVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tick\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"CancelVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ballots\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tick\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"expireAt\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"deposit\",\"type\":\"uint128\"}],\"name\":\"NewApplication\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ballots\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_VOTING_DAYS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PASSED_RATIO\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNDEPLOYED_EXPIRE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tick\",\"type\":\"string\"},{\"internalType\":\"uint128\",\"name\":\"_ballots\",\"type\":\"uint128\"}],\"name\":\"addVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"applications\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"totalVotes\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"deposit\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"expireAt\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"passedTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"deployed\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"topVotes\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ballots\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tick\",\"type\":\"string\"}],\"name\":\"cancelFailedApplication\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tick\",\"type\":\"string\"}],\"name\":\"cancelUndeployedApplication\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tick\",\"type\":\"string\"}],\"name\":\"cancelVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"deployedTicks\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"everyVotes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tick\",\"type\":\"string\"}],\"name\":\"getApplication\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"totalVotes\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"deposit\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"expireAt\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"passedTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"deployed\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"topVotes\",\"type\":\"uint128\"}],\"internalType\":\"struct IVoteForLaunch.Application\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tick\",\"type\":\"string\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"internalType\":\"struct IVoteForLaunch.Ballot[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tick\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"code\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getVotedApplications\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"totalVotes\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"deposit\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"expireAt\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"passedTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"deployed\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"topVotes\",\"type\":\"uint128\"}],\"internalType\":\"struct IVoteForLaunch.Application[]\",\"name\":\"applications_\",\"type\":\"tuple[]\"},{\"internalType\":\"uint128[]\",\"name\":\"amount_\",\"type\":\"uint128[]\"},{\"internalType\":\"bool[]\",\"name\":\"isExpireForVote_\",\"type\":\"bool[]\"},{\"internalType\":\"bool[]\",\"name\":\"isExpireForDeploy_\",\"type\":\"bool[]\"},{\"internalType\":\"bool[]\",\"name\":\"canDeploy_\",\"type\":\"bool[]\"},{\"internalType\":\"uint8[]\",\"name\":\"code_\",\"type\":\"uint8[]\"},{\"internalType\":\"string[]\",\"name\":\"description_\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"tick_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tick\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getVotesByAddress\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"votes\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inscriptionFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tick\",\"type\":\"string\"}],\"name\":\"isExpireForDeploy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tick\",\"type\":\"string\"}],\"name\":\"isExpireForVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tick\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isPassed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tick\",\"type\":\"string\"},{\"internalType\":\"uint40\",\"name\":\"_expireSeconds\",\"type\":\"uint40\"},{\"internalType\":\"string\",\"name\":\"_cid\",\"type\":\"string\"}],\"name\":\"newVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newVoteDeposit\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"reservedTicks\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tick\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_code\",\"type\":\"uint8\"}],\"name\":\"setDeployedTicks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tickArray\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"tickIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBallots\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposit\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVoted\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tick\",\"type\":\"string\"}],\"name\":\"totalVoters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_value\",\"type\":\"uint128\"}],\"name\":\"updateBaseBallots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"updateInscriptionFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_value\",\"type\":\"uint32\"}],\"name\":\"updateMaxVotingDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"}],\"name\":\"updateNewVoteDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_value\",\"type\":\"uint16\"}],\"name\":\"updatePassedRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_value\",\"type\":\"uint32\"}],\"name\":\"updateUndeployedExpire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"updateVoteToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tick\",\"type\":\"string\"}],\"name\":\"withdrawNewVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"VoteForLaunch","CompilerVersion":"v0.8.18+commit.87f61d96","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}