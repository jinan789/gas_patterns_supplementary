{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.3.9\r\n\r\n\"\"\"\r\n@title LendingPoolPeripheral\r\n@author [Zharta](https://zharta.io/)\r\n@notice The lending pool contract implements the lending pool logic. Each instance works with a corresponding loans contract to implement an isolated lending market.\r\n@dev Uses a `LendingPoolCore` contract to store state\r\n\"\"\"\r\n\r\n# Interfaces\r\n\r\nfrom vyper.interfaces import ERC20 as IERC20\r\n\r\ninterface ILendingPoolCore:\r\n    def funds(arg0: address) -> InvestorFunds: view\r\n    def fundsAvailable() -> uint256: view\r\n    def fundsInvested() -> uint256: view\r\n    def computeWithdrawableAmount(_lender: address) -> uint256: view\r\n    def deposit(_lender: address, _payer: address, _amount: uint256) -> bool: nonpayable\r\n    def withdraw(_lender: address, _wallet: address, _amount: uint256) -> bool: nonpayable\r\n    def sendFunds(_to: address, _amount: uint256) -> bool: nonpayable\r\n    def receiveFunds(_borrower: address, _amount: uint256, _rewardsAmount: uint256, _investedAmount: uint256) -> bool: nonpayable\r\n    def transferProtocolFees(_borrower: address, _protocolWallet: address, _amount: uint256) -> bool: nonpayable\r\n\r\ninterface ILendingPoolLock:\r\n    def investorLocks(arg0: address) -> InvestorLock: view\r\n    def setInvestorLock(_lender: address, _amount: uint256, _lockPeriodEnd: uint256): nonpayable\r\n\r\ninterface ILiquidityControls:\r\n    def lockPeriodDuration() -> uint256: view\r\n    def lockPeriodEnabled() -> bool: view\r\n    def withinPoolShareLimit(\r\n        _lender: address,\r\n        _amount: uint256,\r\n        _lpPeripheralContractAddress: address,\r\n        _lpCoreContractAddress: address,\r\n        _fundsInvestable: uint256\r\n    ) -> bool: view\r\n    def outOfLockPeriod(_lender: address, _remainingAmount: uint256, _lpLockContractAddress: address) -> bool: view\r\n\r\ninterface IWETH:\r\n    def deposit(): payable\r\n    def withdraw(_amount: uint256): nonpayable\r\n\r\n\r\n# Structs\r\n\r\nstruct InvestorFunds:\r\n    currentAmountDeposited: uint256\r\n    totalAmountDeposited: uint256\r\n    totalAmountWithdrawn: uint256\r\n    sharesBasisPoints: uint256\r\n    activeForRewards: bool\r\n\r\nstruct InvestorLock:\r\n    lockPeriodEnd: uint256\r\n    lockPeriodAmount: uint256\r\n\r\n# Events\r\n\r\nevent OwnerProposed:\r\n    ownerIndexed: indexed(address)\r\n    proposedOwnerIndexed: indexed(address)\r\n    owner: address\r\n    proposedOwner: address\r\n    erc20TokenContract: address\r\n\r\nevent OwnershipTransferred:\r\n    ownerIndexed: indexed(address)\r\n    proposedOwnerIndexed: indexed(address)\r\n    owner: address\r\n    proposedOwner: address\r\n    erc20TokenContract: address\r\n\r\nevent MaxCapitalEfficiencyChanged:\r\n    erc20TokenContractIndexed: indexed(address)\r\n    currentValue: uint256\r\n    newValue: uint256\r\n    erc20TokenContract: address\r\n\r\nevent ProtocolWalletChanged:\r\n    erc20TokenContractIndexed: indexed(address)\r\n    currentValue: address\r\n    newValue: address\r\n    erc20TokenContract: address\r\n\r\nevent ProtocolFeesShareChanged:\r\n    erc20TokenContractIndexed: indexed(address)\r\n    currentValue: uint256\r\n    newValue: uint256\r\n    erc20TokenContract: address\r\n\r\nevent LoansPeripheralAddressSet:\r\n    erc20TokenContractIndexed: indexed(address)\r\n    currentValue: address\r\n    newValue: address\r\n    erc20TokenContract: address\r\n\r\nevent LiquidationsPeripheralAddressSet:\r\n    erc20TokenContractIndexed: indexed(address)\r\n    currentValue: address\r\n    newValue: address\r\n    erc20TokenContract: address\r\n\r\nevent LiquidityControlsAddressSet:\r\n    erc20TokenContractIndexed: indexed(address)\r\n    currentValue: address\r\n    newValue: address\r\n    erc20TokenContract: address\r\n\r\nevent WhitelistStatusChanged:\r\n    erc20TokenContractIndexed: indexed(address)\r\n    value: bool\r\n    erc20TokenContract: address\r\n\r\nevent WhitelistAddressAdded:\r\n    erc20TokenContractIndexed: indexed(address)\r\n    value: address\r\n    erc20TokenContract: address\r\n\r\nevent WhitelistAddressRemoved:\r\n    erc20TokenContractIndexed: indexed(address)\r\n    value: address\r\n    erc20TokenContract: address\r\n\r\nevent ContractStatusChanged:\r\n    erc20TokenContractIndexed: indexed(address)\r\n    value: bool\r\n    erc20TokenContract: address\r\n\r\nevent InvestingStatusChanged:\r\n    erc20TokenContractIndexed: indexed(address)\r\n    value: bool\r\n    erc20TokenContract: address\r\n\r\nevent ContractDeprecated:\r\n    erc20TokenContractIndexed: indexed(address)\r\n    erc20TokenContract: address\r\n\r\nevent Deposit:\r\n    walletIndexed: indexed(address)\r\n    wallet: address\r\n    amount: uint256\r\n    erc20TokenContract: address\r\n\r\nevent Withdrawal:\r\n    walletIndexed: indexed(address)\r\n    wallet: address\r\n    amount: uint256\r\n    erc20TokenContract: address\r\n\r\nevent FundsTransfer:\r\n    walletIndexed: indexed(address)\r\n    wallet: address\r\n    amount: uint256\r\n    erc20TokenContract: address\r\n\r\nevent FundsReceipt:\r\n    walletIndexed: indexed(address)\r\n    wallet: address\r\n    amount: uint256\r\n    rewardsPool: uint256\r\n    rewardsProtocol: uint256\r\n    investedAmount: uint256\r\n    erc20TokenContract: address\r\n    fundsOrigin: String[30]\r\n\r\nevent PaymentSent:\r\n    walletIndexed: indexed(address)\r\n    wallet: address\r\n    amount: uint256\r\n\r\nevent PaymentReceived:\r\n    walletIndexed: indexed(address)\r\n    wallet: address\r\n    amount: uint256\r\n\r\n\r\n# Global variables\r\n\r\nowner: public(address)\r\nproposedOwner: public(address)\r\n\r\nloansContract: public(address)\r\nlendingPoolCoreContract: public(address)\r\nlendingPoolLockContract: public(address)\r\nerc20TokenContract: public(immutable(address))\r\nliquidationsPeripheralContract: public(address)\r\nliquidityControlsContract: public(address)\r\n\r\nprotocolWallet: public(address)\r\nprotocolFeesShare: public(uint256) # parts per 10000, e.g. 2.5% is represented by 250 parts per 10000\r\n\r\nmaxCapitalEfficienty: public(uint256) # parts per 10000, e.g. 2.5% is represented by 250 parts per 10000\r\nisPoolActive: public(bool)\r\nisPoolDeprecated: public(bool)\r\nisPoolInvesting: public(bool)\r\n\r\nwhitelistEnabled: public(bool)\r\nwhitelistedAddresses: public(HashMap[address, bool])\r\n\r\n\r\n##### INTERNAL METHODS - VIEW #####\r\n\r\n@view\r\n@internal\r\ndef _fundsAreAllowed(_owner: address, _spender: address, _amount: uint256) -> bool:\r\n    amountAllowed: uint256 = IERC20(erc20TokenContract).allowance(_owner, _spender)\r\n    return _amount <= amountAllowed\r\n\r\n\r\n@pure\r\n@internal\r\ndef _poolHasFundsToInvest(_fundsAvailable: uint256, _fundsInvested: uint256, _capitalEfficienty: uint256) -> bool:\r\n    if _fundsAvailable + _fundsInvested == 0:\r\n        return False\r\n    \r\n    return _fundsInvested * 10000 / (_fundsAvailable + _fundsInvested) < _capitalEfficienty\r\n\r\n\r\n@view\r\n@internal\r\ndef _poolHasFundsToInvestAfterDeposit(_amount: uint256) -> bool:\r\n    fundsAvailable: uint256 = ILendingPoolCore(self.lendingPoolCoreContract).fundsAvailable() + _amount\r\n    fundsInvested: uint256 = ILendingPoolCore(self.lendingPoolCoreContract).fundsInvested()\r\n\r\n    return self._poolHasFundsToInvest(fundsAvailable, fundsInvested, self.maxCapitalEfficienty)\r\n\r\n\r\n@view\r\n@internal\r\ndef _poolHasFundsToInvestAfterPayment(_amount: uint256, _rewards: uint256) -> bool:\r\n    fundsAvailable: uint256 = ILendingPoolCore(self.lendingPoolCoreContract).fundsAvailable() + _amount + _rewards\r\n    fundsInvested: uint256 = ILendingPoolCore(self.lendingPoolCoreContract).fundsInvested() - _amount\r\n\r\n    return self._poolHasFundsToInvest(fundsAvailable, fundsInvested, self.maxCapitalEfficienty)\r\n\r\n\r\n@view\r\n@internal\r\ndef _poolHasFundsToInvestAfterWithdraw(_amount: uint256) -> bool:\r\n    fundsAvailable: uint256 = ILendingPoolCore(self.lendingPoolCoreContract).fundsAvailable() - _amount\r\n    fundsInvested: uint256 = ILendingPoolCore(self.lendingPoolCoreContract).fundsInvested()\r\n    \r\n    return self._poolHasFundsToInvest(fundsAvailable, fundsInvested, self.maxCapitalEfficienty)\r\n\r\n\r\n@view\r\n@internal\r\ndef _poolHasFundsToInvestAfterInvestment(_amount: uint256) -> bool:\r\n    fundsAvailable: uint256 = ILendingPoolCore(self.lendingPoolCoreContract).fundsAvailable() - _amount\r\n    fundsInvested: uint256 = ILendingPoolCore(self.lendingPoolCoreContract).fundsInvested() + _amount\r\n    \r\n    return self._poolHasFundsToInvest(fundsAvailable, fundsInvested, self.maxCapitalEfficienty)\r\n\r\n\r\n@view\r\n@internal\r\ndef _maxFundsInvestable() -> uint256:\r\n    fundsAvailable: uint256 = ILendingPoolCore(self.lendingPoolCoreContract).fundsAvailable()\r\n    fundsInvested: uint256 = ILendingPoolCore(self.lendingPoolCoreContract).fundsInvested()\r\n\r\n    fundsBuffer: uint256 = (fundsAvailable + fundsInvested) * (10000 - self.maxCapitalEfficienty) / 10000\r\n\r\n    if fundsBuffer > fundsAvailable:\r\n        return 0\r\n    \r\n    return fundsAvailable - fundsBuffer\r\n\r\n\r\n@view\r\n@internal\r\ndef _theoreticalMaxFundsInvestable(_amount: uint256) -> uint256:\r\n    fundsAvailable: uint256 = ILendingPoolCore(self.lendingPoolCoreContract).fundsAvailable()\r\n    fundsInvested: uint256 = ILendingPoolCore(self.lendingPoolCoreContract).fundsInvested()\r\n\r\n    return (fundsAvailable + fundsInvested + _amount) * self.maxCapitalEfficienty / 10000\r\n\r\n\r\n@view\r\n@internal\r\ndef _computeLockPeriodEnd(_lender: address) -> uint256:\r\n    lockPeriodEnd: uint256 = ILendingPoolLock(self.lendingPoolLockContract).investorLocks(_lender).lockPeriodEnd\r\n    if lockPeriodEnd <= block.timestamp:\r\n        lockPeriodEnd = block.timestamp + ILiquidityControls(self.liquidityControlsContract).lockPeriodDuration()\r\n    return lockPeriodEnd\r\n\r\n\r\n@view\r\n@internal\r\ndef _computeLockPeriod(_lender: address, _amount: uint256) -> (uint256, uint256):\r\n    investorLock: InvestorLock = ILendingPoolLock(self.lendingPoolLockContract).investorLocks(msg.sender)\r\n    if investorLock.lockPeriodEnd <= block.timestamp:\r\n        return block.timestamp + ILiquidityControls(self.liquidityControlsContract).lockPeriodDuration(), _amount\r\n    else:\r\n        return investorLock.lockPeriodEnd, investorLock.lockPeriodAmount + _amount\r\n\r\n##### INTERNAL METHODS - WRITE #####\r\n\r\n\r\n@internal\r\ndef _deposit(_amount: uint256, _payer: address):\r\n    assert not self.isPoolDeprecated, \"pool is deprecated, withdraw\"\r\n    assert self.isPoolActive, \"pool is not active right now\"\r\n    assert _amount > 0, \"_amount has to be higher than 0\"\r\n\r\n    assert ILiquidityControls(self.liquidityControlsContract).withinPoolShareLimit(\r\n        msg.sender,\r\n        _amount,\r\n        self,\r\n        self.lendingPoolCoreContract,\r\n        self._theoreticalMaxFundsInvestable(_amount)\r\n    ), \"max pool share surpassed\"\r\n\r\n    if self.whitelistEnabled and not self.whitelistedAddresses[msg.sender]:\r\n        raise \"msg.sender is not whitelisted\"\r\n\r\n    if not self.isPoolInvesting and self._poolHasFundsToInvestAfterDeposit(_amount):\r\n        self.isPoolInvesting = True\r\n\r\n        log InvestingStatusChanged(\r\n            erc20TokenContract,\r\n            True,\r\n            erc20TokenContract\r\n        )\r\n\r\n    lockPeriodEnd: uint256 = 0\r\n    lockPeriodAmount: uint256 = 0\r\n    lockPeriodEnd, lockPeriodAmount = self._computeLockPeriod(msg.sender, _amount)\r\n\r\n    if not ILendingPoolCore(self.lendingPoolCoreContract).deposit(msg.sender, _payer, _amount):\r\n        raise \"error creating deposit\"\r\n\r\n    ILendingPoolLock(self.lendingPoolLockContract).setInvestorLock(msg.sender, lockPeriodAmount, lockPeriodEnd)\r\n\r\n    log Deposit(msg.sender, msg.sender, _amount, erc20TokenContract)\r\n\r\n\r\n@internal\r\ndef _withdraw(_amount: uint256, _receiver: address):\r\n    assert _amount > 0, \"_amount has to be higher than 0\"\r\n    \r\n    withdrawableAmount: uint256 = ILendingPoolCore(self.lendingPoolCoreContract).computeWithdrawableAmount(msg.sender)\r\n    assert withdrawableAmount >= _amount, \"_amount more than withdrawable\"\r\n    assert ILiquidityControls(self.liquidityControlsContract).outOfLockPeriod(msg.sender, withdrawableAmount - _amount, self.lendingPoolLockContract), \"withdraw within lock period\"\r\n    assert ILendingPoolCore(self.lendingPoolCoreContract).fundsAvailable() >= _amount, \"available funds less than amount\"\r\n\r\n    if self.isPoolInvesting and not self._poolHasFundsToInvestAfterWithdraw(_amount):\r\n        self.isPoolInvesting = False\r\n\r\n        log InvestingStatusChanged(\r\n            erc20TokenContract,\r\n            False,\r\n            erc20TokenContract\r\n        )\r\n\r\n    if not ILendingPoolCore(self.lendingPoolCoreContract).withdraw(msg.sender, _receiver, _amount):\r\n        raise \"error withdrawing funds\"\r\n\r\n    log Withdrawal(msg.sender, msg.sender, _amount, erc20TokenContract)\r\n\r\n\r\n@internal\r\ndef _sendFunds(_to: address, _receiver: address, _amount: uint256):\r\n    assert not self.isPoolDeprecated, \"pool is deprecated\"\r\n    assert self.isPoolActive, \"pool is inactive\"\r\n    assert self.isPoolInvesting, \"max capital eff reached\"\r\n    assert msg.sender == self.loansContract, \"msg.sender is not the loans addr\"\r\n    assert _to != empty(address), \"_to is the zero address\"\r\n    assert _amount > 0, \"_amount has to be higher than 0\"\r\n    assert _amount <= self._maxFundsInvestable(), \"insufficient liquidity\"\r\n\r\n    if self.isPoolInvesting and not self._poolHasFundsToInvestAfterInvestment(_amount):\r\n        self.isPoolInvesting = False\r\n\r\n        log InvestingStatusChanged(\r\n            erc20TokenContract,\r\n            False,\r\n            erc20TokenContract\r\n        )\r\n\r\n    if not ILendingPoolCore(self.lendingPoolCoreContract).sendFunds(_receiver, _amount):\r\n        raise \"error sending funds in LPCore\"\r\n\r\n    log FundsTransfer(_to, _to, _amount, erc20TokenContract)\r\n\r\n\r\n@internal\r\ndef _receiveFunds(_borrower: address, _payer: address, _amount: uint256, _rewardsAmount: uint256):\r\n    assert msg.sender == self.loansContract, \"msg.sender is not the loans addr\"\r\n    assert _borrower != empty(address), \"_borrower is the zero address\"\r\n    assert _amount + _rewardsAmount > 0, \"amount should be higher than 0\"\r\n\r\n    rewardsProtocol: uint256 = _rewardsAmount * self.protocolFeesShare / 10000\r\n    rewardsPool: uint256 = _rewardsAmount - rewardsProtocol\r\n\r\n    self._transferReceivedFunds(_borrower, _payer, _amount, rewardsPool, rewardsProtocol, _amount, \"loan\")\r\n\r\n\r\n@internal\r\ndef _transferReceivedFunds(\r\n    _borrower: address,\r\n    _payer: address,\r\n    _amount: uint256,\r\n    _rewardsPool: uint256,\r\n    _rewardsProtocol: uint256,\r\n    _investedAmount: uint256,\r\n    _origin: String[30]\r\n):\r\n    if not self.isPoolInvesting and self._poolHasFundsToInvestAfterPayment(_amount, _rewardsPool):\r\n        self.isPoolInvesting = True\r\n\r\n        log InvestingStatusChanged(\r\n            erc20TokenContract,\r\n            True,\r\n            erc20TokenContract\r\n        )\r\n\r\n    if not ILendingPoolCore(self.lendingPoolCoreContract).receiveFunds(_payer, _amount, _rewardsPool, _investedAmount):\r\n        raise \"error receiving funds in LPCore\"\r\n    \r\n    if _rewardsProtocol > 0:\r\n        if not ILendingPoolCore(self.lendingPoolCoreContract).transferProtocolFees(_payer, self.protocolWallet, _rewardsProtocol):\r\n            raise \"error transferring protocol fees\"\r\n\r\n    log FundsReceipt(\r\n        _borrower,\r\n        _borrower,\r\n        _amount,\r\n        _rewardsPool,\r\n        _rewardsProtocol,\r\n        _investedAmount,\r\n        erc20TokenContract,\r\n        _origin\r\n    )\r\n\r\n\r\n@internal\r\ndef _receiveFundsFromLiquidation(\r\n    _borrower: address,\r\n    _payer: address,\r\n    _amount: uint256,\r\n    _rewardsAmount: uint256,\r\n    _distributeToProtocol: bool,\r\n    _investedAmount: uint256,\r\n    _origin: String[30]\r\n):\r\n    assert msg.sender == self.liquidationsPeripheralContract, \"msg.sender is not the BN addr\"\r\n    assert _borrower != empty(address), \"_borrower is the zero address\"\r\n    assert _amount + _rewardsAmount > 0, \"amount should be higher than 0\"\r\n\r\n    rewardsProtocol: uint256 = 0\r\n    rewardsPool: uint256 = 0\r\n    if _distributeToProtocol:\r\n        rewardsProtocol = _rewardsAmount * self.protocolFeesShare / 10000\r\n        rewardsPool = _rewardsAmount - rewardsProtocol\r\n    else:\r\n        rewardsPool = _rewardsAmount\r\n\r\n    self._transferReceivedFunds(_borrower, _payer, _amount, rewardsPool, rewardsProtocol, _investedAmount, _origin)\r\n\r\n\r\n@internal\r\ndef _unwrap_and_send(_to: address, _amount: uint256):\r\n    IWETH(erc20TokenContract).withdraw(_amount)\r\n    send(_to, _amount)\r\n    log PaymentSent(_to, _to, _amount)\r\n\r\n\r\n@internal\r\ndef _wrap_and_approve(_to: address, _amount: uint256):\r\n    IWETH(erc20TokenContract).deposit(value=_amount)\r\n    log PaymentSent(erc20TokenContract, erc20TokenContract, _amount)\r\n    IERC20(erc20TokenContract).approve(_to, _amount)\r\n\r\n\r\n##### EXTERNAL METHODS - VIEW #####\r\n\r\n@view\r\n@external\r\ndef maxFundsInvestable() -> uint256:\r\n    return self._maxFundsInvestable()\r\n\r\n\r\n@view\r\n@external\r\ndef theoreticalMaxFundsInvestable() -> uint256:\r\n    return self._theoreticalMaxFundsInvestable(0)\r\n\r\n\r\n@view\r\n@external\r\ndef theoreticalMaxFundsInvestableAfterDeposit(_amount: uint256) -> uint256:\r\n    return self._theoreticalMaxFundsInvestable(_amount)\r\n\r\n\r\n@view\r\n@external\r\ndef lenderFunds(_lender: address) -> InvestorFunds:\r\n    return ILendingPoolCore(self.lendingPoolCoreContract).funds(_lender)\r\n\r\n@view\r\n@external\r\ndef lockedAmount(_lender: address) -> uint256:\r\n    if not ILiquidityControls(self.liquidityControlsContract).lockPeriodEnabled():\r\n        return 0\r\n\r\n    lockPeriod: InvestorLock = ILendingPoolLock(self.lendingPoolLockContract).investorLocks(_lender)\r\n    if lockPeriod.lockPeriodEnd < block.timestamp:\r\n        return 0\r\n    return lockPeriod.lockPeriodAmount\r\n\r\n\r\n##### EXTERNAL METHODS - NON-VIEW #####\r\n\r\n@external\r\ndef __init__(\r\n    _lendingPoolCoreContract: address,\r\n    _lendingPoolLockContract: address,\r\n    _erc20TokenContract: address,\r\n    _protocolWallet: address,\r\n    _protocolFeesShare: uint256,\r\n    _maxCapitalEfficienty: uint256,\r\n    _whitelistEnabled: bool\r\n):\r\n    assert _lendingPoolCoreContract != empty(address), \"address is the zero address\"\r\n    assert _erc20TokenContract != empty(address), \"address is the zero address\"\r\n    assert _protocolWallet != empty(address), \"address is the zero address\"\r\n    assert _protocolFeesShare <= 10000, \"fees share exceeds 10000 bps\"\r\n    assert _maxCapitalEfficienty <= 10000, \"capital eff exceeds 10000 bps\"\r\n\r\n    self.owner = msg.sender\r\n    self.lendingPoolCoreContract = _lendingPoolCoreContract\r\n    self.lendingPoolLockContract = _lendingPoolLockContract\r\n    erc20TokenContract = _erc20TokenContract\r\n    self.protocolWallet = _protocolWallet\r\n    self.protocolFeesShare = _protocolFeesShare\r\n    self.maxCapitalEfficienty = _maxCapitalEfficienty\r\n    self.isPoolActive = True\r\n    \r\n    if _whitelistEnabled:\r\n        self.whitelistEnabled = _whitelistEnabled\r\n\r\n\r\n@external\r\n@payable\r\ndef __default__():\r\n    assert msg.sender == erc20TokenContract, \"msg.sender is not the WETH addr\"\r\n    # log PaymentReceived(msg.sender, msg.sender, msg.value)\r\n\r\n\r\n@external\r\ndef proposeOwner(_address: address):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert _address != empty(address), \"_address it the zero address\"\r\n    assert self.owner != _address, \"proposed owner addr is the owner\"\r\n    assert self.proposedOwner != _address, \"proposed owner addr is the same\"\r\n\r\n    self.proposedOwner = _address\r\n\r\n    log OwnerProposed(\r\n        self.owner,\r\n        _address,\r\n        self.owner,\r\n        _address,\r\n        erc20TokenContract\r\n    )\r\n\r\n\r\n@external\r\ndef claimOwnership():\r\n    assert msg.sender == self.proposedOwner, \"msg.sender is not the proposed\"\r\n\r\n    log OwnershipTransferred(\r\n        self.owner,\r\n        self.proposedOwner,\r\n        self.owner,\r\n        self.proposedOwner,\r\n        erc20TokenContract\r\n    )\r\n\r\n    self.owner = self.proposedOwner\r\n    self.proposedOwner = empty(address)\r\n\r\n\r\n@external\r\ndef changeMaxCapitalEfficiency(_value: uint256):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert _value <= 10000, \"capital eff exceeds 10000 bps\"\r\n    assert _value != self.maxCapitalEfficienty, \"new value is the same\"\r\n\r\n    log MaxCapitalEfficiencyChanged(\r\n        erc20TokenContract,\r\n        self.maxCapitalEfficienty,\r\n        _value,\r\n        erc20TokenContract\r\n    )\r\n\r\n    self.maxCapitalEfficienty = _value\r\n\r\n\r\n@external\r\ndef changeProtocolWallet(_address: address):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert _address != empty(address), \"_address is the zero address\"\r\n    assert _address != self.protocolWallet, \"new value is the same\"\r\n\r\n    log ProtocolWalletChanged(\r\n        erc20TokenContract,\r\n        self.protocolWallet,\r\n        _address,\r\n        erc20TokenContract\r\n    )\r\n\r\n    self.protocolWallet = _address\r\n\r\n\r\n@external\r\ndef changeProtocolFeesShare(_value: uint256):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert _value <= 10000, \"fees share exceeds 10000 bps\"\r\n    assert _value != self.protocolFeesShare, \"new value is the same\"\r\n\r\n    log ProtocolFeesShareChanged(\r\n        erc20TokenContract,\r\n        self.protocolFeesShare,\r\n        _value,\r\n        erc20TokenContract\r\n    )\r\n\r\n    self.protocolFeesShare = _value\r\n\r\n\r\n@external\r\ndef setLoansPeripheralAddress(_address: address):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert _address != empty(address), \"_address is the zero address\"\r\n    assert _address.is_contract, \"_address is not a contract\"\r\n    assert _address != self.loansContract, \"new value is the same\"\r\n\r\n    log LoansPeripheralAddressSet(\r\n        erc20TokenContract,\r\n        self.loansContract,\r\n        _address,\r\n        erc20TokenContract\r\n    )\r\n\r\n    self.loansContract = _address\r\n\r\n\r\n@external\r\ndef setLiquidationsPeripheralAddress(_address: address):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert _address != empty(address), \"_address is the zero address\"\r\n    assert _address.is_contract, \"_address is not a contract\"\r\n    assert _address != self.liquidationsPeripheralContract, \"new value is the same\"\r\n\r\n    log LiquidationsPeripheralAddressSet(\r\n        erc20TokenContract,\r\n        self.liquidationsPeripheralContract,\r\n        _address,\r\n        erc20TokenContract\r\n    )\r\n\r\n    self.liquidationsPeripheralContract = _address\r\n\r\n\r\n@external\r\ndef setLiquidityControlsAddress(_address: address):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert _address != empty(address), \"_address is the zero address\"\r\n    assert _address.is_contract, \"_address is not a contract\"\r\n    assert _address != self.liquidityControlsContract, \"new value is the same\"\r\n\r\n    log LiquidityControlsAddressSet(\r\n        erc20TokenContract,\r\n        self.liquidityControlsContract,\r\n        _address,\r\n        erc20TokenContract\r\n    )\r\n\r\n    self.liquidityControlsContract = _address\r\n\r\n\r\n@external\r\ndef changeWhitelistStatus(_flag: bool):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert self.whitelistEnabled != _flag, \"new value is the same\"\r\n\r\n    self.whitelistEnabled = _flag\r\n\r\n    log WhitelistStatusChanged(\r\n        erc20TokenContract,\r\n        _flag,\r\n        erc20TokenContract\r\n    )\r\n\r\n\r\n@external\r\ndef addWhitelistedAddress(_address: address):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert _address != empty(address), \"_address is the zero address\"\r\n    assert self.whitelistEnabled, \"whitelist is disabled\"\r\n    assert not self.whitelistedAddresses[_address], \"address is already whitelisted\"\r\n\r\n    self.whitelistedAddresses[_address] = True\r\n\r\n    log WhitelistAddressAdded(\r\n        erc20TokenContract,\r\n        _address,\r\n        erc20TokenContract\r\n    )\r\n\r\n\r\n@external\r\ndef removeWhitelistedAddress(_address: address):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert _address != empty(address), \"_address is the zero address\"\r\n    assert self.whitelistEnabled, \"whitelist is disabled\"\r\n    assert self.whitelistedAddresses[_address], \"address is not whitelisted\"\r\n\r\n    self.whitelistedAddresses[_address] = False\r\n\r\n    log WhitelistAddressRemoved(\r\n        erc20TokenContract,\r\n        _address,\r\n        erc20TokenContract\r\n    )\r\n\r\n\r\n@external\r\ndef changePoolStatus(_flag: bool):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n\r\n    self.isPoolActive = _flag\r\n  \r\n    if not _flag:\r\n        self.isPoolInvesting = False\r\n\r\n        log InvestingStatusChanged(\r\n            erc20TokenContract,\r\n            False,\r\n            erc20TokenContract\r\n        )\r\n\r\n    if _flag and not self.isPoolInvesting and self._poolHasFundsToInvestAfterWithdraw(0):\r\n        self.isPoolInvesting = True\r\n\r\n        log InvestingStatusChanged(\r\n            erc20TokenContract,\r\n            True,\r\n            erc20TokenContract\r\n        )\r\n\r\n    log ContractStatusChanged(\r\n        erc20TokenContract,\r\n        _flag,\r\n        erc20TokenContract\r\n    )\r\n\r\n\r\n@external\r\ndef deprecate():\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert not self.isPoolDeprecated, \"pool is already deprecated\"\r\n\r\n    self.isPoolDeprecated = True\r\n    self.isPoolActive = False\r\n    self.isPoolInvesting = False\r\n\r\n    log ContractStatusChanged(\r\n        erc20TokenContract,\r\n        False,\r\n        erc20TokenContract\r\n    )\r\n\r\n    log InvestingStatusChanged(\r\n        erc20TokenContract,\r\n        False,\r\n        erc20TokenContract\r\n    )\r\n\r\n    log ContractDeprecated(\r\n        erc20TokenContract,\r\n        erc20TokenContract\r\n    )\r\n\r\n\r\n@external\r\ndef deposit(_amount: uint256):\r\n\r\n    \"\"\"\r\n    @notice Deposits the given amount of the ERC20 in the lending pool\r\n    @dev Logs the `Deposit` event\r\n    @param _amount Value to deposit\r\n    \"\"\"\r\n\r\n    assert self._fundsAreAllowed(msg.sender, self.lendingPoolCoreContract, _amount), \"not enough funds allowed\"\r\n    self._deposit(_amount, msg.sender)\r\n\r\n\r\n\r\n@external\r\n@payable\r\ndef depositEth():\r\n\r\n    \"\"\"\r\n    @notice Deposits the sent amount in the lending pool\r\n    @dev Logs the `Deposit` event\r\n    \"\"\"\r\n\r\n    log PaymentReceived(msg.sender, msg.sender, msg.value)\r\n\r\n    self._wrap_and_approve(self.lendingPoolCoreContract, msg.value)\r\n    self._deposit(msg.value, self)\r\n\r\n\r\n@external\r\ndef withdraw(_amount: uint256):\r\n    \"\"\"\r\n    @notice Withdrawals the given amount of ERC20 from the lending pool\r\n    @dev Logs the `Withdrawal` and, if it changes the pools investing status, the `InvestingStatusChanged` events\r\n    @param _amount Value to withdraw\r\n    \"\"\"\r\n    self._withdraw(_amount, msg.sender)\r\n\r\n\r\n@external\r\ndef withdrawEth(_amount: uint256):\r\n    \"\"\"\r\n    @notice Withdrawals the given amount of ETH from the lending pool\r\n    @dev Logs the `Withdrawal` and, if it changes the pools investing status, the `InvestingStatusChanged` events\r\n    @param _amount Value to withdraw in wei\r\n    \"\"\"\r\n    self._withdraw(_amount, self)\r\n    self._unwrap_and_send(msg.sender, _amount)\r\n\r\n\r\n\r\n@external\r\ndef sendFunds(_to: address, _amount: uint256):\r\n    \"\"\"\r\n    @notice Sends funds in the pool ERC20 to a borrower as part of a loan creation\r\n    @dev Logs the `FundsTransfer` and, if it changes the pools investing status, the `InvestingStatusChanged` events\r\n    @param _to The wallet address to transfer the funds to\r\n    @param _amount Value to transfer\r\n    \"\"\"\r\n\r\n    self._sendFunds(_to, _to, _amount)\r\n\r\n\r\n@external\r\ndef sendFundsEth(_to: address, _amount: uint256):\r\n    \"\"\"\r\n    @notice Sends funds in ETH to a borrower as part of a loan creation\r\n    @dev Logs the `FundsTransfer` and, if it changes the pools investing status, the `InvestingStatusChanged` events\r\n    @param _to The wallet address to transfer the funds to\r\n    @param _amount Value to transfer in wei\r\n    \"\"\"\r\n\r\n    self._sendFunds(_to, self, _amount)\r\n    self._unwrap_and_send(_to, _amount)\r\n\r\n\r\n@payable\r\n@external\r\ndef receiveFundsEth(_borrower: address, _amount: uint256, _rewardsAmount: uint256):\r\n\r\n    \"\"\"\r\n    @notice Receive funds in ETH from a borrower as part of a loan payment\r\n    @dev Logs the `FundsReceipt` and, if it changes the pools investing status, the `InvestingStatusChanged` events\r\n    @param _borrower The wallet address to receive the funds from\r\n    @param _amount Value of the loans principal to receive in wei\r\n    @param _rewardsAmount Value of the loans interest (including the protocol fee share) to receive in wei\r\n    \"\"\"\r\n\r\n    _received_amount: uint256 = msg.value\r\n    assert _received_amount > 0, \"amount should be higher than 0\"\r\n    assert _received_amount == _amount + _rewardsAmount, \"recv amount not match partials\"\r\n\r\n    log PaymentReceived(msg.sender, msg.sender, _amount + _rewardsAmount)\r\n\r\n    self._wrap_and_approve(self.lendingPoolCoreContract, _received_amount)\r\n    self._receiveFunds(_borrower, self, _amount, _rewardsAmount)\r\n\r\n\r\n@external\r\ndef receiveFunds(_borrower: address, _amount: uint256, _rewardsAmount: uint256):\r\n\r\n    \"\"\"\r\n    @notice Receive funds in the pool ERC20 from a borrower as part of a loan payment\r\n    @dev Logs the `FundsReceipt` and, if it changes the pools investing status, the `InvestingStatusChanged` events\r\n    @param _borrower The wallet address to receive the funds from\r\n    @param _amount Value of the loans principal to receive\r\n    @param _rewardsAmount Value of the loans interest (including the protocol fee share) to receive\r\n    \"\"\"\r\n\r\n    assert self._fundsAreAllowed(_borrower, self.lendingPoolCoreContract, _amount + _rewardsAmount), \"insufficient liquidity\"\r\n    self._receiveFunds(_borrower, _borrower, _amount, _rewardsAmount)\r\n\r\n\r\n@external\r\ndef receiveFundsFromLiquidation(\r\n    _borrower: address,\r\n    _amount: uint256,\r\n    _rewardsAmount: uint256,\r\n    _distributeToProtocol: bool,\r\n    _investedAmount: uint256,\r\n    _origin: String[30]\r\n):\r\n\r\n    \"\"\"\r\n    @notice Receive funds from a liquidation in the pool ERC20\r\n    @dev Logs the `FundsReceipt` and, if it changes the pools investing status, the `InvestingStatusChanged` events\r\n    @param _borrower The wallet address to receive the funds from\r\n    @param _amount Value of the loans principal to receive\r\n    @param _rewardsAmount Value of the rewards after liquidation (including the protocol fee share) to receive\r\n    @param _distributeToProtocol Wether to distribute the protocol fees or not\r\n    @param _origin Identification of the liquidation method\r\n    \"\"\"\r\n\r\n    assert self._fundsAreAllowed(_borrower, self.lendingPoolCoreContract, _amount + _rewardsAmount), \"insufficient liquidity\"\r\n    self._receiveFundsFromLiquidation(_borrower, _borrower, _amount, _rewardsAmount, _distributeToProtocol, _investedAmount, _origin)\r\n\r\n\r\n@payable\r\n@external\r\ndef receiveFundsFromLiquidationEth(\r\n    _borrower: address,\r\n    _amount: uint256,\r\n    _rewardsAmount: uint256,\r\n    _distributeToProtocol: bool,\r\n    _investedAmount: uint256,\r\n    _origin: String[30]\r\n):\r\n\r\n    \"\"\"\r\n    @notice Receive funds from a liquidation in ETH\r\n    @dev Logs the `FundsReceipt` and, if it changes the pools investing status, the `InvestingStatusChanged` events\r\n    @param _borrower The wallet address to receive the funds from\r\n    @param _amount Value of the loans principal to receive in wei\r\n    @param _rewardsAmount Value of the rewards after liquidation (including the protocol fee share) to receive in wei\r\n    @param _distributeToProtocol Wether to distribute the protocol fees or not\r\n    @param _origin Identification of the liquidation method\r\n    \"\"\"\r\n\r\n    receivedAmount: uint256 = msg.value\r\n\r\n    assert receivedAmount == _amount + _rewardsAmount, \"recv amount not match partials\"\r\n\r\n    log PaymentReceived(msg.sender, msg.sender, receivedAmount)\r\n\r\n    self._wrap_and_approve(self.lendingPoolCoreContract, receivedAmount)\r\n    self._receiveFundsFromLiquidation(_borrower, self, _amount, _rewardsAmount, _distributeToProtocol, _investedAmount, _origin)","ABI":"[{\"name\":\"OwnerProposed\",\"inputs\":[{\"name\":\"ownerIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"proposedOwnerIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"owner\",\"type\":\"address\",\"indexed\":false},{\"name\":\"proposedOwner\",\"type\":\"address\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"ownerIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"proposedOwnerIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"owner\",\"type\":\"address\",\"indexed\":false},{\"name\":\"proposedOwner\",\"type\":\"address\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"MaxCapitalEfficiencyChanged\",\"inputs\":[{\"name\":\"erc20TokenContractIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"currentValue\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"newValue\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ProtocolWalletChanged\",\"inputs\":[{\"name\":\"erc20TokenContractIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"currentValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"newValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ProtocolFeesShareChanged\",\"inputs\":[{\"name\":\"erc20TokenContractIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"currentValue\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"newValue\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"LoansPeripheralAddressSet\",\"inputs\":[{\"name\":\"erc20TokenContractIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"currentValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"newValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"LiquidationsPeripheralAddressSet\",\"inputs\":[{\"name\":\"erc20TokenContractIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"currentValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"newValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"LiquidityControlsAddressSet\",\"inputs\":[{\"name\":\"erc20TokenContractIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"currentValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"newValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"WhitelistStatusChanged\",\"inputs\":[{\"name\":\"erc20TokenContractIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"bool\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"WhitelistAddressAdded\",\"inputs\":[{\"name\":\"erc20TokenContractIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"address\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"WhitelistAddressRemoved\",\"inputs\":[{\"name\":\"erc20TokenContractIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"address\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ContractStatusChanged\",\"inputs\":[{\"name\":\"erc20TokenContractIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"bool\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"InvestingStatusChanged\",\"inputs\":[{\"name\":\"erc20TokenContractIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"bool\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ContractDeprecated\",\"inputs\":[{\"name\":\"erc20TokenContractIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Deposit\",\"inputs\":[{\"name\":\"walletIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"wallet\",\"type\":\"address\",\"indexed\":false},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Withdrawal\",\"inputs\":[{\"name\":\"walletIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"wallet\",\"type\":\"address\",\"indexed\":false},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"FundsTransfer\",\"inputs\":[{\"name\":\"walletIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"wallet\",\"type\":\"address\",\"indexed\":false},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"FundsReceipt\",\"inputs\":[{\"name\":\"walletIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"wallet\",\"type\":\"address\",\"indexed\":false},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"rewardsPool\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"rewardsProtocol\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"investedAmount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false},{\"name\":\"fundsOrigin\",\"type\":\"string\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"PaymentSent\",\"inputs\":[{\"name\":\"walletIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"wallet\",\"type\":\"address\",\"indexed\":false},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"PaymentReceived\",\"inputs\":[{\"name\":\"walletIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"wallet\",\"type\":\"address\",\"indexed\":false},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"maxFundsInvestable\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"theoreticalMaxFundsInvestable\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"theoreticalMaxFundsInvestableAfterDeposit\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lenderFunds\",\"inputs\":[{\"name\":\"_lender\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"name\":\"currentAmountDeposited\",\"type\":\"uint256\"},{\"name\":\"totalAmountDeposited\",\"type\":\"uint256\"},{\"name\":\"totalAmountWithdrawn\",\"type\":\"uint256\"},{\"name\":\"sharesBasisPoints\",\"type\":\"uint256\"},{\"name\":\"activeForRewards\",\"type\":\"bool\"}]}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lockedAmount\",\"inputs\":[{\"name\":\"_lender\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_lendingPoolCoreContract\",\"type\":\"address\"},{\"name\":\"_lendingPoolLockContract\",\"type\":\"address\"},{\"name\":\"_erc20TokenContract\",\"type\":\"address\"},{\"name\":\"_protocolWallet\",\"type\":\"address\"},{\"name\":\"_protocolFeesShare\",\"type\":\"uint256\"},{\"name\":\"_maxCapitalEfficienty\",\"type\":\"uint256\"},{\"name\":\"_whitelistEnabled\",\"type\":\"bool\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"proposeOwner\",\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claimOwnership\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"changeMaxCapitalEfficiency\",\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"changeProtocolWallet\",\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"changeProtocolFeesShare\",\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setLoansPeripheralAddress\",\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setLiquidationsPeripheralAddress\",\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setLiquidityControlsAddress\",\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"changeWhitelistStatus\",\"inputs\":[{\"name\":\"_flag\",\"type\":\"bool\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"addWhitelistedAddress\",\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"removeWhitelistedAddress\",\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"changePoolStatus\",\"inputs\":[{\"name\":\"_flag\",\"type\":\"bool\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deprecate\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deposit\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"depositEth\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdrawEth\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"sendFunds\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"sendFundsEth\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"receiveFundsEth\",\"inputs\":[{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_rewardsAmount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"receiveFunds\",\"inputs\":[{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_rewardsAmount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"receiveFundsFromLiquidation\",\"inputs\":[{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_rewardsAmount\",\"type\":\"uint256\"},{\"name\":\"_distributeToProtocol\",\"type\":\"bool\"},{\"name\":\"_investedAmount\",\"type\":\"uint256\"},{\"name\":\"_origin\",\"type\":\"string\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"receiveFundsFromLiquidationEth\",\"inputs\":[{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_rewardsAmount\",\"type\":\"uint256\"},{\"name\":\"_distributeToProtocol\",\"type\":\"bool\"},{\"name\":\"_investedAmount\",\"type\":\"uint256\"},{\"name\":\"_origin\",\"type\":\"string\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"proposedOwner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"loansContract\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lendingPoolCoreContract\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lendingPoolLockContract\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"erc20TokenContract\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"liquidationsPeripheralContract\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"liquidityControlsContract\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"protocolWallet\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"protocolFeesShare\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"maxCapitalEfficienty\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isPoolActive\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isPoolDeprecated\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isPoolInvesting\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"whitelistEnabled\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"whitelistedAddresses\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]}]","ContractName":"LendingPoolPeripheral","CompilerVersion":"vyper:0.3.9","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"0000000000000000000000003fe48db666a0a0c71806f059cd0ea9b82a795f2e00000000000000000000000001ebc22cd555cbf227c72cc41b42fc507681300b000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000007d96cc26566bfca358c61fbe7be3ca771da7ea6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000027100000000000000000000000000000000000000000000000000000000000000001","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}