{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.3.10\r\n\"\"\"\r\n@title YFI Buyback Auction\r\n@author 0xkorin, Yearn Finance\r\n@license GNU AGPLv3\r\n@notice\r\n    Contract to run permissionless dutch auctions, selling WETH for YFI.\r\n    Anyone can kick off an auction.\r\n    Auctions take up to 24 hours and can take place at most once a week.\r\n    Auction price starts very high and halves every hour, until the auction \r\n    sells out or the 24 hour passes.\r\n    Any unsold WETH rolls over to the next auction.\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\ninterface WETH:\r\n    def deposit(): payable\r\n\r\ninterface Taker:\r\n    def auctionTakeCallback(_id: bytes32, _sender: address, _taken: uint256, _needed: uint256, _data: Bytes[1024]): nonpayable\r\n\r\n# https://hackmd.io/@D4Z1faeARKedWmEygMxDBA/Syxo_HJqp\r\ninterface Auction:\r\n    def auctionLength() -> uint256: view\r\n    def auctionCooldown() -> uint256: view\r\n    def auctionInfo(_id: bytes32) -> AuctionInfo: view\r\n    def getAmountNeeded(_id: bytes32, _take: uint256, _ts: uint256) -> uint256: view\r\n    def price(_id: bytes32, _ts: uint256) -> uint256: view\r\n    def kickable(_id: bytes32) -> uint256: view\r\n    def kick(_id: bytes32) -> uint256: nonpayable\r\n    def take(_id: bytes32, _max: uint256, _recipient: address, _data: Bytes[1024]): nonpayable\r\n\r\nimplements: Auction\r\n\r\nstruct AuctionInfo:\r\n    sell: address\r\n    want: address\r\n    kicked: uint256\r\n    available: uint256\r\n\r\nsell: immutable(ERC20)\r\nwant: immutable(ERC20)\r\nmanagement: public(address)\r\npending_management: public(address)\r\ntreasury: public(address)\r\nkick_threshold: public(uint256)\r\n\r\nkicked: uint256\r\navailable: uint256\r\nstart_price: uint256\r\n\r\n# keccak(\"YFI buyback\")\r\nAUCTION_ID: constant(bytes32) = 0xc3c33f920aa7747069e32346c4430a2bef834d3f1334109ef63d0a2d36e0c7fb\r\nSCALE: constant(uint256) = 10**18\r\nDECAY_SCALE: constant(uint256) = 10**27\r\nSTART_PRICE: constant(uint256) = 40_000 * SCALE\r\nMINUTE_FACTOR: constant(uint256) = 988_514_020_352_896_135_356_867_505\r\nMINUTE: constant(uint256) = 60\r\nHOUR: constant(uint256) = 60 * MINUTE\r\nDAY: constant(uint256) = 24 * HOUR\r\nAUCTION_LENGTH: constant(uint256) = DAY\r\nKICK_COOLDOWN: constant(uint256) = 7 * DAY\r\n\r\nevent AuctionEnabled:\r\n    auction_id: bytes32\r\n    sell: indexed(address)\r\n    want: indexed(address)\r\n    auction: indexed(address)\r\n\r\nevent AuctionKicked:\r\n    auction_id: indexed(bytes32)\r\n    available: uint256\r\n\r\nevent AuctionTaken:\r\n    auction_id: indexed(bytes32)\r\n    taken: uint256\r\n    left: uint256\r\n\r\nevent SetTreasury:\r\n    treasury: indexed(address)\r\n\r\nevent SetKickThreshold:\r\n    threshold: uint256\r\n\r\nevent PendingManagement:\r\n    management: indexed(address)\r\n\r\nevent SetManagement:\r\n    management: indexed(address)\r\n\r\n@external\r\ndef __init__(_weth: address, _want: address, _treasury: address, _threshold: uint256):\r\n    \"\"\"\r\n    @notice Constructor\r\n    @param _weth WETH address\r\n    @param _want Want token address\r\n    @param _treasury Treasury address, recipient of want tokens\r\n    @param _threshold Threshold ETH amount to automatically kick an auction\r\n    \"\"\"\r\n    sell = ERC20(_weth)\r\n    want = ERC20(_want)\r\n    self.management = msg.sender\r\n    self.treasury = _treasury\r\n    self.kick_threshold = _threshold\r\n    log AuctionEnabled(AUCTION_ID, _weth, _want, self)\r\n\r\n@external\r\n@payable\r\ndef __default__():\r\n    \"\"\"\r\n    @notice Receive ETH to be sold at a future auction\r\n    @dev May kick an auction\r\n    \"\"\"\r\n    assert msg.value > 0\r\n    WETH(sell.address).deposit(value=self.balance)\r\n\r\n    amount: uint256 = sell.balanceOf(self)\r\n    if amount >= self.kick_threshold and block.timestamp >= self.kicked + KICK_COOLDOWN:\r\n        self._kick(amount)\r\n\r\n@external\r\n@view\r\ndef auctionLength() -> uint256:\r\n    \"\"\"\r\n    @notice Get maximum duration of an auction\r\n    @return Maximum duration (seconds)\r\n    \"\"\"\r\n    return AUCTION_LENGTH\r\n\r\n@external\r\n@view\r\ndef auctionCooldown() -> uint256:\r\n    \"\"\"\r\n    @notice Get cooldown in between auction kicks\r\n    @return Kick cooldown (seconds)\r\n    \"\"\"\r\n    return KICK_COOLDOWN\r\n\r\n@external\r\n@view\r\ndef auctionInfo(_id: bytes32) -> AuctionInfo:\r\n    \"\"\"\r\n    @notice Get information of an auction\r\n    @param _id Auction identifier\r\n    @return sell token, want token, last kick time, sell tokens available\r\n    \"\"\"\r\n    assert _id == AUCTION_ID\r\n\r\n    available: uint256 = self.available\r\n    if block.timestamp >= self.kicked + AUCTION_LENGTH:\r\n        available = 0\r\n\r\n    return AuctionInfo({\r\n        sell: sell.address,\r\n        want: want.address,\r\n        kicked: self.kicked,\r\n        available: available\r\n    })\r\n\r\n@external\r\n@view\r\ndef getAmountNeeded(_id: bytes32, _amount: uint256, _ts: uint256 = block.timestamp) -> uint256:\r\n    \"\"\"\r\n    @notice Get amount of `want` needed to buy `_amount` of `sell` at time `_ts`\r\n    @param _id Auction identifier\r\n    @param _amount Amount of `sell` tokens to sell to the caller\r\n    @param _ts Timestamp\r\n    @return Amount of `want` tokens needed\r\n    \"\"\"\r\n    price: uint256 = self._price(_ts)\r\n    if _id != AUCTION_ID or _amount == 0 or price == 0:\r\n        return 0\r\n    return (_amount * price + SCALE - 1) / SCALE\r\n\r\n@external\r\n@view\r\ndef price(_id: bytes32, _ts: uint256 = block.timestamp) -> uint256:\r\n    \"\"\"\r\n    @notice Get price of `sell` in terms of `want` at time `_ts`\r\n    @param _id Auction identifier\r\n    @param _ts Timestamp\r\n    @return Price\r\n    \"\"\"\r\n    if _id != AUCTION_ID:\r\n        return 0\r\n    return self._price(_ts)\r\n\r\n@external\r\n@view\r\ndef kickable(_id: bytes32) -> uint256:\r\n    \"\"\"\r\n    @notice Amount of `sell` tokens that can be kicked\r\n    @param _id Auction identifier\r\n    @return Amount of `sell` tokens\r\n    \"\"\"\r\n    if _id != AUCTION_ID or block.timestamp < self.kicked + KICK_COOLDOWN:\r\n        return 0\r\n    return sell.balanceOf(self)\r\n\r\n@external\r\ndef kick(_id: bytes32) -> uint256:\r\n    \"\"\"\r\n    @notice Kick off an auction\r\n    @param _id Auction identifier\r\n    @return Amount of `sell` tokens available\r\n    \"\"\"\r\n    assert _id == AUCTION_ID\r\n    assert block.timestamp >= self.kicked + KICK_COOLDOWN\r\n    amount: uint256 = sell.balanceOf(self)\r\n    assert amount > 0\r\n    self._kick(amount)\r\n    return amount\r\n\r\n@external\r\n@nonreentrant(\"take\")\r\ndef take(_id: bytes32, _max: uint256 = max_value(uint256), _recipient: address = msg.sender, _data: Bytes[1024] = b\"\"):\r\n    \"\"\"\r\n    @notice Take up to `_max` of `sell` tokens at current price\r\n    @param _id Auction identifier\r\n    @param _max Maximum amount of `sell` tokens to take\r\n    @param _recipient Recipient of `sell` tokens\r\n    \"\"\"\r\n    assert _id == AUCTION_ID\r\n    price: uint256 = self._price(block.timestamp)\r\n    assert price > 0\r\n    available: uint256 = self.available\r\n    taken: uint256 = min(_max, available)\r\n    assert taken > 0\r\n    available -= taken\r\n    needed: uint256 = (taken * price + SCALE - 1) / SCALE\r\n    self.available = available\r\n\r\n    assert sell.transfer(_recipient, taken, default_return_value=True)\r\n    if len(_data) > 0:\r\n        # callback to recipient if there's any additional data\r\n        Taker(_recipient).auctionTakeCallback(_id, msg.sender, taken, needed, _data)\r\n\r\n    assert want.transferFrom(msg.sender, self.treasury, needed, default_return_value=True)\r\n    log AuctionTaken(AUCTION_ID, taken, available)\r\n\r\n@external\r\ndef set_treasury(_treasury: address):\r\n    \"\"\"\r\n    @notice Set new treasury address\r\n    @param _treasury New treasury address\r\n    @dev Treasury is recipient of `want` tokens from auctions\r\n    @dev Only callable by management\r\n    \"\"\"\r\n    assert msg.sender == self.management\r\n    assert _treasury != empty(address)\r\n    self.treasury = _treasury\r\n    log SetTreasury(_treasury)\r\n\r\n@external\r\ndef set_kick_threshold(_threshold: uint256):\r\n    \"\"\"\r\n    @notice Set new kick threshold\r\n    @param _threshold New threshold (18 decimals)\r\n    @dev If an ETH transfer puts the balance over the threshold, a new\r\n        auction is automatically kicked\r\n    @dev Only callable by management\r\n    \"\"\"\r\n    assert msg.sender == self.management\r\n    self.kick_threshold = _threshold\r\n    log SetKickThreshold(_threshold)\r\n\r\n@external\r\ndef set_management(_management: address):\r\n    \"\"\"\r\n    @notice \r\n        Set the pending management address.\r\n        Needs to be accepted by that account separately to transfer management over\r\n    @param _management New pending management address\r\n    \"\"\"\r\n    assert msg.sender == self.management\r\n    self.pending_management = _management\r\n    log PendingManagement(_management)\r\n\r\n@external\r\ndef accept_management():\r\n    \"\"\"\r\n    @notice \r\n        Accept management role.\r\n        Can only be called by account previously marked as pending management by current management\r\n    \"\"\"\r\n    assert msg.sender == self.pending_management\r\n    self.pending_management = empty(address)\r\n    self.management = msg.sender\r\n    log SetManagement(msg.sender)\r\n\r\n@internal\r\ndef _kick(_amount: uint256):\r\n    \"\"\"\r\n    @notice Kick an auction\r\n    \"\"\"\r\n    self.kicked = block.timestamp\r\n    self.available = _amount\r\n    self.start_price = START_PRICE * SCALE / _amount\r\n    log AuctionKicked(AUCTION_ID, _amount)\r\n\r\n@internal\r\n@view\r\ndef _price(_ts: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice\r\n        Calculates price as `start * (1/2)**h * (1/2)**(m/60)`\r\n        Where `h` is the amount of hours since the start of the auction\r\n        and `m` is the amout of minutes past the hour\r\n    \"\"\"\r\n    t: uint256 = self.kicked\r\n    if _ts < t or _ts >= t + AUCTION_LENGTH:\r\n        return 0\r\n    t = _ts - t\r\n\r\n    m: uint256 = (t % HOUR) / MINUTE\r\n\r\n    # (1/2)**(m/60)\r\n    f: uint256 = DECAY_SCALE\r\n    x: uint256 = MINUTE_FACTOR\r\n    if m % 2 != 0:\r\n        f = MINUTE_FACTOR\r\n\r\n    for _ in range(7):\r\n        m /= 2\r\n        if m == 0:\r\n            break\r\n        x = x * x / DECAY_SCALE\r\n        if m % 2 != 0:\r\n            f = f * x / DECAY_SCALE\r\n\r\n    return self.start_price * (DECAY_SCALE >> (t / HOUR)) / DECAY_SCALE * f / DECAY_SCALE","ABI":"[{\"name\":\"AuctionEnabled\",\"inputs\":[{\"name\":\"auction_id\",\"type\":\"bytes32\",\"indexed\":false},{\"name\":\"sell\",\"type\":\"address\",\"indexed\":true},{\"name\":\"want\",\"type\":\"address\",\"indexed\":true},{\"name\":\"auction\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"AuctionKicked\",\"inputs\":[{\"name\":\"auction_id\",\"type\":\"bytes32\",\"indexed\":true},{\"name\":\"available\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"AuctionTaken\",\"inputs\":[{\"name\":\"auction_id\",\"type\":\"bytes32\",\"indexed\":true},{\"name\":\"taken\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"left\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetTreasury\",\"inputs\":[{\"name\":\"treasury\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetKickThreshold\",\"inputs\":[{\"name\":\"threshold\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"PendingManagement\",\"inputs\":[{\"name\":\"management\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetManagement\",\"inputs\":[{\"name\":\"management\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_weth\",\"type\":\"address\"},{\"name\":\"_want\",\"type\":\"address\"},{\"name\":\"_treasury\",\"type\":\"address\"},{\"name\":\"_threshold\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"auctionLength\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"auctionCooldown\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"auctionInfo\",\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"name\":\"sell\",\"type\":\"address\"},{\"name\":\"want\",\"type\":\"address\"},{\"name\":\"kicked\",\"type\":\"uint256\"},{\"name\":\"available\",\"type\":\"uint256\"}]}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getAmountNeeded\",\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getAmountNeeded\",\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_ts\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"price\",\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"price\",\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_ts\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"kickable\",\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"kick\",\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"take\",\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"take\",\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_max\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"take\",\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_max\",\"type\":\"uint256\"},{\"name\":\"_recipient\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"take\",\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_max\",\"type\":\"uint256\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_treasury\",\"inputs\":[{\"name\":\"_treasury\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_kick_threshold\",\"inputs\":[{\"name\":\"_threshold\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_management\",\"inputs\":[{\"name\":\"_management\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"accept_management\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"management\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pending_management\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"treasury\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"kick_threshold\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]}]","ContractName":"YFI Buyback Auction","CompilerVersion":"vyper:0.3.10","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000bc529c00c6401aef6d220be8c6ea1667f6ad93e000000000000000000000000feb4acf3df3cdea7399794d0869ef76a6efaff520000000000000000000000000000000000000000000000001bc16d674ec80000","EVMVersion":"Default","Library":"","LicenseType":"GNU AGPLv3","Proxy":"0","Implementation":"","SwarmSource":""}]}