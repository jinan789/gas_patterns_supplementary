{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.3.7\r\n\"\"\"\r\n@title yDiscount\r\n@author Yearn Finance\r\n@license AGPLv3\r\n@notice\r\n    Allow contributors to buy locked YFI at a discount.\r\n    Once a month, yBudget gives allowances to teams based on their budget/revenue.\r\n    Teams can allocate those allowances to their individual contributors, up to their salary.\r\n    Contributors can choose to exercise (part of) their allowance to buy YFI at a discount.\r\n    The YFI is added to their veYFI lock and the discount depends on the remaining duration of the lock.\r\n    Alternatively contributors have the option to delegate their discount to a third party for a fixed discount.\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\nstruct LockedBalance:\r\n    amount: uint256\r\n    end: uint256\r\n\r\nstruct LatestRoundData:\r\n    round_id: uint80\r\n    answer: int256\r\n    started: uint256\r\n    updated: uint256\r\n    answered_round: uint80\r\n\r\ninterface VotingEscrow:\r\n    def locked(_account: address) -> LockedBalance: view\r\n    def modify_lock(_amount: uint256, _unlock_time: uint256, _account: address) -> LockedBalance: nonpayable\r\n\r\ninterface ChainlinkOracle:\r\n    def latestRoundData() -> LatestRoundData: view\r\n    def decimals() -> uint256: view\r\n\r\ninterface DiscountCallback:\r\n    def delegated(_lock: address, _account: address, _amount_spent: uint256, _amount_locked: uint256): nonpayable\r\n\r\nyfi: public(immutable(ERC20))\r\nveyfi: public(immutable(VotingEscrow))\r\nchainlink_oracle: public(immutable(ChainlinkOracle))\r\nmanagement: public(immutable(address))\r\n\r\nmonth: public(uint256)\r\nexpiration: public(uint256)\r\nteam_allowances: HashMap[address, uint256] # team -> packed allowance\r\ncontributor_allowances: HashMap[address, uint256] # contributor -> packed allowance\r\n\r\nSCALE: constant(uint256) = 10**18\r\nPRICE_DISCOUNT_SLOPE: constant(uint256) = 245096 * 10**10\r\nPRICE_DISCOUNT_BIAS: constant(uint256) = 9019616 * 10**10\r\nDELEGATE_DISCOUNT: constant(uint256) = 10**17\r\n\r\nALLOWANCE_EXPIRATION_TIME: constant(uint256) = 30 * 24 * 60 * 60\r\nORACLE_STALE_TIME: constant(uint256) = 2 * 60 * 60\r\nWEEK: constant(uint256) = 7 * 24 * 60 * 60\r\nMIN_LOCK_WEEKS: constant(uint256) = 4\r\nDELEGATE_MIN_LOCK_WEEKS: constant(uint256) = 104\r\nCAP_DISCOUNT_WEEKS: constant(uint256) = 208\r\n\r\nALLOWANCE_MASK: constant(uint256) = 2**192 - 1\r\nMONTH_SHIFT: constant(int128) = -192\r\nMONTH_MASK: constant(uint256) = 2**64 - 1\r\n\r\nevent NewMonth:\r\n    month: indexed(uint256)\r\n    expiration: uint256\r\n\r\nevent TeamAllowance:\r\n    team: indexed(address)\r\n    allowance: uint256\r\n    month: uint256\r\n    expiration: uint256\r\n\r\nevent ContributorAllowance:\r\n    team: indexed(address)\r\n    contributor: indexed(address)\r\n    allowance: uint256\r\n    month: uint256\r\n    expiration: uint256\r\n\r\nevent Buy:\r\n    contributor: indexed(address)\r\n    amount_in: uint256\r\n    amount_out: uint256\r\n    discount: uint256\r\n    lock: address\r\n\r\n@external\r\ndef __init__(_yfi: address, _veyfi: address, _chainlink_oracle: address, _management: address):\r\n    \"\"\"\r\n    @notice Constructor\r\n    @param _yfi YFI address\r\n    @param _veyfi veYFI address\r\n    @param _chainlink_oracle Chainlink oracle address\r\n    @param _management Management address\r\n    \"\"\"\r\n    yfi = ERC20(_yfi)\r\n    veyfi = VotingEscrow(_veyfi)\r\n    chainlink_oracle = ChainlinkOracle(_chainlink_oracle)\r\n    management = _management\r\n    assert ChainlinkOracle(_chainlink_oracle).decimals() == 18\r\n    assert ERC20(_yfi).approve(_veyfi, max_value(uint256), default_return_value=True)\r\n\r\n@external\r\n@view\r\ndef team_allowance(_team: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get available allowance for a particular team\r\n    @param _team Team to query allowance for\r\n    @return Allowance amount\r\n    \"\"\"\r\n    allowance: uint256 = 0\r\n    month: uint256 = 0\r\n    allowance, month = self._unpack_allowance(self.team_allowances[_team])\r\n    if month != self.month or block.timestamp >= self.expiration:\r\n        return 0\r\n    return allowance\r\n\r\n@external\r\n@view\r\ndef contributor_allowance(_contributor: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get available allowance for a particular contributor\r\n    @param _contributor Contributor to query allowance for\r\n    @return Allowance amount\r\n    \"\"\"\r\n    allowance: uint256 = 0\r\n    month: uint256 = 0\r\n    allowance, month = self._unpack_allowance(self.contributor_allowances[_contributor])\r\n    if month != self.month or block.timestamp >= self.expiration:\r\n        return 0\r\n    return allowance\r\n\r\n@external\r\ndef set_team_allowances(_teams: DynArray[address, 256], _allowances: DynArray[uint256, 256], _new_month: bool = True):\r\n    \"\"\"\r\n    @notice Set new allowance for multiple teams\r\n    @param _teams Teams to set allowances for\r\n    @param _allowances Allowance amounts\r\n    @param _new_month\r\n        True: trigger a new month, invalidating previous allowances for all teams and contributors\r\n        False: modify allowances for current month\r\n    \"\"\"\r\n    assert msg.sender == management\r\n    assert len(_teams) == len(_allowances)\r\n    \r\n    month: uint256 = self.month\r\n    expiration: uint256 = 0\r\n    if _new_month:\r\n        month += 1\r\n        expiration = block.timestamp + ALLOWANCE_EXPIRATION_TIME\r\n        self.month = month\r\n        self.expiration = expiration\r\n        log NewMonth(month, expiration)\r\n    else:\r\n        expiration = self.expiration\r\n        assert expiration > block.timestamp\r\n\r\n    for i in range(256):\r\n        if i == len(_teams):\r\n            break\r\n        assert _teams[i] != empty(address)\r\n        self.team_allowances[_teams[i]] = self._pack_allowance(_allowances[i], month)\r\n        log TeamAllowance(_teams[i], _allowances[i], month, expiration)\r\n\r\n@external\r\ndef set_contributor_allowances(_contributors: DynArray[address, 256], _allowances: DynArray[uint256, 256]):\r\n    \"\"\"\r\n    @notice Allocate team allowance to contributors\r\n    @param _contributors Contributors to allocate allowances to\r\n    @param _allowances Allowance amounts\r\n    \"\"\"\r\n    assert len(_contributors) == len(_allowances)\r\n\r\n    team_allowance: uint256 = 0\r\n    month: uint256 = 0\r\n    team_allowance, month = self._unpack_allowance(self.team_allowances[msg.sender])\r\n    assert team_allowance > 0\r\n    assert month == self.month and self.expiration > block.timestamp, \"allowance expired\"\r\n\r\n    for i in range(256):\r\n        if i == len(_contributors):\r\n            break\r\n        assert _contributors[i] != empty(address)\r\n        if _allowances[i] == 0:\r\n            continue\r\n\r\n        team_allowance -= _allowances[i]\r\n        contributor_allowance: uint256 = 0\r\n        contributor_month: uint256 = 0\r\n        contributor_allowance, contributor_month = self._unpack_allowance(self.contributor_allowances[_contributors[i]])\r\n        if contributor_month != month:\r\n            contributor_allowance = 0\r\n        contributor_allowance += _allowances[i]\r\n\r\n        self.contributor_allowances[_contributors[i]] = self._pack_allowance(contributor_allowance, month)\r\n        log ContributorAllowance(msg.sender, _contributors[i], contributor_allowance, month, self.expiration)\r\n\r\n    self.team_allowances[msg.sender] = self._pack_allowance(team_allowance, month)\r\n\r\n@internal\r\n@view\r\ndef _spot_price() -> uint256:\r\n    data: LatestRoundData = chainlink_oracle.latestRoundData()\r\n    assert block.timestamp < data.updated + ORACLE_STALE_TIME\r\n    return convert(data.answer, uint256)\r\n\r\n@external\r\n@view\r\ndef spot_price() -> uint256:\r\n    \"\"\"\r\n    @notice Get current YFI spot price in 18 decimals\r\n    \"\"\"\r\n    return self._spot_price()\r\n\r\n@internal\r\n@view\r\ndef _discount(_account: address) -> (uint256, uint256):\r\n    locked: LockedBalance = veyfi.locked(_account)\r\n    assert locked.amount > 0\r\n    weeks: uint256 = min(locked.end / WEEK - block.timestamp / WEEK, CAP_DISCOUNT_WEEKS)\r\n    return weeks, PRICE_DISCOUNT_BIAS + PRICE_DISCOUNT_SLOPE * weeks\r\n\r\n@external\r\n@view\r\ndef discount(_account: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get contributor discount in 18 decimals\r\n    @param _account Account to query discount for\r\n    \"\"\"\r\n    weeks: uint256 = 0\r\n    discount: uint256 = 0\r\n    weeks, discount = self._discount(_account)\r\n    return discount\r\n\r\n@internal\r\n@view\r\ndef _preview(_lock: address, _amount_in: uint256, _delegate: bool) -> (uint256, uint256):\r\n    locked: LockedBalance = veyfi.locked(_lock)\r\n    assert locked.amount > 0\r\n\r\n    weeks: uint256 = 0\r\n    discount: uint256 = 0\r\n    weeks, discount = self._discount(_lock)\r\n    price: uint256 = self._spot_price()\r\n    if _delegate:\r\n        assert weeks >= DELEGATE_MIN_LOCK_WEEKS, \"delegate lock too short\"\r\n        discount = DELEGATE_DISCOUNT\r\n    else:\r\n        assert weeks >= MIN_LOCK_WEEKS, \"lock too short\"\r\n    price = price * (SCALE - discount) / SCALE\r\n    return _amount_in * SCALE / price, discount\r\n\r\n@external\r\n@view\r\ndef preview(_lock: address, _amount_in: uint256, _delegate: bool) -> uint256:\r\n    \"\"\"\r\n    @notice Preview a YFI purchase\r\n    @param _lock Account that owns the lock\r\n    @param _amount_in Amount of ETH to spend\r\n    @param _delegate False: lock belongs to contributor, True: lock belongs to a third party\r\n    \"\"\"\r\n    amount: uint256 = 0\r\n    discount: uint256 = 0\r\n    amount, discount = self._preview(_lock, _amount_in, _delegate)\r\n    return amount\r\n\r\n@external\r\n@payable\r\ndef buy(_min_locked: uint256, _lock: address = msg.sender, _callback: address = empty(address)) -> uint256:\r\n    \"\"\"\r\n    @notice Buy YFI at a discount\r\n    @param _min_locked Minimum amount of YFI to be locked\r\n    @param _lock Owner of the lock to add to\r\n    @param _callback Contract to call after adding to the lock\r\n    @return Amount of YFI added to lock\r\n    \"\"\"\r\n    assert msg.value > 0\r\n\r\n    allowance: uint256 = 0\r\n    month: uint256 = 0\r\n    allowance, month = self._unpack_allowance(self.contributor_allowances[msg.sender])\r\n    assert allowance > 0\r\n    assert month == self.month and self.expiration > block.timestamp, \"allowance expired\"\r\n    \r\n    allowance -= msg.value\r\n    self.contributor_allowances[msg.sender] = self._pack_allowance(allowance, month)\r\n\r\n    # reverts if user has no lock or duration is too short\r\n    locked: uint256 = 0\r\n    discount: uint256 = 0\r\n    locked, discount = self._preview(_lock, msg.value, _lock != msg.sender)\r\n    assert locked >= _min_locked, \"price change\"\r\n\r\n    veyfi.modify_lock(locked, 0, _lock)\r\n    if _callback != empty(address):\r\n        DiscountCallback(_callback).delegated(_lock, msg.sender, msg.value, locked)\r\n\r\n    raw_call(management, b\"\", value=msg.value)\r\n    log Buy(msg.sender, msg.value, locked, discount, _lock)\r\n    return locked\r\n\r\n@external\r\ndef withdraw(_token: address, _amount: uint256):\r\n    \"\"\"\r\n    @notice Withdraw a token from the contract\r\n    @param _token Token to withdraw\r\n    @param _amount Amount to withdraw\r\n    \"\"\"\r\n    assert msg.sender == management\r\n    assert ERC20(_token).transfer(msg.sender, _amount, default_return_value=True)\r\n\r\n@internal\r\n@pure\r\ndef _pack_allowance(_allowance: uint256, _month: uint256) -> uint256:\r\n    assert _allowance <= ALLOWANCE_MASK and _month <= MONTH_MASK\r\n    return _allowance | shift(_month, -MONTH_SHIFT)\r\n\r\n@internal\r\n@pure\r\ndef _unpack_allowance(_packed: uint256) -> (uint256, uint256):\r\n    return _packed & ALLOWANCE_MASK, shift(_packed, MONTH_SHIFT)","ABI":"[{\"name\":\"NewMonth\",\"inputs\":[{\"name\":\"month\",\"type\":\"uint256\",\"indexed\":true},{\"name\":\"expiration\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"TeamAllowance\",\"inputs\":[{\"name\":\"team\",\"type\":\"address\",\"indexed\":true},{\"name\":\"allowance\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"month\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"expiration\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ContributorAllowance\",\"inputs\":[{\"name\":\"team\",\"type\":\"address\",\"indexed\":true},{\"name\":\"contributor\",\"type\":\"address\",\"indexed\":true},{\"name\":\"allowance\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"month\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"expiration\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Buy\",\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\",\"indexed\":true},{\"name\":\"amount_in\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"amount_out\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"discount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"lock\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_yfi\",\"type\":\"address\"},{\"name\":\"_veyfi\",\"type\":\"address\"},{\"name\":\"_chainlink_oracle\",\"type\":\"address\"},{\"name\":\"_management\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"team_allowance\",\"inputs\":[{\"name\":\"_team\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"contributor_allowance\",\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_team_allowances\",\"inputs\":[{\"name\":\"_teams\",\"type\":\"address[]\"},{\"name\":\"_allowances\",\"type\":\"uint256[]\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_team_allowances\",\"inputs\":[{\"name\":\"_teams\",\"type\":\"address[]\"},{\"name\":\"_allowances\",\"type\":\"uint256[]\"},{\"name\":\"_new_month\",\"type\":\"bool\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_contributor_allowances\",\"inputs\":[{\"name\":\"_contributors\",\"type\":\"address[]\"},{\"name\":\"_allowances\",\"type\":\"uint256[]\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"spot_price\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"discount\",\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"preview\",\"inputs\":[{\"name\":\"_lock\",\"type\":\"address\"},{\"name\":\"_amount_in\",\"type\":\"uint256\"},{\"name\":\"_delegate\",\"type\":\"bool\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"buy\",\"inputs\":[{\"name\":\"_min_locked\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"buy\",\"inputs\":[{\"name\":\"_min_locked\",\"type\":\"uint256\"},{\"name\":\"_lock\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"buy\",\"inputs\":[{\"name\":\"_min_locked\",\"type\":\"uint256\"},{\"name\":\"_lock\",\"type\":\"address\"},{\"name\":\"_callback\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw\",\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"yfi\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"veyfi\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"chainlink_oracle\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"management\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"month\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"expiration\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]}]","ContractName":"yDiscount","CompilerVersion":"vyper:0.3.7","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"0000000000000000000000000bc529c00c6401aef6d220be8c6ea1667f6ad93e00000000000000000000000090c1f9220d90d3966fbee24045edd73e1d588ad50000000000000000000000003ebeaca272ce4f60e800f6c5ee678f50d2882fd4000000000000000000000000feb4acf3df3cdea7399794d0869ef76a6efaff52","EVMVersion":"Default","Library":"","LicenseType":"GNU AGPLv3","Proxy":"0","Implementation":"","SwarmSource":""}]}