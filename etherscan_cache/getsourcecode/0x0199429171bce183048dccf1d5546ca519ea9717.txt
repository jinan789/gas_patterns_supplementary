{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.3.1\r\n\"\"\"\r\n@title Curve Optimism Bridge Wrapper\r\n\"\"\"\r\nfrom vyper.interfaces import ERC20\r\n\r\n\r\nevent UpdateTokenMapping:\r\n    _l1_token: indexed(address)\r\n    _old_l2_token: address\r\n    _new_l2_token: address\r\n\r\nevent TransferOwnership:\r\n    _old_owner: address\r\n    _new_owner: address\r\n\r\n\r\nCRV20: constant(address) = 0xD533a949740bb3306d119CC777fa900bA034cd52\r\nL2_CRV20: constant(address) = 0x331B9182088e2A7d6D3Fe4742AbA1fB231aEcc56\r\nOPTIMISM_L1_BRIDGE: constant(address) = 0x34C0bD5877A5Ee7099D0f5688D65F4bB9158BDE2\r\n\r\n\r\n# l1_token -> l2_token\r\nl2_token: public(HashMap[address, address])\r\n\r\nowner: public(address)\r\nfuture_owner: public(address)\r\n\r\n\r\n@external\r\ndef __init__():\r\n    assert ERC20(CRV20).approve(OPTIMISM_L1_BRIDGE, MAX_UINT256)\r\n    self.l2_token[CRV20] = L2_CRV20\r\n\r\n    self.owner = msg.sender\r\n    log TransferOwnership(ZERO_ADDRESS, msg.sender)\r\n\r\n\r\n@external\r\ndef bridge(_token: address, _to: address, _amount: uint256):\r\n    \"\"\"\r\n    @notice Bridge a token to Optimism mainnet using the L1 Standard Bridge\r\n    @param _token The token to bridge\r\n    @param _to The address to deposit the token to on L2\r\n    @param _amount The amount of the token to deposit\r\n    \"\"\"\r\n    assert ERC20(_token).transferFrom(msg.sender, self, _amount)\r\n\r\n    l2_token: address = L2_CRV20\r\n    if _token != CRV20:\r\n        l2_token = self.l2_token[_token]\r\n        assert l2_token != ZERO_ADDRESS  # dev: token not mapped\r\n\r\n    raw_call(\r\n        OPTIMISM_L1_BRIDGE,\r\n        _abi_encode(\r\n            _token,\r\n            l2_token,\r\n            _to,\r\n            _amount,\r\n            convert(200_000, uint256),\r\n            b\"\",\r\n            method_id=method_id(\"depositERC20To(address,address,address,uint256,uint32,bytes)\")\r\n        )\r\n    )\r\n\r\n\r\n@view\r\n@external\r\ndef check(_account: address) -> bool:\r\n    \"\"\"\r\n    @notice Dummy method to check if caller is allowed to bridge\r\n    @param _account The account to check\r\n    \"\"\"\r\n    return True\r\n\r\n\r\n@view\r\n@external\r\ndef cost() -> uint256:\r\n    \"\"\"\r\n    @notice Cost in ETH to bridge\r\n    \"\"\"\r\n    return 0\r\n\r\n\r\n@external\r\ndef set_l2_token(_l1_token: address, _l2_token: address):\r\n    \"\"\"\r\n    @notice Set the mapping of L1 token -> L2 token for depositing\r\n    @param _l1_token The l1 token address\r\n    @param _l2_token The l2 token address\r\n    \"\"\"\r\n    assert msg.sender == self.owner\r\n    assert _l1_token != CRV20  # dev: cannot reset mapping for CRV20\r\n\r\n    amount: uint256 = 0\r\n    if _l2_token != ZERO_ADDRESS:\r\n        amount = MAX_UINT256\r\n    assert ERC20(_l1_token).approve(OPTIMISM_L1_BRIDGE, amount)\r\n\r\n    log UpdateTokenMapping(_l1_token, self.l2_token[_l1_token], _l2_token)\r\n    self.l2_token[_l1_token] = _l2_token\r\n\r\n\r\n@external\r\ndef commit_transfer_ownership(_future_owner: address):\r\n    \"\"\"\r\n    @notice Transfer ownership to `_future_owner`\r\n    @param _future_owner The account to commit as the future owner\r\n    \"\"\"\r\n    assert msg.sender == self.owner  # dev: only owner\r\n\r\n    self.future_owner = _future_owner\r\n\r\n\r\n@external\r\ndef accept_transfer_ownership():\r\n    \"\"\"\r\n    @notice Accept the transfer of ownership\r\n    @dev Only the committed future owner can call this function\r\n    \"\"\"\r\n    assert msg.sender == self.future_owner  # dev: only future owner\r\n\r\n    log TransferOwnership(self.owner, msg.sender)\r\n    self.owner = msg.sender","ABI":"[{\"name\":\"UpdateTokenMapping\",\"inputs\":[{\"name\":\"_l1_token\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_old_l2_token\",\"type\":\"address\",\"indexed\":false},{\"name\":\"_new_l2_token\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"TransferOwnership\",\"inputs\":[{\"name\":\"_old_owner\",\"type\":\"address\",\"indexed\":false},{\"name\":\"_new_owner\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"bridge\",\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[],\"gas\":13778},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"check\",\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":541},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"cost\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":420},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_l2_token\",\"inputs\":[{\"name\":\"_l1_token\",\"type\":\"address\"},{\"name\":\"_l2_token\",\"type\":\"address\"}],\"outputs\":[],\"gas\":45723},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"commit_transfer_ownership\",\"inputs\":[{\"name\":\"_future_owner\",\"type\":\"address\"}],\"outputs\":[],\"gas\":37725},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"accept_transfer_ownership\",\"inputs\":[],\"outputs\":[],\"gas\":41804},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"l2_token\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2906},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2670},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"future_owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2700}]","ContractName":"Curve Optimism Bridge Wrapper","CompilerVersion":"vyper:0.3.1","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}