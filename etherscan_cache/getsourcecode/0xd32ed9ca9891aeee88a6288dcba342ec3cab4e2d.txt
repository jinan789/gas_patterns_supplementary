{"status":"1","message":"OK","result":[{"SourceCode":"#pragma version 0.3.10\r\n#pragma optimize gas\r\n#pragma evm-version shanghai\r\n\"\"\"\r\n@title      ETH price prediction competition for Juice Bot (Ethereum part)\r\n@license    Apache 2.0\r\n@author     Volume.finance\r\n\"\"\"\r\nstruct EpochInfo:\r\n    competition_start: uint256\r\n    competition_end: uint256\r\n    entry_cnt: uint256\r\n\r\nstruct WinnerInfo:\r\n    winner: address\r\n    claimable_amount: uint256\r\n\r\nstruct SwapInfo:\r\n    route: address[11]\r\n    swap_params: uint256[5][5]\r\n    amount: uint256\r\n    expected: uint256\r\n    pools: address[5]\r\n\r\nMAX_ENTRY: constant(uint256) = 1000\r\nMAX_SIZE: constant(uint256) = 8\r\nDAY_IN_SEC: constant(uint256) = 86400\r\nMAX_FUND: constant(uint256) = 5000\r\n\r\nFACTORY: public(immutable(address))\r\n\r\ncompass: public(address)\r\npaloma: public(bytes32)\r\nreward_token: public(address)\r\ndecimals: public(uint256)\r\nwinner_info: public(HashMap[uint256, HashMap[uint256, WinnerInfo]])\r\nepoch_info: public(HashMap[uint256, EpochInfo])\r\nepoch_cnt: public(uint256)\r\nactive_epoch_num: public(uint256)\r\nclaimable_amount: public(HashMap[address, uint256])\r\n\r\ninterface ERC20:\r\n    def approve(_spender: address, _value: uint256) -> bool: nonpayable\r\n    def transfer(_to: address, _value: uint256) -> bool: nonpayable\r\n    def transferFrom(_from: address, _to: address, _value: uint256) -> bool: nonpayable\r\n\r\ninterface CreateBotFactory:\r\n    def create_bot(\r\n        swap_infos: DynArray[SwapInfo, MAX_SIZE], \r\n        collateral: address, \r\n        settlement: address, \r\n        debt: uint256, \r\n        N: uint256, \r\n        callbacker: address, \r\n        callback_args: DynArray[uint256, 5], \r\n        leverage: uint256, \r\n        deleverage_percentage: uint256, \r\n        health_threshold: uint256, \r\n        profit_taking: uint256, \r\n        expire: uint256, \r\n        number_trades: uint256, \r\n        interval: uint256,\r\n        delegate: address = msg.sender\r\n    ): payable\r\n\r\nevent RewardSent:\r\n    epoch_id: uint256\r\n    sender: address\r\n    reward_token: address\r\n    amount: uint256\r\n    competition_start: uint256\r\n    competition_end: uint256\r\n\r\nevent UpdateCompass:\r\n    old_compass: address\r\n    new_compass: address\r\n\r\nevent UpdateRewardToken:\r\n    new_reward: address\r\n    new_decimals: uint256\r\n\r\nevent SetPaloma:\r\n    paloma: bytes32\r\n\r\nevent SetWinner:\r\n    epoch_id: uint256\r\n    winner: address\r\n    claimable_amount: uint256\r\n\r\nevent Claimed:\r\n    sender: address\r\n    claimed_amount: uint256\r\n\r\n@external\r\ndef __init__(_compass: address, _reward_token: address, _decimals: uint256, _factory: address):\r\n    self.compass = _compass\r\n    self.reward_token = _reward_token\r\n    self.decimals = _decimals\r\n    FACTORY = _factory\r\n    log UpdateCompass(empty(address), _compass)\r\n\r\n@internal\r\ndef _paloma_check():\r\n    assert msg.sender == self.compass, \"Not compass\"\r\n    assert self.paloma == convert(slice(msg.data, unsafe_sub(len(msg.data), 32), 32), bytes32), \"Invalid paloma\"\r\n\r\n@external\r\ndef update_compass(_new_compass: address):\r\n    self._paloma_check()\r\n    self.compass = _new_compass\r\n    log UpdateCompass(msg.sender, _new_compass)\r\n\r\n@external\r\ndef set_paloma():\r\n    assert msg.sender == self.compass and self.paloma == empty(bytes32) and len(msg.data) == 36, \"Invalid\"\r\n    _paloma: bytes32 = convert(slice(msg.data, 4, 32), bytes32)\r\n    self.paloma = _paloma\r\n    log SetPaloma(_paloma)\r\n\r\n@external\r\ndef set_reward_token(_new_reward_token: address, _new_decimals: uint256):\r\n    self._paloma_check()\r\n    self.reward_token = _new_reward_token\r\n    self.decimals = _new_decimals\r\n    log UpdateRewardToken(_new_reward_token, _new_decimals)\r\n\r\n@external\r\ndef send_reward(_amount: uint256):\r\n    self._paloma_check()\r\n    _decimals: uint256 = self.decimals\r\n    _epoch_add_cnt: uint256 = unsafe_div(_amount, unsafe_mul(1000, 10**_decimals))\r\n    assert _amount % (unsafe_mul(1000, 10**_decimals)) == 0, \"Invalid Fund Amount\"\r\n    assert _amount <= unsafe_mul(MAX_FUND, 10**_decimals), \"Maximum Limit 5000\"\r\n    \r\n    # Transfer reward token to the contract\r\n    _reward_token: address = self.reward_token\r\n    assert ERC20(_reward_token).transferFrom(msg.sender, self, _amount, default_return_value=True), \"Send Reward Failed\"\r\n    \r\n    _epoch_cnt: uint256 = self.epoch_cnt\r\n    _competition_start: uint256 = 0\r\n    _competition_end: uint256 = 0\r\n\r\n    for _i in range(5):\r\n        if _i < _epoch_add_cnt:\r\n            if _epoch_cnt > 0:\r\n                _last_epoch_info: EpochInfo = self.epoch_info[_epoch_cnt]\r\n                _last_competition_start: uint256 = _last_epoch_info.competition_start\r\n                _last_competition_end: uint256 = _last_epoch_info.competition_end\r\n        \r\n                _epoch_cnt = unsafe_add(_epoch_cnt, 1)\r\n                if block.timestamp >= _last_competition_start:\r\n                    _competition_start = unsafe_add(unsafe_mul(unsafe_div(block.timestamp, DAY_IN_SEC), DAY_IN_SEC), DAY_IN_SEC)\r\n                    _competition_end = unsafe_add(_competition_start, DAY_IN_SEC)\r\n                elif block.timestamp < _last_competition_start:\r\n                    _competition_start = unsafe_add(_last_competition_start, DAY_IN_SEC)\r\n                    _competition_end = unsafe_add(_last_competition_end, DAY_IN_SEC)\r\n            else:\r\n                _epoch_cnt = unsafe_add(_epoch_cnt, 1)\r\n                self.active_epoch_num = unsafe_add(self.active_epoch_num, 1)\r\n\r\n                _competition_start = unsafe_add(unsafe_mul(unsafe_div(block.timestamp, DAY_IN_SEC), DAY_IN_SEC), DAY_IN_SEC)\r\n                _competition_end = unsafe_add(_competition_start, DAY_IN_SEC)\r\n\r\n            # Write\r\n            self.epoch_info[_epoch_cnt] = EpochInfo({\r\n                competition_start: _competition_start,\r\n                competition_end: _competition_end,\r\n                entry_cnt: 0\r\n            })\r\n\r\n            # Event Log\r\n            log RewardSent(_epoch_cnt, msg.sender, _reward_token, _amount, _competition_start, _competition_end)\r\n \r\n    self.epoch_cnt = _epoch_cnt\r\n\r\n@external\r\ndef set_winner_list(_winner_infos: DynArray[WinnerInfo, MAX_ENTRY]):\r\n    self._paloma_check()\r\n\r\n    _active_epoch_num: uint256 = self.active_epoch_num\r\n    assert _active_epoch_num <= self.epoch_cnt, \"No Reward yet\"\r\n\r\n    _i: uint256 = 0\r\n    for _winner_info in _winner_infos:  \r\n        self.winner_info[_active_epoch_num][_i] = _winner_infos[_i]\r\n        self.claimable_amount[_winner_info.winner] = unsafe_add(self.claimable_amount[_winner_info.winner], _winner_info.claimable_amount)\r\n        _i = unsafe_add(_i, 1)\r\n        log SetWinner(_active_epoch_num, _winner_info.winner, _winner_info.claimable_amount)\r\n\r\n    # increse activeEpochNum for activating the next Epoch\r\n    self.active_epoch_num = unsafe_add(_active_epoch_num, 1)\r\n\r\n@external\r\n@payable\r\ndef create_bot(swap_infos: DynArray[SwapInfo, MAX_SIZE], \r\n        collateral: address, \r\n        settlement: address, \r\n        debt: uint256, \r\n        N: uint256, \r\n        callbacker: address, \r\n        callback_args: DynArray[uint256, 5], \r\n        leverage: uint256, \r\n        deleverage_percentage: uint256, \r\n        health_threshold: uint256, \r\n        profit_taking: uint256, \r\n        expire: uint256, \r\n        number_trades: uint256, \r\n        interval: uint256):\r\n\r\n    _claimable_amount: uint256 = self.claimable_amount[msg.sender]\r\n    assert _claimable_amount > 0, \"No Claimable Amount\"\r\n\r\n    ERC20(self.reward_token).approve(self, _claimable_amount)\r\n    CreateBotFactory(FACTORY).create_bot(\r\n        swap_infos, \r\n        collateral, \r\n        settlement, \r\n        debt, \r\n        N, \r\n        callbacker, \r\n        callback_args, \r\n        leverage, \r\n        deleverage_percentage, \r\n        health_threshold,\r\n        profit_taking,\r\n        expire,\r\n        number_trades,\r\n        interval, \r\n        msg.sender, \r\n        value=msg.value)\r\n\r\n    log Claimed(msg.sender, _claimable_amount)\r\n\r\n    # init claimable amount \r\n    self.claimable_amount[msg.sender] = 0\r\n\r\n@external\r\n@payable\r\ndef __default__():\r\n    pass","ABI":"[{\"name\":\"RewardSent\",\"inputs\":[{\"name\":\"epoch_id\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"sender\",\"type\":\"address\",\"indexed\":false},{\"name\":\"reward_token\",\"type\":\"address\",\"indexed\":false},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"competition_start\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"competition_end\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateCompass\",\"inputs\":[{\"name\":\"old_compass\",\"type\":\"address\",\"indexed\":false},{\"name\":\"new_compass\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateRewardToken\",\"inputs\":[{\"name\":\"new_reward\",\"type\":\"address\",\"indexed\":false},{\"name\":\"new_decimals\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetPaloma\",\"inputs\":[{\"name\":\"paloma\",\"type\":\"bytes32\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetWinner\",\"inputs\":[{\"name\":\"epoch_id\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"winner\",\"type\":\"address\",\"indexed\":false},{\"name\":\"claimable_amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Claimed\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"indexed\":false},{\"name\":\"claimed_amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_compass\",\"type\":\"address\"},{\"name\":\"_reward_token\",\"type\":\"address\"},{\"name\":\"_decimals\",\"type\":\"uint256\"},{\"name\":\"_factory\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"update_compass\",\"inputs\":[{\"name\":\"_new_compass\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_paloma\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_reward_token\",\"inputs\":[{\"name\":\"_new_reward_token\",\"type\":\"address\"},{\"name\":\"_new_decimals\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"send_reward\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_winner_list\",\"inputs\":[{\"name\":\"_winner_infos\",\"type\":\"tuple[]\",\"components\":[{\"name\":\"winner\",\"type\":\"address\"},{\"name\":\"claimable_amount\",\"type\":\"uint256\"}]}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"create_bot\",\"inputs\":[{\"name\":\"swap_infos\",\"type\":\"tuple[]\",\"components\":[{\"name\":\"route\",\"type\":\"address[11]\"},{\"name\":\"swap_params\",\"type\":\"uint256[5][5]\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"expected\",\"type\":\"uint256\"},{\"name\":\"pools\",\"type\":\"address[5]\"}]},{\"name\":\"collateral\",\"type\":\"address\"},{\"name\":\"settlement\",\"type\":\"address\"},{\"name\":\"debt\",\"type\":\"uint256\"},{\"name\":\"N\",\"type\":\"uint256\"},{\"name\":\"callbacker\",\"type\":\"address\"},{\"name\":\"callback_args\",\"type\":\"uint256[]\"},{\"name\":\"leverage\",\"type\":\"uint256\"},{\"name\":\"deleverage_percentage\",\"type\":\"uint256\"},{\"name\":\"health_threshold\",\"type\":\"uint256\"},{\"name\":\"profit_taking\",\"type\":\"uint256\"},{\"name\":\"expire\",\"type\":\"uint256\"},{\"name\":\"number_trades\",\"type\":\"uint256\"},{\"name\":\"interval\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"FACTORY\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"compass\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"paloma\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"reward_token\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"decimals\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"winner_info\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"},{\"name\":\"arg1\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"name\":\"winner\",\"type\":\"address\"},{\"name\":\"claimable_amount\",\"type\":\"uint256\"}]}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"epoch_info\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"name\":\"competition_start\",\"type\":\"uint256\"},{\"name\":\"competition_end\",\"type\":\"uint256\"},{\"name\":\"entry_cnt\",\"type\":\"uint256\"}]}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"epoch_cnt\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"active_epoch_num\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"claimable_amount\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]}]","ContractName":"     ETH price prediction competition for Juice Bot (Ethereum part)","CompilerVersion":"vyper:0.3.10","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000b01cc20fe02723d43822819ec57fcbadf31f1537000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000000000060000000000000000000000005ae3ea1d72cab91adfbc7e95e879b729d3ebdd03","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":""}]}