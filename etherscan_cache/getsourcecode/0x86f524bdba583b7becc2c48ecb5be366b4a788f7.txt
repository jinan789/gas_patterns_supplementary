{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.3.10\r\n\"\"\"\r\n@title Incentives for weight vote\r\n@author 0xkorin, Yearn Finance\r\n@license GNU AGPLv3\r\n@notice\r\n    Permissionlessly submit incentives for assets weight redistribution in the pool.\r\n    Incentives are paid out to voters for the specific asset.\r\n    Incentives that remain unclaimed for a preconfigured number of epochs\r\n    are considered expired and can be swept away.\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\ninterface Pool:\r\n    def num_assets() -> uint256: view\r\n\r\ninterface Voting:\r\n    def genesis() -> uint256: view\r\n    def votes(_epoch: uint256, _idx: uint256) -> uint256: view\r\n    def votes_user(_account: address, _epoch: uint256, _idx: uint256) -> uint256: view\r\n\r\ngenesis: public(immutable(uint256))\r\npool: public(immutable(Pool))\r\nvoting: public(immutable(Voting))\r\nmanagement: public(address)\r\npending_management: public(address)\r\ntreasury: public(address)\r\nfee_rate: public(uint256)\r\nincentives: public(HashMap[uint256, HashMap[uint256, HashMap[address, uint256]]]) # epoch => idx => incentive token => incentive amount\r\nunclaimed: public(HashMap[uint256, HashMap[address, uint256]]) # epoch => incentive token => incentive amount\r\nuser_claimed: public(HashMap[address, HashMap[uint256, HashMap[uint256, HashMap[address, bool]]]]) # account => epoch => idx => incentive token => claimed?\r\ndeposit_deadline: public(uint256)\r\nclaim_deadline: public(uint256)\r\n\r\nevent Deposit:\r\n    epoch: indexed(uint256)\r\n    idx: indexed(uint256)\r\n    token: indexed(address)\r\n    amount: uint256\r\n    depositor: address\r\n\r\nevent Claim:\r\n    epoch: indexed(uint256)\r\n    idx: indexed(uint256)\r\n    token: indexed(address)\r\n    amount: uint256\r\n    account: address\r\n\r\nevent Sweep:\r\n    epoch: indexed(uint256)\r\n    token: indexed(address)\r\n    amount: uint256\r\n    recipient: address\r\n\r\nevent PendingManagement:\r\n    management: indexed(address)\r\n\r\nevent SetManagement:\r\n    management: indexed(address)\r\n\r\nWEEK: constant(uint256) = 7 * 24 * 60 * 60\r\nEPOCH_LENGTH: constant(uint256) = 4 * WEEK\r\nVOTE_LENGTH: constant(uint256) = WEEK\r\nVOTE_START: constant(uint256) = EPOCH_LENGTH - VOTE_LENGTH\r\nFEE_SCALE: constant(uint256) = 10_000\r\n\r\n@external\r\ndef __init__(_pool: address, _voting: address):\r\n    \"\"\"\r\n    @notice Constructor\r\n    @param _pool Pool address\r\n    @param _voting Weight voting address\r\n    \"\"\"\r\n    voting = Voting(_voting)\r\n    genesis = voting.genesis()\r\n    pool = Pool(_pool)\r\n    self.management = msg.sender\r\n    self.treasury = msg.sender\r\n    self.deposit_deadline = EPOCH_LENGTH\r\n    self.claim_deadline = 1\r\n\r\n@external\r\n@view\r\ndef epoch() -> uint256:\r\n    \"\"\"\r\n    @notice Get the current epoch\r\n    @return Current epoch\r\n    \"\"\"\r\n    return self._epoch()\r\n\r\n@internal\r\n@view\r\ndef _epoch() -> uint256:\r\n    \"\"\"\r\n    @notice Get the current epoch\r\n    \"\"\"\r\n    return (block.timestamp - genesis) / EPOCH_LENGTH\r\n\r\n@external\r\ndef deposit(_idx: uint256, _token: address, _amount: uint256):\r\n    \"\"\"\r\n    @notice \r\n        Deposit an incentive. Only allowed in the beginning of an epoch.\r\n        Management can set a deadline after which no new incentives can be deposited.\r\n    @param _idx\r\n        The asset index to place the incentive on.\r\n        The zero index represents the 'blank' option, meaning to not redistribute.\r\n        If 100% of the votes are blank, the weights will remain unchanged.\r\n    @param _token The incentive token to deposit\r\n    @param _amount The amount of incentive token to deposit\r\n    \"\"\"\r\n    assert (block.timestamp - genesis) % EPOCH_LENGTH <= self.deposit_deadline\r\n    assert pool.num_assets() >= _idx\r\n    epoch: uint256 = self._epoch()\r\n    fee: uint256 = _amount * self.fee_rate / FEE_SCALE\r\n    self.incentives[epoch][_idx][_token] += _amount - fee\r\n    self.unclaimed[epoch][_token] += _amount\r\n\r\n    assert ERC20(_token).transferFrom(msg.sender, self, _amount, default_return_value=True)\r\n    log Deposit(epoch, _idx, _token, _amount, msg.sender)\r\n\r\n@external\r\n@view\r\ndef claimable(_epoch: uint256, _idx: uint256, _token: address, _account: address) -> uint256:\r\n    \"\"\"\r\n    @notice Query the amount of incentive that can be claimed by a specific account\r\n    @param _epoch Epoch to query for\r\n    @param _idx Index to query for\r\n    @param _token Incentive token to query for\r\n    @param _account Claimer to query for\r\n    \"\"\"\r\n    if self._epoch() <= _epoch or self.user_claimed[_account][_epoch][_idx][_token]:\r\n        return 0\r\n    \r\n    total_votes: uint256 = voting.votes(_epoch, _idx)\r\n    if total_votes == 0:\r\n        return 0\r\n    votes: uint256 = voting.votes_user(_account, _epoch, _idx)\r\n    return self.incentives[_epoch][_idx][_token] * votes / total_votes\r\n\r\n@external\r\ndef claim_many(_epochs: DynArray[uint256, 16], _idx: DynArray[uint256, 16], _tokens: DynArray[address, 16], _account: address = msg.sender):\r\n    \"\"\"\r\n    @notice Claim one or multiple incentives at once\r\n    @param _epochs List of epochs to claim for\r\n    @param _idx List of indices to claim for, corresponding to the list of epochs\r\n    @param _tokens List of tokens to claim for, corresponding to the list of epochs\r\n    @param _account Account to claim for\r\n    \"\"\"\r\n    assert len(_epochs) == len(_idx)\r\n    assert len(_epochs) == len(_tokens)\r\n    for i in range(16):\r\n        if i == len(_epochs):\r\n            break\r\n        self._claim(_epochs[i], _idx[i], _tokens[i], _account)\r\n\r\n@external\r\ndef claim(_epoch: uint256, _idx: uint256, _token: address, _account: address = msg.sender):\r\n    \"\"\"\r\n    @notice\r\n        Claim an incentive. Incentives are split amongst all voters for the particular asset\r\n        according to their dedicated vote weight.\r\n    @param _epoch Epoch to claim for\r\n    @param _idx Asset index to claim for\r\n    @param _token Tokens to claim for\r\n    @param _account Account to claim for\r\n    \"\"\"\r\n    self._claim(_epoch, _idx, _token, _account)\r\n\r\n@internal\r\ndef _claim(_epoch: uint256, _idx: uint256, _token: address, _account: address):\r\n    \"\"\"\r\n    @notice Claim an incentive\r\n    \"\"\"\r\n    assert self._epoch() > _epoch\r\n    total_votes: uint256 = voting.votes(_epoch, _idx)\r\n    if total_votes == 0:\r\n        return\r\n    votes: uint256 = voting.votes_user(_account, _epoch, _idx)\r\n    amount: uint256 = self.incentives[_epoch][_idx][_token] * votes / total_votes\r\n    if self.user_claimed[_account][_epoch][_idx][_token] or amount == 0:\r\n        return\r\n    self.user_claimed[_account][_epoch][_idx][_token] = True\r\n    self.unclaimed[_epoch][_token] -= amount\r\n\r\n    assert ERC20(_token).transfer(_account, amount, default_return_value=True)\r\n    log Claim(_epoch, _idx, _token, amount, _account)\r\n\r\n@external\r\n@view\r\ndef sweepable(_epoch: uint256, _token: address) -> uint256:\r\n    \"\"\"\r\n    @notice Query how much of an incentive can be swept\r\n    @param _epoch Epoch to query for\r\n    @param _token Incentive token to query for\r\n    @return Amount of tokens that can be swept\r\n    \"\"\"\r\n    if self._epoch() <= _epoch + self.claim_deadline:\r\n        return 0\r\n    return self.unclaimed[_epoch][_token]\r\n\r\n@external\r\ndef sweep(_epoch: uint256, _token: address, _recipient: address = msg.sender):\r\n    \"\"\"\r\n    @notice\r\n        Sweep unclaimed incentives. Incenties that remain unclaimed for a set\r\n        number of epochs expire and can be swept by treasury.\r\n    @param _epoch Epoch to sweep for\r\n    @param _token Incentive token to sweep\r\n    @param _recipient Recipient of the swept incentives\r\n    \"\"\"\r\n    assert msg.sender == self.treasury\r\n    assert self._epoch() > _epoch + self.claim_deadline\r\n\r\n    amount: uint256 = self.unclaimed[_epoch][_token]\r\n    assert amount > 0\r\n    self.unclaimed[_epoch][_token] = 0\r\n\r\n    assert ERC20(_token).transfer(_recipient, amount, default_return_value=True)\r\n    log Sweep(_epoch, _token, amount, _recipient)\r\n\r\n@external\r\ndef set_treasury(_treasury: address):\r\n    \"\"\"\r\n    @notice Set the new treasury address. Treasury can sweep expired unclaimed incentives\r\n    @param _treasury New treasury address\r\n    \"\"\"\r\n    assert msg.sender == self.treasury\r\n    assert _treasury != empty(address)\r\n    self.treasury = _treasury\r\n\r\n@external\r\ndef set_deposit_deadline(_deadline: uint256):\r\n    \"\"\"\r\n    @notice \r\n        Set the deposit deadline in seconds, after which in every epoch\r\n        incentives are no longer allowed to be posted.\r\n    @param _deadline New deposit deadline in seconds from the start of the epoch\r\n    \"\"\"\r\n    assert msg.sender == self.management\r\n    assert _deadline <= EPOCH_LENGTH\r\n    self.deposit_deadline = _deadline\r\n\r\n@external\r\ndef set_claim_deadline(_deadline: uint256):\r\n    \"\"\"\r\n    @notice \r\n        Set the claim deadline in epochs, after which unclaimed incentives \r\n        are considered expired and can be swept by treasury.\r\n    @param _deadline New claim deadline in epochs\r\n    \"\"\"\r\n    assert msg.sender == self.management\r\n    assert _deadline >= 1\r\n    self.claim_deadline = _deadline\r\n\r\n@external\r\ndef set_fee_rate(_fee_rate: uint256):\r\n    \"\"\"\r\n    @notice Set the incentive fee rate\r\n    @param _fee_rate New fee rate (bps)\r\n    \"\"\"\r\n    assert msg.sender == self.management\r\n    assert _fee_rate <= FEE_SCALE / 10\r\n    self.fee_rate = _fee_rate\r\n\r\n@external\r\ndef set_management(_management: address):\r\n    \"\"\"\r\n    @notice \r\n        Set the pending management address.\r\n        Needs to be accepted by that account separately to transfer management over\r\n    @param _management New pending management address\r\n    \"\"\"\r\n    assert msg.sender == self.management\r\n    self.pending_management = _management\r\n    log PendingManagement(_management)\r\n\r\n@external\r\ndef accept_management():\r\n    \"\"\"\r\n    @notice \r\n        Accept management role.\r\n        Can only be called by account previously marked as pending management by current management\r\n    \"\"\"\r\n    assert msg.sender == self.pending_management\r\n    self.pending_management = empty(address)\r\n    self.management = msg.sender\r\n    log SetManagement(msg.sender)","ABI":"[{\"name\":\"Deposit\",\"inputs\":[{\"name\":\"epoch\",\"type\":\"uint256\",\"indexed\":true},{\"name\":\"idx\",\"type\":\"uint256\",\"indexed\":true},{\"name\":\"token\",\"type\":\"address\",\"indexed\":true},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"depositor\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Claim\",\"inputs\":[{\"name\":\"epoch\",\"type\":\"uint256\",\"indexed\":true},{\"name\":\"idx\",\"type\":\"uint256\",\"indexed\":true},{\"name\":\"token\",\"type\":\"address\",\"indexed\":true},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"account\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Sweep\",\"inputs\":[{\"name\":\"epoch\",\"type\":\"uint256\",\"indexed\":true},{\"name\":\"token\",\"type\":\"address\",\"indexed\":true},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"recipient\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"PendingManagement\",\"inputs\":[{\"name\":\"management\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetManagement\",\"inputs\":[{\"name\":\"management\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_pool\",\"type\":\"address\"},{\"name\":\"_voting\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"epoch\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deposit\",\"inputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"claimable\",\"inputs\":[{\"name\":\"_epoch\",\"type\":\"uint256\"},{\"name\":\"_idx\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_account\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claim_many\",\"inputs\":[{\"name\":\"_epochs\",\"type\":\"uint256[]\"},{\"name\":\"_idx\",\"type\":\"uint256[]\"},{\"name\":\"_tokens\",\"type\":\"address[]\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claim_many\",\"inputs\":[{\"name\":\"_epochs\",\"type\":\"uint256[]\"},{\"name\":\"_idx\",\"type\":\"uint256[]\"},{\"name\":\"_tokens\",\"type\":\"address[]\"},{\"name\":\"_account\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claim\",\"inputs\":[{\"name\":\"_epoch\",\"type\":\"uint256\"},{\"name\":\"_idx\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claim\",\"inputs\":[{\"name\":\"_epoch\",\"type\":\"uint256\"},{\"name\":\"_idx\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_account\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"sweepable\",\"inputs\":[{\"name\":\"_epoch\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"sweep\",\"inputs\":[{\"name\":\"_epoch\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"sweep\",\"inputs\":[{\"name\":\"_epoch\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_recipient\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_treasury\",\"inputs\":[{\"name\":\"_treasury\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_deposit_deadline\",\"inputs\":[{\"name\":\"_deadline\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_claim_deadline\",\"inputs\":[{\"name\":\"_deadline\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_fee_rate\",\"inputs\":[{\"name\":\"_fee_rate\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_management\",\"inputs\":[{\"name\":\"_management\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"accept_management\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"genesis\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pool\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"voting\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"management\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pending_management\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"treasury\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"fee_rate\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"incentives\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"},{\"name\":\"arg1\",\"type\":\"uint256\"},{\"name\":\"arg2\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"unclaimed\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"},{\"name\":\"arg1\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"user_claimed\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"},{\"name\":\"arg1\",\"type\":\"uint256\"},{\"name\":\"arg2\",\"type\":\"uint256\"},{\"name\":\"arg3\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"deposit_deadline\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"claim_deadline\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]}]","ContractName":"Incentives for weight vote","CompilerVersion":"vyper:0.3.10","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"0000000000000000000000002cced4ffa804adbe1269cdfc22d7904471abde63000000000000000000000000d68696fdd9649bffb18e88e1b671b896825f2e50","EVMVersion":"Default","Library":"","LicenseType":"GNU AGPLv3","Proxy":"0","Implementation":"","SwarmSource":""}]}