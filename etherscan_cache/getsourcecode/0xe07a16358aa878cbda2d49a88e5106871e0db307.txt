{"status":"1","message":"OK","result":[{"SourceCode":"# pragma version 0.3.10\r\n\"\"\"\r\n@title MetaZapNG\r\n@author Curve.Fi\r\n@license Copyright (c) Curve.Fi, 2021 - all rights reserved\r\n@notice A generalised zap contract for Stableswap-ng metapools where the base pool\r\n        is a Stableswap-ng implementation as well.\r\n@dev Contract assumes Metapools have 2 coins.\r\n\"\"\"\r\n\r\ninterface ERC20:\r\n    def transfer(receiver: address, amount: uint256): nonpayable\r\n    def transferFrom(_sender: address, receiver: address, amount: uint256): nonpayable\r\n    def approve(spender: address, amount: uint256): nonpayable\r\n    def decimals() -> uint256: view\r\n    def balanceOf(owner: address) -> uint256: view\r\n\r\ninterface StableSwapMetaNG:\r\n    def add_liquidity(\r\n        amounts: uint256[META_N_COINS],\r\n        min_mint_amount: uint256,\r\n        receiver: address\r\n    ) -> uint256: nonpayable\r\n    def remove_liquidity(\r\n        amount: uint256,\r\n        min_amounts: uint256[META_N_COINS]\r\n    ) -> uint256[META_N_COINS]: nonpayable\r\n    def remove_liquidity_one_coin(\r\n        token_amount: uint256,\r\n        i: int128,\r\n        min_amount: uint256,\r\n        receiver: address\r\n    ) -> uint256: nonpayable\r\n    def remove_liquidity_imbalance(\r\n        amounts: uint256[META_N_COINS],\r\n        max_burn_amount: uint256\r\n    ) -> uint256: nonpayable\r\n    def calc_withdraw_one_coin(token_amount: uint256, i: int128) -> uint256: view\r\n    def calc_token_amount(amounts: uint256[META_N_COINS], deposit: bool) -> uint256: view\r\n    def coins(i: uint256) -> address: view\r\n    def BASE_POOL() -> address: view\r\n    def BASE_POOL_IS_NG() -> bool: view\r\n\r\ninterface StableSwapNG:\r\n    def N_COINS() -> uint256: view\r\n    def add_liquidity(\r\n        amounts: DynArray[uint256, MAX_COINS],\r\n        min_mint_amount: uint256\r\n    ) -> uint256: nonpayable\r\n    def remove_liquidity(\r\n        amount: uint256,\r\n        min_amounts: DynArray[uint256, MAX_COINS]\r\n    ) -> DynArray[uint256, MAX_COINS]: nonpayable\r\n    def remove_liquidity_one_coin(\r\n        token_amount: uint256,\r\n        i: int128,\r\n        min_amount: uint256\r\n    ) -> uint256: nonpayable\r\n    def remove_liquidity_imbalance(\r\n        amounts: DynArray[uint256, MAX_COINS],\r\n        max_burn_amount: uint256\r\n    ) -> uint256: nonpayable\r\n    def calc_withdraw_one_coin(token_amount: uint256, i: int128) -> uint256: view\r\n    def calc_token_amount(\r\n        amounts: DynArray[uint256, MAX_COINS],\r\n        deposit: bool\r\n    ) -> uint256: view\r\n    def coins(i: uint256) -> address: view\r\n    def fee() -> uint256: view\r\n\r\n\r\nstruct BasePool:\r\n    pool_address: address\r\n    coins: DynArray[address, MAX_COINS]\r\n\r\n\r\nMETA_N_COINS: constant(uint256) = 2\r\nMAX_COINS: constant(uint256) = 8\r\nMAX_ALL_COINS: constant(uint256) = MAX_COINS + 1\r\nFEE_DENOMINATOR: constant(uint256) = 10 ** 10\r\nFEE_IMPRECISION: constant(uint256) = 100 * 10 ** 8  # % of the fee\r\n\r\n# coin -> pool -> is approved to transfer?\r\nis_approved: HashMap[address, HashMap[address, bool]]\r\nbase_pool_coins_spending_approved: HashMap[address, bool]\r\nbase_pool_registry: HashMap[address, BasePool]\r\n\r\n\r\n@internal\r\n@view\r\ndef get_coins_from_pool(_pool: address) -> DynArray[address, MAX_COINS]:\r\n    n_coins: uint256 = StableSwapNG(_pool).N_COINS()\r\n    coins: DynArray[address, MAX_COINS] = empty(DynArray[address, MAX_COINS])\r\n    for i in range(n_coins, bound=MAX_COINS):\r\n        coins.append(StableSwapNG(_pool).coins(i))\r\n    return coins\r\n\r\n\r\n@internal\r\ndef _approve_pool_to_spend_zap_coins(\r\n    pool: address,\r\n    coins: DynArray[address, MAX_COINS],\r\n):\r\n    for i in range(len(coins), bound=MAX_COINS):\r\n        ERC20(coins[i]).approve(pool, max_value(uint256))\r\n\r\n    self.base_pool_coins_spending_approved[pool] = True\r\n\r\n\r\n@internal\r\n@view\r\ndef _fetch_base_pool_data(_pool: address) -> (address, DynArray[address, MAX_COINS]):\r\n\r\n    base_pool: address = StableSwapMetaNG(_pool).BASE_POOL()\r\n    assert base_pool != empty(address)  # dev: not a metapool\r\n    base_coins: DynArray[address, MAX_COINS] = self.get_coins_from_pool(base_pool)\r\n    return base_pool, base_coins\r\n\r\n\r\n@internal\r\ndef _base_pool_data(_pool: address) -> (address, DynArray[address, MAX_COINS]):\r\n\r\n    base_pool_data: BasePool = self.base_pool_registry[_pool]\r\n    if base_pool_data.pool_address == empty(address):\r\n\r\n        base_pool: address = empty(address)\r\n        base_coins: DynArray[address, MAX_COINS] = empty(DynArray[address, MAX_COINS])\r\n        base_pool, base_coins = self._fetch_base_pool_data(_pool)\r\n\r\n        self.base_pool_registry[_pool] = BasePool(\r\n            {pool_address: base_pool, coins: base_coins}\r\n        )\r\n        return base_pool, base_coins\r\n\r\n    return base_pool_data.pool_address, base_pool_data.coins\r\n\r\n\r\n\r\n@view\r\n@external\r\ndef calc_token_amount(\r\n    _pool: address,\r\n    _amounts: DynArray[uint256, MAX_ALL_COINS],\r\n    _is_deposit: bool\r\n) -> uint256:\r\n    \"\"\"\r\n    @notice Calculate addition or reduction in token supply from a deposit or withdrawal\r\n    @dev This calculation accounts for slippage, but not fees.\r\n         Needed to prevent front-running, not for precise calculations!\r\n    @param _pool Address of the pool to deposit into\r\n    @param _amounts Amount of each underlying coin being deposited\r\n    @param _is_deposit set True for deposits, False for withdrawals\r\n    @return Expected amount of LP tokens received\r\n    \"\"\"\r\n    meta_amounts: uint256[META_N_COINS] = empty(uint256[META_N_COINS])\r\n    base_amounts: DynArray[uint256, MAX_COINS] = empty(DynArray[uint256, MAX_COINS])\r\n    base_pool: address = empty(address)\r\n    base_coins: DynArray[address, MAX_COINS] = empty(DynArray[address, MAX_COINS])\r\n    base_pool, base_coins = self._fetch_base_pool_data(_pool)\r\n    base_n_coins: uint256 = len(base_coins)\r\n\r\n    meta_amounts[0] = _amounts[0]\r\n    for i in range(base_n_coins, bound=MAX_COINS):\r\n        base_amounts.append(_amounts[i + META_N_COINS - 1])\r\n\r\n    base_tokens: uint256 = StableSwapNG(base_pool).calc_token_amount(base_amounts, _is_deposit)\r\n    meta_amounts[META_N_COINS - 1] = base_tokens\r\n\r\n    return StableSwapMetaNG(_pool).calc_token_amount(meta_amounts, _is_deposit)\r\n\r\n\r\n@external\r\ndef add_liquidity(\r\n    _pool: address,\r\n    _deposit_amounts: DynArray[uint256, MAX_ALL_COINS],\r\n    _min_mint_amount: uint256,\r\n    _receiver: address = msg.sender,\r\n) -> uint256:\r\n    \"\"\"\r\n    @notice Wrap underlying coins and deposit them into `_pool`\r\n    @param _pool Address of the pool to deposit into\r\n    @param _deposit_amounts List of amounts of underlying coins to deposit\r\n    @param _min_mint_amount Minimum amount of LP tokens to mint from the deposit\r\n    @param _receiver Address that receives the LP tokens\r\n    @return Amount of LP tokens received by depositing\r\n    \"\"\"\r\n\r\n    base_amounts: DynArray[uint256, MAX_COINS] = empty(DynArray[uint256, MAX_COINS])\r\n    deposit_base: bool = False\r\n\r\n    # -------------------------- Get base pool data --------------------------\r\n\r\n    base_pool: address = empty(address)\r\n    base_coins: DynArray[address, MAX_COINS] = empty(DynArray[address, MAX_COINS])\r\n    base_pool, base_coins = self._base_pool_data(_pool)\r\n    n_all_coins: uint256 = len(base_coins) + 1\r\n\r\n    if not self.base_pool_coins_spending_approved[base_pool]:\r\n        self._approve_pool_to_spend_zap_coins(base_pool, base_coins)\r\n\r\n    # ------------------------ Transfer tokens to Zap ------------------------\r\n\r\n    meta_amounts: uint256[META_N_COINS] = empty(uint256[META_N_COINS])\r\n\r\n    # Transfer meta-token (token in metapool that is not base pool token) if\r\n    # any:\r\n    if _deposit_amounts[0] != 0:\r\n        coin: address = StableSwapMetaNG(_pool).coins(0)\r\n        if not self.is_approved[coin][_pool]:\r\n            ERC20(coin).approve(_pool, max_value(uint256))\r\n            self.is_approved[coin][_pool] = True\r\n        ERC20(coin).transferFrom(msg.sender, self, _deposit_amounts[0])\r\n        meta_amounts[0] = _deposit_amounts[0]\r\n\r\n    # Transfer base pool coins (if any):\r\n    for i in range(n_all_coins, bound=MAX_ALL_COINS):\r\n\r\n        amount: uint256 = _deposit_amounts[i]\r\n        base_amounts.append(0)\r\n        if i == 0 or amount == 0:\r\n            base_amounts.append(0)\r\n            continue\r\n\r\n        deposit_base = True\r\n        base_idx: uint256 = i - 1\r\n        coin: address = base_coins[base_idx]\r\n\r\n        ERC20(coin).transferFrom(msg.sender, self, amount)\r\n        base_amounts[base_idx] = amount\r\n\r\n    # ----------------------- Deposit to the base pool -----------------------\r\n\r\n    if deposit_base:\r\n        meta_amounts[META_N_COINS - 1] = StableSwapNG(base_pool).add_liquidity(base_amounts, 0)\r\n        if not self.is_approved[base_pool][_pool]:\r\n            ERC20(base_pool).approve(_pool, max_value(uint256))\r\n            self.is_approved[base_pool][_pool] = True\r\n\r\n    # ----------------------- Deposit to the meta pool -----------------------\r\n\r\n    return StableSwapMetaNG(_pool).add_liquidity(\r\n        meta_amounts,\r\n        _min_mint_amount,\r\n        _receiver\r\n    )\r\n\r\n\r\n@view\r\n@external\r\ndef calc_withdraw_one_coin(_pool: address, _token_amount: uint256, i: int128) -> uint256:\r\n    \"\"\"\r\n    @notice Calculate the amount received when withdrawing and unwrapping a single coin\r\n    @param _pool Address of the pool to deposit into\r\n    @param _token_amount Amount of LP tokens to burn in the withdrawal\r\n    @param i Index value of the underlying coin to withdraw\r\n    @return Amount of coin received\r\n    \"\"\"\r\n    if i < META_N_COINS - 1:\r\n        return StableSwapMetaNG(_pool).calc_withdraw_one_coin(_token_amount, i)\r\n    else:\r\n        base_pool: address = StableSwapMetaNG(_pool).BASE_POOL()\r\n        assert base_pool != empty(address)  # dev: not a metapool!\r\n        _base_tokens: uint256 = StableSwapMetaNG(_pool).calc_withdraw_one_coin(_token_amount, META_N_COINS - 1)\r\n        return StableSwapNG(base_pool).calc_withdraw_one_coin(\r\n            _base_tokens,\r\n            i - convert(META_N_COINS - 1, int128)\r\n        )\r\n\r\n\r\n@external\r\ndef remove_liquidity(\r\n    _pool: address,\r\n    _burn_amount: uint256,\r\n    _min_amounts: DynArray[uint256, MAX_ALL_COINS],\r\n    _receiver: address = msg.sender\r\n) -> DynArray[uint256, MAX_ALL_COINS]:\r\n    \"\"\"\r\n    @notice Withdraw and unwrap coins from the pool\r\n    @dev Withdrawal amounts are based on current deposit ratios\r\n    @param _pool Address of the pool to deposit into\r\n    @param _burn_amount Quantity of LP tokens to burn in the withdrawal\r\n    @param _min_amounts Minimum amounts of underlying coins to receive\r\n    @param _receiver Address that receives the LP tokens\r\n    @return List of amounts of underlying coins that were withdrawn\r\n    \"\"\"\r\n    ERC20(_pool).transferFrom(msg.sender, self, _burn_amount)\r\n\r\n    base_pool: address = empty(address)\r\n    base_coins: DynArray[address, MAX_COINS] = empty(DynArray[address, MAX_COINS])\r\n    base_pool, base_coins = self._base_pool_data(_pool)\r\n    base_n_coins: uint256 = len(base_coins)\r\n\r\n    min_amounts_base: DynArray[uint256, MAX_COINS] = empty(DynArray[uint256, MAX_COINS])\r\n    amounts: DynArray[uint256, MAX_ALL_COINS] = empty(DynArray[uint256, MAX_ALL_COINS])\r\n\r\n    # Withdraw from meta\r\n    meta_received: uint256[META_N_COINS] = StableSwapMetaNG(_pool).remove_liquidity(\r\n        _burn_amount,\r\n        [_min_amounts[0], convert(0, uint256)]\r\n    )\r\n\r\n    # Withdraw from base\r\n    for i in range(base_n_coins, bound=MAX_COINS):\r\n        min_amounts_base.append(_min_amounts[i + META_N_COINS - 1])\r\n    StableSwapNG(base_pool).remove_liquidity(meta_received[1], min_amounts_base)\r\n\r\n    # Transfer all coins out\r\n    coin: address = StableSwapMetaNG(_pool).coins(0)\r\n    ERC20(coin).transfer(_receiver, meta_received[0])\r\n    amounts.append(meta_received[0])\r\n\r\n    for i in range(base_n_coins + 1, bound=MAX_ALL_COINS):\r\n\r\n        if i == 0:\r\n            continue\r\n\r\n        coin = base_coins[i-1]\r\n        amounts.append(ERC20(coin).balanceOf(self))\r\n\r\n        ERC20(coin).transfer(_receiver, amounts[i])\r\n\r\n    return amounts\r\n\r\n\r\n@external\r\ndef remove_liquidity_one_coin(\r\n    _pool: address,\r\n    _burn_amount: uint256,\r\n    i: int128,\r\n    _min_amount: uint256,\r\n    _receiver: address=msg.sender\r\n) -> uint256:\r\n    \"\"\"\r\n    @notice Withdraw and unwrap a single coin from the pool\r\n    @param _pool Address of the pool to deposit into\r\n    @param _burn_amount Amount of LP tokens to burn in the withdrawal\r\n    @param i Index value of the coin to withdraw\r\n    @param _min_amount Minimum amount of underlying coin to receive\r\n    @param _receiver Address that receives the LP tokens\r\n    @return Amount of underlying coin received\r\n    \"\"\"\r\n    ERC20(_pool).transferFrom(msg.sender, self, _burn_amount)\r\n\r\n    coin_amount: uint256 = 0\r\n    if i == 0:\r\n        coin_amount = StableSwapMetaNG(_pool).remove_liquidity_one_coin(\r\n            _burn_amount, i, _min_amount, _receiver\r\n        )\r\n    else:\r\n        base_pool: address = empty(address)\r\n        base_coins: DynArray[address, MAX_COINS] = empty(DynArray[address, MAX_COINS])\r\n        base_pool, base_coins = self._base_pool_data(_pool)\r\n        base_n_coins: uint256 = len(base_coins)\r\n\r\n        coin: address = base_coins[i - convert(META_N_COINS - 1, int128)]\r\n        # Withdraw a base pool coin\r\n        coin_amount = StableSwapMetaNG(_pool).remove_liquidity_one_coin(\r\n            _burn_amount, convert(META_N_COINS - 1, int128), 0, self\r\n        )\r\n        coin_amount = StableSwapNG(base_pool).remove_liquidity_one_coin(\r\n            coin_amount, i - convert(META_N_COINS - 1, int128), _min_amount\r\n        )\r\n        ERC20(coin).transfer(_receiver, coin_amount)\r\n\r\n    return coin_amount\r\n\r\n\r\n@external\r\ndef remove_liquidity_imbalance(\r\n    _pool: address,\r\n    _amounts: DynArray[uint256, MAX_ALL_COINS],\r\n    _max_burn_amount: uint256,\r\n    _receiver: address=msg.sender\r\n) -> uint256:\r\n    \"\"\"\r\n    @notice Withdraw coins from the pool in an imbalanced amount\r\n    @param _pool Address of the pool to deposit into\r\n    @param _amounts List of amounts of underlying coins to withdraw\r\n    @param _max_burn_amount Maximum amount of LP token to burn in the withdrawal\r\n    @param _receiver Address that receives the LP tokens\r\n    @return Actual amount of the LP token burned in the withdrawal\r\n    \"\"\"\r\n\r\n    base_pool: address = empty(address)\r\n    base_coins: DynArray[address, MAX_COINS] = empty(DynArray[address, MAX_COINS])\r\n    base_pool, base_coins = self._base_pool_data(_pool)\r\n    base_n_coins: uint256 = len(base_coins)\r\n\r\n    fee: uint256 = StableSwapNG(base_pool).fee() * base_n_coins / (4 * (base_n_coins - 1))\r\n    fee += fee * FEE_IMPRECISION / FEE_DENOMINATOR  # Overcharge to account for imprecision\r\n\r\n    # Transfer the LP token in\r\n    ERC20(_pool).transferFrom(msg.sender, self, _max_burn_amount)\r\n\r\n    withdraw_base: bool = False\r\n    amounts_base: DynArray[uint256, MAX_COINS] = empty(DynArray[uint256, MAX_COINS])\r\n    amounts_meta: uint256[META_N_COINS] = [_amounts[0], 0]\r\n\r\n    # determine amounts to withdraw from base pool\r\n    for i in range(base_n_coins, bound=MAX_COINS):\r\n        amount: uint256 = _amounts[META_N_COINS - 1 + i]\r\n        if amount != 0:\r\n            amounts_base.append(amount)\r\n            withdraw_base = True\r\n        else:\r\n            amounts_base.append(0)\r\n\r\n    # determine amounts to withdraw from metapool\r\n    if withdraw_base:\r\n        amounts_meta[1] = StableSwapNG(base_pool).calc_token_amount(amounts_base, False)\r\n        amounts_meta[1] += amounts_meta[1] * fee / FEE_DENOMINATOR + 1\r\n\r\n    # withdraw from metapool and return the remaining LP tokens\r\n    burn_amount: uint256 = StableSwapMetaNG(_pool).remove_liquidity_imbalance(amounts_meta, _max_burn_amount)\r\n    ERC20(_pool).transfer(msg.sender, _max_burn_amount - burn_amount)\r\n\r\n    # withdraw from base pool\r\n    if withdraw_base:\r\n        StableSwapNG(base_pool).remove_liquidity_imbalance(amounts_base, amounts_meta[1])\r\n        coin: address = base_pool\r\n        leftover: uint256 = ERC20(coin).balanceOf(self)\r\n\r\n        if leftover > 0:\r\n            # if some base pool LP tokens remain, re-deposit them for the caller\r\n            if not self.is_approved[coin][_pool]:\r\n                ERC20(coin).approve(_pool, MAX_UINT256)\r\n                self.is_approved[coin][_pool] = True\r\n            burn_amount -= StableSwapMetaNG(_pool).add_liquidity([convert(0, uint256), leftover], 0, msg.sender)\r\n\r\n        # transfer withdrawn base pool tokens to caller\r\n        for i in range(base_n_coins, bound=MAX_COINS):\r\n            ERC20(base_coins[i]).transfer(_receiver, amounts_base[i])\r\n\r\n    # transfer withdrawn metapool tokens to caller\r\n    if _amounts[0] > 0:\r\n        coin: address = StableSwapMetaNG(_pool).coins(0)\r\n        ERC20(coin).transfer(_receiver, _amounts[0])\r\n\r\n    return burn_amount","ABI":"[{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"calc_token_amount\",\"inputs\":[{\"name\":\"_pool\",\"type\":\"address\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"name\":\"_is_deposit\",\"type\":\"bool\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"add_liquidity\",\"inputs\":[{\"name\":\"_pool\",\"type\":\"address\"},{\"name\":\"_deposit_amounts\",\"type\":\"uint256[]\"},{\"name\":\"_min_mint_amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"add_liquidity\",\"inputs\":[{\"name\":\"_pool\",\"type\":\"address\"},{\"name\":\"_deposit_amounts\",\"type\":\"uint256[]\"},{\"name\":\"_min_mint_amount\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"calc_withdraw_one_coin\",\"inputs\":[{\"name\":\"_pool\",\"type\":\"address\"},{\"name\":\"_token_amount\",\"type\":\"uint256\"},{\"name\":\"i\",\"type\":\"int128\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity\",\"inputs\":[{\"name\":\"_pool\",\"type\":\"address\"},{\"name\":\"_burn_amount\",\"type\":\"uint256\"},{\"name\":\"_min_amounts\",\"type\":\"uint256[]\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity\",\"inputs\":[{\"name\":\"_pool\",\"type\":\"address\"},{\"name\":\"_burn_amount\",\"type\":\"uint256\"},{\"name\":\"_min_amounts\",\"type\":\"uint256[]\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity_one_coin\",\"inputs\":[{\"name\":\"_pool\",\"type\":\"address\"},{\"name\":\"_burn_amount\",\"type\":\"uint256\"},{\"name\":\"i\",\"type\":\"int128\"},{\"name\":\"_min_amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity_one_coin\",\"inputs\":[{\"name\":\"_pool\",\"type\":\"address\"},{\"name\":\"_burn_amount\",\"type\":\"uint256\"},{\"name\":\"i\",\"type\":\"int128\"},{\"name\":\"_min_amount\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity_imbalance\",\"inputs\":[{\"name\":\"_pool\",\"type\":\"address\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"name\":\"_max_burn_amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity_imbalance\",\"inputs\":[{\"name\":\"_pool\",\"type\":\"address\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"name\":\"_max_burn_amount\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]}]","ContractName":"MetaZapNG","CompilerVersion":"vyper:0.3.10","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}