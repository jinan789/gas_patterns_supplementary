{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.3.7\r\n\r\ninterface IVault:\r\n    def asset() -> address: view\r\n    def balanceOf(owner: address) -> uint256: view\r\n    def redeem(shares: uint256, receiver: address, owner: address, max_loss: uint256) -> uint256: nonpayable\r\n    def transfer(receiver: address, amount: uint256) -> bool: nonpayable\r\n\r\nevent UpdateManagerRecipient:\r\n    newManagerRecipient: indexed(address)\r\n\r\nevent UpdateSplitee:\r\n    newSplitee: indexed(address)\r\n\r\nevent UpdateSplit:\r\n    newSplit: uint256\r\n\r\nevent UpdateMaxLoss:\r\n    newMaxLoss: uint256\r\n\r\nevent UpdateAuction:\r\n    newAuction: address\r\n\r\nMAX_BPS: constant(uint256) = 10_000\r\nMAX_ARRAY_SIZE: public(constant(uint256)) = 20\r\n\r\nname: public(String[64])\r\n\r\n# Bid daddy yankee in charge of the splitter\r\nmanager: public(address)\r\n# Address to receive the managers shares\r\nmanagerRecipient: public(address)\r\n# Team to receive the rest of the split\r\nsplitee: public(address)\r\n\r\n# Percent that is sent to `managerRecipient`\r\nsplit: public(uint256)\r\n# Max loss to use on vault redeems\r\nmaxLoss: public(uint256)\r\n\r\n# Address of the contract to conduct dutch auctions for token sales\r\nauction: public(address)\r\n\r\n@external\r\ndef initialize(\r\n    name: String[64], \r\n    manager: address,\r\n    manager_recipient: address,\r\n    splitee: address,\r\n    original_split: uint256\r\n):\r\n    assert self.manager == empty(address), \"initialized\"\r\n    assert manager != empty(address), \"ZERO_ADDRESS\"\r\n    assert manager_recipient != empty(address), \"ZERO_ADDRESS\"\r\n    assert splitee != empty(address), \"ZERO_ADDRESS\"\r\n    assert original_split != 0, \"zero split\"\r\n\r\n    self.name = name\r\n    self.manager = manager\r\n    self.managerRecipient = manager_recipient\r\n    self.splitee = splitee\r\n    self.split = original_split\r\n    self.maxLoss = 1\r\n\r\n\r\n###### UNWRAP VAULT TOKENS ######\r\n\r\n@external\r\ndef unwrapVault(vault: address):\r\n    assert msg.sender == self.splitee or msg.sender == self.manager, \"!allowed\"\r\n    self._unwrapVault(vault, self.maxLoss)\r\n\r\n@external\r\ndef unwrapVaults(vaults: DynArray[address, MAX_ARRAY_SIZE]):\r\n    assert msg.sender == self.splitee or msg.sender == self.manager, \"!allowed\"\r\n\r\n    max_loss: uint256 = self.maxLoss\r\n\r\n    for vault in vaults:\r\n        self._unwrapVault(vault, max_loss)\r\n\r\n@internal\r\ndef _unwrapVault(vault: address, max_loss: uint256):\r\n    vault_balance: uint256 = IVault(vault).balanceOf(self)\r\n    IVault(vault).redeem(vault_balance, self, self, max_loss)\r\n\r\n###### DISTRIBUTE TOKENS ######\r\n\r\n# split one token\r\n@external \r\ndef distributeToken(token: address):\r\n    splitee: address = self.splitee\r\n    assert msg.sender == splitee or msg.sender == self.manager, \"!allowed\"\r\n    self._distribute(token, self.split, self.managerRecipient, splitee)\r\n\r\n# split an array of tokens\r\n@external\r\ndef distributeTokens(tokens: DynArray[address, MAX_ARRAY_SIZE]):\r\n    splitee: address = self.splitee\r\n    assert msg.sender == splitee or msg.sender == self.manager, \"!allowed\"\r\n\r\n    # Cache the split storage variables\r\n    split: uint256 = self.split\r\n    manager_recipient: address = self.managerRecipient\r\n\r\n    for token in tokens:\r\n        self._distribute(token, split, manager_recipient, splitee)\r\n\r\n@internal\r\ndef _distribute(token: address, split: uint256, manager_recipient: address, splitee: address):\r\n    current_balance: uint256 = IVault(token).balanceOf(self)\r\n    manager_split: uint256 = current_balance\r\n    \r\n    if split != MAX_BPS:\r\n        manager_split = unsafe_div(unsafe_mul(current_balance, split), MAX_BPS)\r\n        self._transferERC20(token, splitee, unsafe_sub(current_balance, manager_split))\r\n\r\n    self._transferERC20(token, manager_recipient, manager_split)\r\n\r\n###### AUCTION INITIATORS ######\r\n\r\n@external\r\ndef fundAuctions(tokens: DynArray[address, MAX_ARRAY_SIZE]):\r\n    assert msg.sender == self.splitee or msg.sender == self.manager, \"!allowed\"\r\n    auction: address = self.auction\r\n\r\n    for token in tokens:\r\n        amount: uint256 = IVault(token).balanceOf(self)\r\n        self._transferERC20(token, auction, amount)\r\n\r\n@external\r\ndef fundAuction(token: address, amount: uint256 = max_value(uint256)):\r\n    assert msg.sender == self.splitee or msg.sender == self.manager, \"!allowed\"\r\n\r\n    to_send: uint256 = amount\r\n    if(amount == max_value(uint256)):\r\n        to_send = IVault(token).balanceOf(self)\r\n\r\n    self._transferERC20(token, self.auction, to_send)\r\n\r\n@internal\r\ndef _transferERC20(token: address, recipient: address, amount: uint256):\r\n    # Send tokens to the auction contract.\r\n    assert IVault(token).transfer(recipient, amount, default_return_value=True), \"transfer failed\"\r\n\r\n###### SETTERS ######\r\n\r\n# update recipients\r\n@external\r\ndef setMangerRecipient(new_recipient: address):\r\n    assert msg.sender == self.manager, \"!manager\"\r\n    assert new_recipient != empty(address), \"ZERO_ADDRESS\"\r\n\r\n    self.managerRecipient = new_recipient\r\n\r\n    log UpdateManagerRecipient(new_recipient)\r\n\r\n@external\r\ndef setSplitee(new_splitee: address):\r\n    assert msg.sender == self.splitee, \"!splitee\"\r\n    assert new_splitee != empty(address), \"ZERO_ADDRESS\"\r\n\r\n    self.splitee = new_splitee\r\n\r\n    log UpdateSplitee(new_splitee)\r\n\r\n# Update Split\r\n@external\r\ndef setSplit(new_split: uint256):\r\n    assert msg.sender == self.manager, \"!manager\"\r\n    assert new_split != 0, \"zero split\"\r\n\r\n    self.split = new_split\r\n\r\n    log UpdateSplit(new_split)\r\n\r\n# Set max loss\r\n@external\r\ndef setMaxLoss(new_max_loss: uint256):\r\n    assert msg.sender == self.manager, \"!manager\"\r\n    assert new_max_loss <= MAX_BPS, \"MAX_BPS\"\r\n\r\n    self.maxLoss = new_max_loss\r\n\r\n    log UpdateMaxLoss(new_max_loss)\r\n\r\n@external\r\ndef setAuction(new_auction: address):\r\n    assert msg.sender == self.manager, \"!manager\"\r\n\r\n    self.auction = new_auction\r\n\r\n    log UpdateAuction(new_auction)","ABI":"[{\"name\":\"UpdateManagerRecipient\",\"inputs\":[{\"name\":\"newManagerRecipient\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateSplitee\",\"inputs\":[{\"name\":\"newSplitee\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateSplit\",\"inputs\":[{\"name\":\"newSplit\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateMaxLoss\",\"inputs\":[{\"name\":\"newMaxLoss\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateAuction\",\"inputs\":[{\"name\":\"newAuction\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"manager\",\"type\":\"address\"},{\"name\":\"manager_recipient\",\"type\":\"address\"},{\"name\":\"splitee\",\"type\":\"address\"},{\"name\":\"original_split\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"unwrapVault\",\"inputs\":[{\"name\":\"vault\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"unwrapVaults\",\"inputs\":[{\"name\":\"vaults\",\"type\":\"address[]\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"distributeToken\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"distributeTokens\",\"inputs\":[{\"name\":\"tokens\",\"type\":\"address[]\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"fundAuctions\",\"inputs\":[{\"name\":\"tokens\",\"type\":\"address[]\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"fundAuction\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"fundAuction\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setMangerRecipient\",\"inputs\":[{\"name\":\"new_recipient\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setSplitee\",\"inputs\":[{\"name\":\"new_splitee\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setSplit\",\"inputs\":[{\"name\":\"new_split\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setMaxLoss\",\"inputs\":[{\"name\":\"new_max_loss\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setAuction\",\"inputs\":[{\"name\":\"new_auction\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"MAX_ARRAY_SIZE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"manager\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"managerRecipient\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"splitee\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"split\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"maxLoss\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"auction\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.3.7","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU AGPLv3","Proxy":"0","Implementation":"","SwarmSource":""}]}