{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/contracts/permissions/PauserRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IPauserRegistry.sol\\\";\\n\\n/**\\n * @title Defines pauser & unpauser roles + modifiers to be used elsewhere.\\n * @author Layr Labs, Inc.\\n */\\ncontract PauserRegistry is IPauserRegistry {\\n    /// @notice Unique address that holds the pauser role.\\n    address public pauser;\\n\\n    /// @notice Unique address that holds the unpauser role. Capable of changing *both* the pauser and unpauser addresses.\\n    address public unpauser;\\n\\n    event PauserChanged(address previousPauser, address newPauser);\\n\\n    event UnpauserChanged(address previousUnpauser, address newUnpauser);\\n\\n    modifier onlyPauser() {\\n        require(msg.sender == pauser, \\\"msg.sender is not permissioned as pauser\\\");\\n        _;\\n    }\\n\\n    modifier onlyUnpauser() {\\n        require(msg.sender == unpauser, \\\"msg.sender is not permissioned as unpauser\\\");\\n        _;\\n    }\\n\\n    constructor(address _pauser, address _unpauser) {\\n        _setPauser(_pauser);\\n        _setUnpauser(_unpauser);\\n    }\\n\\n    /// @notice Sets new pauser - only callable by unpauser, as the unpauser is expected to be kept more secure, e.g. being a multisig with a higher threshold\\n    function setPauser(address newPauser) external onlyUnpauser {\\n        _setPauser(newPauser);\\n    }\\n\\n    /// @notice Sets new unpauser - only callable by unpauser, as the unpauser is expected to be kept more secure, e.g. being a multisig with a higher threshold\\n    function setUnpauser(address newUnpauser) external onlyUnpauser {\\n        _setUnpauser(newUnpauser);\\n    }\\n\\n    function _setPauser(address newPauser) internal {\\n        require(newPauser != address(0), \\\"PauserRegistry._setPauser: zero address input\\\");\\n        emit PauserChanged(pauser, newPauser);\\n        pauser = newPauser;\\n    }\\n\\n    function _setUnpauser(address newUnpauser) internal {\\n        require(newUnpauser != address(0), \\\"PauserRegistry._setUnpauser: zero address input\\\");\\n        emit UnpauserChanged(unpauser, newUnpauser);\\n        unpauser = newUnpauser;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/IPauserRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Interface for the `PauserRegistry` contract.\\n * @author Layr Labs, Inc.\\n */\\ninterface IPauserRegistry {\\n    /// @notice Unique address that holds the pauser role.\\n    function pauser() external view returns (address);\\n\\n    /// @notice Unique address that holds the unpauser role. Capable of changing *both* the pauser and unpauser addresses.\\n    function unpauser() external view returns (address);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin-upgrades/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"ds-test/=lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"lib/forge-std:ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"lib/openzeppelin-contracts:ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\r\n      \"lib/openzeppelin-contracts:forge-std/=lib/openzeppelin-contracts/lib/forge-std/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pauser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_unpauser\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousPauser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"PauserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousUnpauser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newUnpauser\",\"type\":\"address\"}],\"name\":\"UnpauserChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"setPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newUnpauser\",\"type\":\"address\"}],\"name\":\"setUnpauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PauserRegistry","CompilerVersion":"v0.8.12+commit.f00d7308","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000207e804758e28f2b3fd6e4219671b327100b82f8000000000000000000000000207e804758e28f2b3fd6e4219671b327100b82f8","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}