{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.3.9\r\n\r\n\"\"\"\r\n@title LiquidationsPeripheral\r\n@author [Zharta](https://zharta.io/)\r\n@notice The liquidations peripheral contract exists as the main interface to handle liquidations\r\n@dev Uses a `LiquidationsCore` contract to store state\r\n\"\"\"\r\n\r\n\r\n# Interfaces\r\n\r\nfrom vyper.interfaces import ERC20 as IERC20\r\nfrom vyper.interfaces import ERC721 as IERC721\r\n\r\ninterface ILiquidationsCore:\r\n    def getLiquidation(_collateralAddress: address, _tokenId: uint256) -> Liquidation: view\r\n    def getLiquidationStartTime(_collateralAddress: address, _tokenId: uint256) -> uint256: view\r\n    def isLoanLiquidated(_borrower: address, _loansCoreContract: address, _loanId: uint256) -> bool: view\r\n    def addLiquidation(\r\n        _collateralAddress: address,\r\n        _tokenId: uint256,\r\n        _startTime: uint256,\r\n        _gracePeriodMaturity: uint256,\r\n        _lenderPeriodMaturity: uint256,\r\n        _principal: uint256,\r\n        _interestAmount: uint256,\r\n        _apr: uint256,\r\n        _gracePeriodPrice: uint256,\r\n        _lenderPeriodPrice: uint256,\r\n        _borrower: address,\r\n        _loanId: uint256,\r\n        _loansCoreContract: address,\r\n        _erc20TokenContract: address\r\n    ) -> bytes32: nonpayable\r\n    def addLoanToLiquidated(_borrower: address, _loansCoreContract: address, _loanId: uint256): nonpayable\r\n    def removeLiquidation(_collateralAddress: address, _tokenId: uint256): nonpayable\r\n\r\ninterface ILoansCore:\r\n    def getLoan(_borrower: address, _loanId: uint256) -> Loan: view\r\n\r\ninterface ILendingPoolPeripheral:\r\n    def lenderFunds(_lender: address) -> InvestorFunds: view\r\n    def receiveFundsFromLiquidation(\r\n        _borrower: address,\r\n        _amount: uint256,\r\n        _rewardsAmount: uint256,\r\n        _distributeToProtocol: bool,\r\n        _investedAmount: uint256,\r\n        _origin: String[30]\r\n    ): nonpayable\r\n    def receiveFundsFromLiquidationEth(\r\n        _borrower: address,\r\n        _amount: uint256,\r\n        _rewardsAmount: uint256,\r\n        _distributeToProtocol: bool,\r\n        _investedAmount: uint256,\r\n        _origin: String[30]\r\n    ): payable\r\n    def lendingPoolCoreContract() -> address: view\r\n    def protocolFeesShare() -> uint256: view\r\n\r\ninterface ICollateralVaultPeripheral:\r\n    def vaultAddress(_collateralAddress: address, _tokenId: uint256) -> address: view\r\n    def isCollateralInVault(_collateralAddress: address, _tokenId: uint256) -> bool: view\r\n    def transferCollateralFromLiquidation(_wallet: address, _collateralAddress: address, _tokenId: uint256): nonpayable\r\n    def collateralVaultCoreDefaultAddress() -> address: view\r\n\r\ninterface ISushiFactory:\r\n    def getPair(tokenA: address, tokenB: address) -> address: view\r\n\r\ninterface ISushiRouter:\r\n    def factory() -> address: view\r\n    def getAmountsOut(amountIn: uint256, path: DynArray[address, 2]) -> DynArray[uint256, 2]: view\r\n    def swapExactTokensForTokens(\r\n        amountIn: uint256,\r\n        amountsOutMin: uint256,\r\n        path: DynArray[address, 2],\r\n        to: address,\r\n        dealine: uint256\r\n    ) -> DynArray[uint256, 2]: nonpayable\r\n\r\ninterface INFTXVaultFactory:\r\n    def vaultsForAsset(assetAddress: address) -> DynArray[address, 2**10]: view\r\n\r\ninterface INFTXVault:\r\n    def vaultId() -> uint256: view\r\n    def allValidNFTs(tokenIds: DynArray[uint256, 1]) -> bool: view\r\n    def mintFee() -> uint256: view\r\n\r\ninterface INFTXMarketplaceZap:\r\n    def mintAndSell721WETH(vaultId: uint256, ids: DynArray[uint256, 1], minWethOut: uint256, path: DynArray[address, 2], to: address): nonpayable\r\n\r\ninterface IVault:\r\n    def vaultName() -> String[30]: view\r\n\r\ninterface CryptoPunksMarket:\r\n    def offerPunkForSaleToAddress(punkIndex: uint256, minSalePriceInWei: uint256, toAddress: address): nonpayable\r\n\r\ninterface WrappedPunk:\r\n    def burn(punkIndex: uint256): nonpayable\r\n\r\n\r\n# Structs\r\n\r\nstruct Collateral:\r\n    contractAddress: address\r\n    tokenId: uint256\r\n    amount: uint256\r\n\r\nstruct Loan:\r\n    id: uint256\r\n    amount: uint256\r\n    interest: uint256 # parts per 10000, e.g. 2.5% is represented by 250 parts per 10000\r\n    maturity: uint256\r\n    startTime: uint256\r\n    collaterals: DynArray[Collateral, 100]\r\n    paidPrincipal: uint256\r\n    paidInterestAmount: uint256\r\n    started: bool\r\n    invalidated: bool\r\n    paid: bool\r\n    defaulted: bool\r\n    canceled: bool\r\n\r\nstruct InvestorFunds:\r\n    currentAmountDeposited: uint256\r\n    totalAmountDeposited: uint256\r\n    totalAmountWithdrawn: uint256\r\n    sharesBasisPoints: uint256\r\n    activeForRewards: bool\r\n\r\nstruct Liquidation:\r\n    lid: bytes32\r\n    collateralAddress: address\r\n    tokenId: uint256\r\n    startTime: uint256\r\n    gracePeriodMaturity: uint256\r\n    lenderPeriodMaturity: uint256\r\n    principal: uint256\r\n    interestAmount: uint256\r\n    apr: uint256 # parts per 10000, e.g. 2.5% is represented by 250 parts per 10000\r\n    gracePeriodPrice: uint256\r\n    lenderPeriodPrice: uint256\r\n    borrower: address\r\n    loanId: uint256\r\n    loansCoreContract: address\r\n    erc20TokenContract: address\r\n    inAuction: bool\r\n\r\n\r\n# Events\r\n\r\nevent OwnershipTransferred:\r\n    ownerIndexed: indexed(address)\r\n    proposedOwnerIndexed: indexed(address)\r\n    owner: address\r\n    proposedOwner: address\r\n\r\nevent OwnerProposed:\r\n    ownerIndexed: indexed(address)\r\n    proposedOwnerIndexed: indexed(address)\r\n    owner: address\r\n    proposedOwner: address\r\n\r\nevent GracePeriodDurationChanged:\r\n    currentValue: uint256\r\n    newValue: uint256\r\n\r\nevent LendersPeriodDurationChanged:\r\n    currentValue: uint256\r\n    newValue: uint256\r\n\r\nevent AuctionPeriodDurationChanged:\r\n    currentValue: uint256\r\n    newValue: uint256\r\n\r\nevent LiquidationsCoreAddressSet:\r\n    currentValue: address\r\n    newValue: address\r\n\r\nevent LoansCoreAddressAdded:\r\n    erc20TokenContractIndexed: indexed(address)\r\n    currentValue: address\r\n    newValue: address\r\n    erc20TokenContract: address\r\n\r\nevent LoansCoreAddressRemoved:\r\n    erc20TokenContractIndexed: indexed(address)\r\n    currentValue: address\r\n    erc20TokenContract: address\r\n\r\nevent LendingPoolPeripheralAddressAdded:\r\n    erc20TokenContractIndexed: indexed(address)\r\n    currentValue: address\r\n    newValue: address\r\n    erc20TokenContract: address\r\n\r\nevent LendingPoolPeripheralAddressRemoved:\r\n    erc20TokenContractIndexed: indexed(address)\r\n    currentValue: address\r\n    erc20TokenContract: address\r\n\r\nevent CollateralVaultPeripheralAddressSet:\r\n    currentValue: address\r\n    newValue: address\r\n\r\nevent NFTXVaultFactoryAddressSet:\r\n    currentValue: address\r\n    newValue: address\r\n\r\nevent NFTXMarketplaceZapAddressSet:\r\n    currentValue: address\r\n    newValue: address\r\n\r\nevent SushiRouterAddressSet:\r\n    currentValue: address\r\n    newValue: address\r\n\r\nevent WrappedPunksAddressSet:\r\n    currentValue: address\r\n    newValue: address\r\n\r\nevent CryptoPunksAddressSet:\r\n    currentValue: address\r\n    newValue: address\r\n\r\nevent MaxPenaltyFeeSet:\r\n    erc20TokenContractIndexed: indexed(address)\r\n    currentValue: uint256\r\n    newValue: uint256\r\n    erc20TokenContract: address\r\n\r\nevent LiquidationAdded:\r\n    erc20TokenContractIndexed: indexed(address)\r\n    collateralAddressIndexed: indexed(address)\r\n    liquidationId: bytes32\r\n    collateralAddress: address\r\n    tokenId: uint256\r\n    erc20TokenContract: address\r\n    gracePeriodPrice: uint256\r\n    lenderPeriodPrice: uint256\r\n    gracePeriodMaturity: uint256\r\n    lenderPeriodMaturity: uint256\r\n    loansCoreContract: address\r\n    loanId: uint256\r\n    borrower: address\r\n\r\nevent LiquidationRemoved:\r\n    erc20TokenContractIndexed: indexed(address)\r\n    collateralAddressIndexed: indexed(address)\r\n    liquidationId: bytes32\r\n    collateralAddress: address\r\n    tokenId: uint256\r\n    erc20TokenContract: address\r\n    loansCoreContract: address\r\n    loanId: uint256\r\n    borrower: address\r\n\r\nevent NFTPurchased:\r\n    erc20TokenContractIndexed: indexed(address)\r\n    collateralAddressIndexed: indexed(address)\r\n    buyerAddressIndexed: indexed(address)\r\n    liquidationId: bytes32\r\n    collateralAddress: address\r\n    tokenId: uint256\r\n    amount: uint256\r\n    buyerAddress: address\r\n    erc20TokenContract: address\r\n    loansCoreContract: address\r\n    method: String[30] # possible values: GRACE_PERIOD, LENDER_PERIOD, BACKSTOP_PERIOD_NFTX, BACKSTOP_PERIOD_ADMIN\r\n\r\nevent AdminWithdrawal:\r\n    collateralAddressIndexed: indexed(address)\r\n    liquidationId: bytes32\r\n    collateralAddress: address\r\n    tokenId: uint256\r\n    wallet: address\r\n\r\nevent PaymentSent:\r\n    walletIndexed: indexed(address)\r\n    wallet: address\r\n    amount: uint256\r\n\r\nevent PaymentReceived:\r\n    walletIndexed: indexed(address)\r\n    wallet: address\r\n    amount: uint256\r\n\r\n\r\n# Global variables\r\n\r\nowner: public(address)\r\nadmin: public(address)\r\nproposedOwner: public(address)\r\n\r\ngracePeriodDuration: public(uint256)\r\nlenderPeriodDuration: public(uint256)\r\nauctionPeriodDuration: public(uint256)\r\n\r\nliquidationsCoreAddress: public(address)\r\nloansCoreAddresses: public(HashMap[address, address]) # mapping between ERC20 contract and LoansCore\r\nlendingPoolPeripheralAddresses: public(HashMap[address, address]) # mapping between ERC20 contract and LendingPoolCore\r\ncollateralVaultPeripheralAddress: public(address)\r\nnftxVaultFactoryAddress: public(address)\r\nnftxMarketplaceZapAddress: public(address)\r\nsushiRouterAddress: public(address)\r\nwrappedPunksAddress: public(address)\r\ncryptoPunksAddress: public(address)\r\nwethAddress: immutable(address)\r\n\r\nmaxPenaltyFee: public(HashMap[address, uint256])\r\n\r\n##### INTERNAL METHODS - VIEW #####\r\n\r\n@pure\r\n@internal\r\ndef _penaltyFee(_principal: uint256, _max_penalty_fee: uint256) -> uint256:\r\n    return min(250 * _principal / 10000, _max_penalty_fee) if _max_penalty_fee > 0 else (250 * _principal / 10000)\r\n\r\n\r\n@pure\r\n@internal\r\ndef _computeNFTPrice(principal: uint256, interestAmount: uint256, _max_penalty_fee: uint256) -> uint256:\r\n    return principal + interestAmount + self._penaltyFee(principal, _max_penalty_fee)\r\n\r\n\r\n@pure\r\n@internal\r\ndef _computeLoanAPR(loanInterest: uint256, loanMaturity: uint256, loanStartTime: uint256) -> uint256:\r\n    return loanInterest * 31536000 / (loanMaturity - loanStartTime) # 31536000 = 365 days * 24 hours * 60 minutes * 60 seconds \r\n\r\n\r\n@pure\r\n@internal\r\ndef _computeLoanInterestAmount(principal: uint256, interest: uint256) -> uint256:\r\n    return principal * interest / 10000\r\n\r\n\r\n@view\r\n@internal\r\ndef _getNFTXVaultAddrFromCollateralAddr(_collateralAddress: address) -> address:\r\n    if self.nftxVaultFactoryAddress == empty(address):\r\n        return empty(address)\r\n\r\n    vaultAddrs: DynArray[address, 2**10] = INFTXVaultFactory(self.nftxVaultFactoryAddress).vaultsForAsset(_collateralAddress)\r\n\r\n    if len(vaultAddrs) == 0:\r\n        return empty(address)\r\n\r\n    return vaultAddrs[len(vaultAddrs) - 1]\r\n\r\n\r\n@view\r\n@internal\r\ndef _getNFTXVaultIdFromCollateralAddr(_collateralAddress: address) -> uint256:\r\n    vaultAddr: address = self._getNFTXVaultAddrFromCollateralAddr(_collateralAddress)\r\n    return INFTXVault(vaultAddr).vaultId()\r\n\r\n\r\n@view\r\n@internal\r\ndef _getNFTXVaultMintFee(vaultAddr: address) -> uint256:\r\n    return INFTXVault(vaultAddr).mintFee()\r\n\r\n\r\n@view\r\n@internal\r\ndef _getConvertedAutoLiquidationPrice(_ethLiquidationPrice: uint256, _erc20TokenContract: address) -> uint256:\r\n    amountsOut: DynArray[uint256, 2] = ISushiRouter(self.sushiRouterAddress).getAmountsOut(_ethLiquidationPrice, [wethAddress, _erc20TokenContract])\r\n    return amountsOut[1]\r\n\r\n\r\n@view\r\n@internal\r\ndef _getAutoLiquidationPrice(_collateralAddress: address, _tokenId: uint256) -> uint256:\r\n    vaultAddr: address = self._getNFTXVaultAddrFromCollateralAddr(_collateralAddress)\r\n\r\n    if vaultAddr == empty(address):\r\n        return 0\r\n\r\n    if not INFTXVault(vaultAddr).allValidNFTs([_tokenId]):\r\n        return 0\r\n\r\n    # wrong setup of Sushi router\r\n    if ISushiRouter(self.sushiRouterAddress).factory() == empty(address):\r\n        return 0\r\n\r\n    # token pair does not exist\r\n    if ISushiFactory(ISushiRouter(self.sushiRouterAddress).factory()).getPair(vaultAddr, wethAddress) == empty(address):\r\n        return 0\r\n\r\n    mintFee: uint256 = self._getNFTXVaultMintFee(vaultAddr)\r\n    amountsOut: DynArray[uint256, 2] = ISushiRouter(self.sushiRouterAddress).getAmountsOut(as_wei_value(1, \"ether\") - mintFee, [vaultAddr, wethAddress])\r\n\r\n    return amountsOut[1]\r\n\r\n\r\n@pure\r\n@internal\r\ndef _isCollateralInArray(_collaterals: DynArray[Collateral, 100], _collateralAddress: address, _tokenId: uint256) -> bool:\r\n    for collateral in _collaterals:\r\n        if collateral.contractAddress == _collateralAddress and collateral.tokenId == _tokenId:\r\n            return True\r\n    return False\r\n\r\n\r\n@view\r\n@internal\r\ndef _unwrappedCollateralAddressIfWrapped(_collateralAddress: address) -> address:\r\n    if _collateralAddress == self.wrappedPunksAddress:\r\n        return self.cryptoPunksAddress\r\n    return _collateralAddress\r\n\r\n@internal\r\ndef _unwrapCollateral(_collateralAddress: address, _tokenId: uint256):\r\n    if _collateralAddress == self.wrappedPunksAddress:\r\n        WrappedPunk(self.wrappedPunksAddress).burn(_tokenId)\r\n\r\n\r\n##### INTERNAL METHODS - WRITE #####\r\n\r\n@internal\r\ndef _removeLiquidationAndTransfer(_collateralAddress: address, _tokenId: uint256, _liquidation: Liquidation, _origin: String[30]):\r\n\r\n    ILiquidationsCore(self.liquidationsCoreAddress).removeLiquidation(_collateralAddress, _tokenId)\r\n\r\n    log LiquidationRemoved(\r\n        _liquidation.erc20TokenContract,\r\n        _liquidation.collateralAddress,\r\n        _liquidation.lid,\r\n        _liquidation.collateralAddress,\r\n        _liquidation.tokenId,\r\n        _liquidation.erc20TokenContract,\r\n        _liquidation.loansCoreContract,\r\n        _liquidation.loanId,\r\n        _liquidation.borrower\r\n    )\r\n\r\n    ICollateralVaultPeripheral(self.collateralVaultPeripheralAddress).transferCollateralFromLiquidation(msg.sender, _collateralAddress, _tokenId)\r\n\r\n    log NFTPurchased(\r\n        _liquidation.erc20TokenContract,\r\n        _collateralAddress,\r\n        msg.sender,\r\n        _liquidation.lid,\r\n        _collateralAddress,\r\n        _tokenId,\r\n        _liquidation.gracePeriodPrice,\r\n        msg.sender,\r\n        _liquidation.erc20TokenContract,\r\n        _liquidation.loansCoreContract,\r\n        _origin\r\n    )\r\n\r\n\r\n@internal\r\ndef _swapWETHForERC20Token(_wethValue: uint256, _erc20MinValue: uint256, _erc20TokenContract: address) -> uint256:\r\n    IERC20(wethAddress).approve(self.sushiRouterAddress, _wethValue)\r\n    return ISushiRouter(self.sushiRouterAddress).swapExactTokensForTokens(\r\n        _wethValue,\r\n        _erc20MinValue,\r\n        [wethAddress, _erc20TokenContract],\r\n        self,\r\n        block.timestamp\r\n    )[1]\r\n\r\n##### EXTERNAL METHODS - VIEW #####\r\n\r\n@view\r\n@external\r\ndef onERC721Received(_operator: address, _from: address, _tokenId: uint256, _data: Bytes[1024]) -> bytes4:\r\n    return method_id(\"onERC721Received(address,address,uint256,bytes)\", output_type=bytes4)\r\n\r\n@view\r\n@external\r\ndef getLiquidation(_collateralAddress: address, _tokenId: uint256) -> Liquidation:\r\n    return ILiquidationsCore(self.liquidationsCoreAddress).getLiquidation(_collateralAddress, _tokenId)\r\n\r\n\r\n##### EXTERNAL METHODS - WRITE #####\r\n@external\r\ndef __init__(_liquidationsCoreAddress: address, _gracePeriodDuration: uint256, _lenderPeriodDuration: uint256, _auctionPeriodDuration: uint256, _wethAddress: address):\r\n    assert _liquidationsCoreAddress != empty(address), \"address is the zero address\"\r\n    assert _wethAddress != empty(address), \"address is the zero address\"\r\n    assert _gracePeriodDuration > 0, \"duration is 0\"\r\n    assert _lenderPeriodDuration > 0, \"duration is 0\"\r\n    assert _auctionPeriodDuration > 0, \"duration is 0\"\r\n\r\n    self.owner = msg.sender\r\n    self.admin = msg.sender\r\n    self.liquidationsCoreAddress = _liquidationsCoreAddress\r\n    self.gracePeriodDuration = _gracePeriodDuration\r\n    self.lenderPeriodDuration = _lenderPeriodDuration\r\n    self.auctionPeriodDuration = _auctionPeriodDuration\r\n    wethAddress = _wethAddress\r\n\r\n\r\n@external\r\ndef proposeOwner(_address: address):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert _address != empty(address), \"address it the zero address\"\r\n    assert self.owner != _address, \"proposed owner addr is the owner\"\r\n    assert self.proposedOwner != _address, \"proposed owner addr is the same\"\r\n\r\n    self.proposedOwner = _address\r\n\r\n    log OwnerProposed(\r\n        self.owner,\r\n        _address,\r\n        self.owner,\r\n        _address,\r\n    )\r\n\r\n\r\n@external\r\ndef claimOwnership():\r\n    assert msg.sender == self.proposedOwner, \"msg.sender is not the proposed\"\r\n\r\n    log OwnershipTransferred(\r\n        self.owner,\r\n        self.proposedOwner,\r\n        self.owner,\r\n        self.proposedOwner,\r\n    )\r\n\r\n    self.owner = self.proposedOwner\r\n    self.proposedOwner = empty(address)\r\n\r\n\r\n@external\r\ndef setGracePeriodDuration(_duration: uint256):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert _duration > 0, \"duration is 0\"\r\n    assert _duration != self.gracePeriodDuration, \"new value is the same\"\r\n\r\n    log GracePeriodDurationChanged(\r\n        self.gracePeriodDuration,\r\n        _duration\r\n    )\r\n\r\n    self.gracePeriodDuration = _duration\r\n\r\n\r\n@external\r\ndef setLendersPeriodDuration(_duration: uint256):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert _duration > 0, \"duration is 0\"\r\n    assert _duration != self.lenderPeriodDuration, \"new value is the same\"\r\n\r\n    log LendersPeriodDurationChanged(\r\n        self.lenderPeriodDuration,\r\n        _duration\r\n    )\r\n\r\n    self.lenderPeriodDuration = _duration\r\n\r\n\r\n@external\r\ndef setAuctionPeriodDuration(_duration: uint256):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert _duration > 0, \"duration is 0\"\r\n    assert _duration != self.auctionPeriodDuration, \"new value is the same\"\r\n\r\n    log AuctionPeriodDurationChanged(\r\n        self.auctionPeriodDuration,\r\n        _duration\r\n    )\r\n\r\n    self.auctionPeriodDuration = _duration\r\n\r\n\r\n@external\r\ndef setLiquidationsCoreAddress(_address: address):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert _address != empty(address), \"address is the zero addr\"\r\n    assert self.liquidationsCoreAddress != _address, \"new value is the same\"\r\n\r\n    log LiquidationsCoreAddressSet(\r\n        self.liquidationsCoreAddress,\r\n        _address,\r\n    )\r\n\r\n    self.liquidationsCoreAddress = _address\r\n\r\n\r\n@external\r\ndef addLoansCoreAddress(_erc20TokenContract: address, _address: address):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert _address != empty(address), \"address is the zero addr\"\r\n    assert _erc20TokenContract != empty(address), \"erc20TokenAddr is the zero addr\"\r\n    assert self.loansCoreAddresses[_erc20TokenContract] != _address, \"new value is the same\"\r\n\r\n    log LoansCoreAddressAdded(\r\n        _erc20TokenContract,\r\n        self.loansCoreAddresses[_erc20TokenContract],\r\n        _address,\r\n        _erc20TokenContract\r\n    )\r\n\r\n    self.loansCoreAddresses[_erc20TokenContract] = _address\r\n\r\n\r\n@external\r\ndef removeLoansCoreAddress(_erc20TokenContract: address):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert _erc20TokenContract != empty(address), \"erc20TokenAddr is the zero addr\"\r\n    assert self.loansCoreAddresses[_erc20TokenContract] != empty(address), \"address not found\"\r\n\r\n    log LoansCoreAddressRemoved(\r\n        _erc20TokenContract,\r\n        self.loansCoreAddresses[_erc20TokenContract],\r\n        _erc20TokenContract\r\n    )\r\n\r\n    self.loansCoreAddresses[_erc20TokenContract] = empty(address)\r\n\r\n\r\n@external\r\ndef addLendingPoolPeripheralAddress(_erc20TokenContract: address, _address: address):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert _address != empty(address), \"address is the zero addr\"\r\n    assert _erc20TokenContract != empty(address), \"erc20TokenAddr is the zero addr\"\r\n    assert self.lendingPoolPeripheralAddresses[_erc20TokenContract] != _address, \"new value is the same\"\r\n\r\n    log LendingPoolPeripheralAddressAdded(\r\n        _erc20TokenContract,\r\n        self.lendingPoolPeripheralAddresses[_erc20TokenContract],\r\n        _address,\r\n        _erc20TokenContract\r\n    )\r\n\r\n    self.lendingPoolPeripheralAddresses[_erc20TokenContract] = _address\r\n\r\n\r\n@external\r\ndef removeLendingPoolPeripheralAddress(_erc20TokenContract: address):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert _erc20TokenContract != empty(address), \"erc20TokenAddr is the zero addr\"\r\n    assert self.lendingPoolPeripheralAddresses[_erc20TokenContract] != empty(address), \"address not found\"\r\n\r\n    log LendingPoolPeripheralAddressRemoved(\r\n        _erc20TokenContract,\r\n        self.lendingPoolPeripheralAddresses[_erc20TokenContract],\r\n        _erc20TokenContract\r\n    )\r\n\r\n    self.lendingPoolPeripheralAddresses[_erc20TokenContract] = empty(address)\r\n\r\n\r\n@external\r\ndef setCollateralVaultPeripheralAddress(_address: address):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert _address != empty(address), \"address is the zero addr\"\r\n    assert self.collateralVaultPeripheralAddress != _address, \"new value is the same\"\r\n\r\n    log CollateralVaultPeripheralAddressSet(\r\n        self.collateralVaultPeripheralAddress,\r\n        _address\r\n    )\r\n\r\n    self.collateralVaultPeripheralAddress = _address\r\n\r\n\r\n@external\r\ndef setNFTXVaultFactoryAddress(_address: address):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert _address != empty(address), \"address is the zero addr\"\r\n    assert self.nftxVaultFactoryAddress != _address, \"new value is the same\"\r\n\r\n    log NFTXVaultFactoryAddressSet(\r\n        self.nftxVaultFactoryAddress,\r\n        _address\r\n    )\r\n\r\n    self.nftxVaultFactoryAddress = _address\r\n\r\n\r\n@external\r\ndef setNFTXMarketplaceZapAddress(_address: address):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert _address != empty(address), \"address is the zero addr\"\r\n    assert self.nftxMarketplaceZapAddress != _address, \"new value is the same\"\r\n\r\n    log NFTXMarketplaceZapAddressSet(\r\n        self.nftxMarketplaceZapAddress,\r\n        _address\r\n    )\r\n\r\n    self.nftxMarketplaceZapAddress = _address\r\n\r\n\r\n@external\r\ndef setSushiRouterAddress(_address: address):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert _address != empty(address), \"address is the zero addr\"\r\n    assert self.sushiRouterAddress != _address, \"new value is the same\"\r\n\r\n    log SushiRouterAddressSet(\r\n        self.sushiRouterAddress,\r\n        _address\r\n    )\r\n\r\n    self.sushiRouterAddress = _address\r\n\r\n\r\n@external\r\ndef setWrappedPunksAddress(_address: address):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert _address != empty(address), \"address is the zero addr\"\r\n\r\n    log WrappedPunksAddressSet(\r\n        self.wrappedPunksAddress,\r\n        _address\r\n    )\r\n\r\n    self.wrappedPunksAddress = _address\r\n\r\n\r\n@external\r\ndef setCryptoPunksAddress(_address: address):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert _address != empty(address), \"address is the zero addr\"\r\n\r\n    log CryptoPunksAddressSet(\r\n        self.cryptoPunksAddress,\r\n        _address\r\n    )\r\n\r\n    self.cryptoPunksAddress = _address\r\n\r\n\r\n@external\r\ndef setMaxPenaltyFee(_erc20TokenContract: address, _fee: uint256):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert _erc20TokenContract != empty(address), \"addr is the zero addr\"\r\n\r\n    log MaxPenaltyFeeSet(\r\n        _erc20TokenContract,\r\n        self.maxPenaltyFee[_erc20TokenContract],\r\n        _fee,\r\n        _erc20TokenContract\r\n    )\r\n\r\n    self.maxPenaltyFee[_erc20TokenContract] = _fee\r\n\r\n\r\n@external\r\ndef addLiquidation(\r\n    _borrower: address,\r\n    _loanId: uint256,\r\n    _erc20TokenContract: address\r\n):\r\n    borrowerLoan: Loan = ILoansCore(self.loansCoreAddresses[_erc20TokenContract]).getLoan(_borrower, _loanId)\r\n    assert borrowerLoan.defaulted, \"loan is not defaulted\"\r\n    assert not ILiquidationsCore(self.liquidationsCoreAddress).isLoanLiquidated(_borrower, self.loansCoreAddresses[_erc20TokenContract], _loanId), \"loan already liquidated\"\r\n\r\n    # APR from loan duration (maturity)\r\n    loanAPR: uint256 = self._computeLoanAPR(borrowerLoan.interest, borrowerLoan.maturity, borrowerLoan.startTime)\r\n\r\n    for collateral in borrowerLoan.collaterals:\r\n        assert ILiquidationsCore(self.liquidationsCoreAddress).getLiquidationStartTime(collateral.contractAddress, collateral.tokenId) == 0, \"liquidation already exists\"\r\n\r\n        principal: uint256 = collateral.amount\r\n        interestAmount: uint256 = self._computeLoanInterestAmount(principal, borrowerLoan.interest)\r\n\r\n        gracePeriodPrice: uint256 = self._computeNFTPrice(principal, interestAmount, self.maxPenaltyFee[_erc20TokenContract])\r\n        unwrappedCollateralAddress: address = self._unwrappedCollateralAddressIfWrapped(collateral.contractAddress)\r\n\r\n        lid: bytes32 = ILiquidationsCore(self.liquidationsCoreAddress).addLiquidation(\r\n            collateral.contractAddress,\r\n            collateral.tokenId,\r\n            block.timestamp,\r\n            block.timestamp + self.gracePeriodDuration,\r\n            block.timestamp + self.gracePeriodDuration + self.lenderPeriodDuration,\r\n            principal,\r\n            interestAmount,\r\n            loanAPR,\r\n            gracePeriodPrice,\r\n            gracePeriodPrice,\r\n            _borrower,\r\n            _loanId,\r\n            self.loansCoreAddresses[_erc20TokenContract],\r\n            _erc20TokenContract\r\n        )\r\n\r\n        log LiquidationAdded(\r\n            _erc20TokenContract,\r\n            collateral.contractAddress,\r\n            lid,\r\n            collateral.contractAddress,\r\n            collateral.tokenId,\r\n            _erc20TokenContract,\r\n            gracePeriodPrice,\r\n            gracePeriodPrice,\r\n            block.timestamp + self.gracePeriodDuration,\r\n            block.timestamp + self.gracePeriodDuration + self.lenderPeriodDuration,\r\n            self.loansCoreAddresses[_erc20TokenContract],\r\n            _loanId,\r\n            _borrower\r\n        )\r\n\r\n    ILiquidationsCore(self.liquidationsCoreAddress).addLoanToLiquidated(_borrower, self.loansCoreAddresses[_erc20TokenContract], _loanId)\r\n\r\n\r\n@payable\r\n@external\r\ndef payLoanLiquidationsGracePeriod(_loanId: uint256, _erc20TokenContract: address):\r\n    receivedAmount: uint256 = msg.value\r\n    ethPayment: bool = receivedAmount > 0\r\n\r\n    loan: Loan = ILoansCore(self.loansCoreAddresses[_erc20TokenContract]).getLoan(msg.sender, _loanId)\r\n    assert loan.defaulted, \"loan is not defaulted\"\r\n\r\n    if ethPayment:\r\n        log PaymentReceived(msg.sender, msg.sender, receivedAmount)\r\n    paidAmount: uint256 = 0\r\n\r\n    for collateral in loan.collaterals:\r\n        liquidation: Liquidation = ILiquidationsCore(self.liquidationsCoreAddress).getLiquidation(collateral.contractAddress, collateral.tokenId)\r\n\r\n        assert block.timestamp <= liquidation.gracePeriodMaturity, \"liquidation out of grace period\"\r\n        assert not ethPayment or receivedAmount >= paidAmount + liquidation.gracePeriodPrice, \"insufficient value received\"\r\n\r\n        ILiquidationsCore(self.liquidationsCoreAddress).removeLiquidation(collateral.contractAddress, collateral.tokenId)\r\n\r\n        log LiquidationRemoved(\r\n            liquidation.erc20TokenContract,\r\n            liquidation.collateralAddress,\r\n            liquidation.lid,\r\n            liquidation.collateralAddress,\r\n            liquidation.tokenId,\r\n            liquidation.erc20TokenContract,\r\n            liquidation.loansCoreContract,\r\n            liquidation.loanId,\r\n            liquidation.borrower\r\n        )\r\n\r\n        _lendingPoolPeripheral : address = self.lendingPoolPeripheralAddresses[liquidation.erc20TokenContract]\r\n\r\n        if ethPayment:\r\n            ILendingPoolPeripheral(_lendingPoolPeripheral).receiveFundsFromLiquidationEth(\r\n                liquidation.borrower,\r\n                liquidation.principal,\r\n                liquidation.gracePeriodPrice - liquidation.principal,\r\n                True,\r\n                liquidation.principal,\r\n                \"liquidation_grace_period\",\r\n                value=liquidation.gracePeriodPrice\r\n            )\r\n            log PaymentSent(_lendingPoolPeripheral, _lendingPoolPeripheral, liquidation.gracePeriodPrice)\r\n            paidAmount += liquidation.gracePeriodPrice\r\n\r\n        else:\r\n            ILendingPoolPeripheral(_lendingPoolPeripheral).receiveFundsFromLiquidation(\r\n                liquidation.borrower,\r\n                liquidation.principal,\r\n                liquidation.gracePeriodPrice - liquidation.principal,\r\n                True,\r\n                liquidation.principal,\r\n                \"liquidation_grace_period\"\r\n            )\r\n\r\n\r\n        ICollateralVaultPeripheral(self.collateralVaultPeripheralAddress).transferCollateralFromLiquidation(\r\n            msg.sender,\r\n            collateral.contractAddress,\r\n            collateral.tokenId\r\n        )\r\n\r\n        log NFTPurchased(\r\n            liquidation.erc20TokenContract,\r\n            collateral.contractAddress,\r\n            msg.sender,\r\n            liquidation.lid,\r\n            collateral.contractAddress,\r\n            collateral.tokenId,\r\n            liquidation.gracePeriodPrice,\r\n            msg.sender,\r\n            liquidation.erc20TokenContract,\r\n            liquidation.loansCoreContract,\r\n            \"GRACE_PERIOD\"\r\n        )\r\n\r\n    excessAmount: uint256 = receivedAmount - paidAmount\r\n    if excessAmount > 0:\r\n        send(msg.sender, excessAmount)\r\n        log PaymentSent(msg.sender, msg.sender,excessAmount)\r\n\r\n\r\n@payable\r\n@external\r\ndef buyNFTLenderPeriod(_collateralAddress: address, _tokenId: uint256):\r\n    liquidation: Liquidation = ILiquidationsCore(self.liquidationsCoreAddress).getLiquidation(_collateralAddress, _tokenId)\r\n    assert block.timestamp > liquidation.gracePeriodMaturity, \"liquidation in grace period\"\r\n    assert block.timestamp <= liquidation.lenderPeriodMaturity, \"liquidation out of lender period\"\r\n    assert ILendingPoolPeripheral(self.lendingPoolPeripheralAddresses[liquidation.erc20TokenContract]).lenderFunds(msg.sender).currentAmountDeposited > 0, \"msg.sender is not a lender\"\r\n\r\n    lendingPoolPeripheral: address = self.lendingPoolPeripheralAddresses[liquidation.erc20TokenContract]\r\n\r\n    receivedAmount: uint256 = msg.value\r\n    ethPayment: bool = receivedAmount > 0\r\n    if ethPayment:\r\n        assert receivedAmount >= liquidation.lenderPeriodPrice, \"insufficient value received\"\r\n        log PaymentReceived(msg.sender, msg.sender, receivedAmount)\r\n        ILendingPoolPeripheral(lendingPoolPeripheral).receiveFundsFromLiquidationEth(\r\n            msg.sender,\r\n            liquidation.principal,\r\n            liquidation.lenderPeriodPrice - liquidation.principal,\r\n            True,\r\n            liquidation.principal,\r\n            \"liquidation_lenders_period\",\r\n            value=liquidation.lenderPeriodPrice\r\n        )\r\n        log PaymentSent(lendingPoolPeripheral, lendingPoolPeripheral, liquidation.lenderPeriodPrice)\r\n    else:\r\n        ILendingPoolPeripheral(lendingPoolPeripheral).receiveFundsFromLiquidation(\r\n            msg.sender,\r\n            liquidation.principal,\r\n            liquidation.lenderPeriodPrice - liquidation.principal,\r\n            True,\r\n            liquidation.principal,\r\n            \"liquidation_lenders_period\"\r\n        )\r\n\r\n    self._removeLiquidationAndTransfer(_collateralAddress, _tokenId, liquidation, \"LENDER_PERIOD\")\r\n\r\n    if ethPayment:\r\n        excessAmount: uint256 = receivedAmount - liquidation.lenderPeriodPrice\r\n        if excessAmount > 0:\r\n            send(msg.sender, excessAmount)\r\n            log PaymentSent(msg.sender, msg.sender,excessAmount)\r\n\r\n\r\n@external\r\ndef liquidateNFTX(_collateralAddress: address, _tokenId: uint256):\r\n    assert msg.sender == self.admin, \"msg.sender is not the admin\"\r\n\r\n    liquidation: Liquidation = ILiquidationsCore(self.liquidationsCoreAddress).getLiquidation(_collateralAddress, _tokenId)\r\n    assert block.timestamp > liquidation.lenderPeriodMaturity, \"liquidation within lender period\"\r\n\r\n    ILiquidationsCore(self.liquidationsCoreAddress).removeLiquidation(_collateralAddress, _tokenId)\r\n\r\n    log LiquidationRemoved(\r\n        liquidation.erc20TokenContract,\r\n        liquidation.collateralAddress,\r\n        liquidation.lid,\r\n        liquidation.collateralAddress,\r\n        liquidation.tokenId,\r\n        liquidation.erc20TokenContract,\r\n        liquidation.loansCoreContract,\r\n        liquidation.loanId,\r\n        liquidation.borrower\r\n    )\r\n\r\n    unwrappedCollateralAddress: address = self._unwrappedCollateralAddressIfWrapped(_collateralAddress)\r\n    autoLiquidationPrice: uint256 = self._getAutoLiquidationPrice(unwrappedCollateralAddress, _tokenId)\r\n    vault: address = ICollateralVaultPeripheral(self.collateralVaultPeripheralAddress).vaultAddress(_collateralAddress, _tokenId)\r\n\r\n    assert autoLiquidationPrice > 0, \"NFTX liq price is 0 or none\"\r\n\r\n    ICollateralVaultPeripheral(self.collateralVaultPeripheralAddress).transferCollateralFromLiquidation(self, _collateralAddress, _tokenId)\r\n\r\n    wrappedCollateral: bool = unwrappedCollateralAddress != _collateralAddress\r\n\r\n    if wrappedCollateral:\r\n        self._unwrapCollateral(_collateralAddress, _tokenId)\r\n\r\n\r\n    if wrappedCollateral:\r\n        if unwrappedCollateralAddress == self.cryptoPunksAddress:\r\n            CryptoPunksMarket(unwrappedCollateralAddress).offerPunkForSaleToAddress(_tokenId, 0, self.nftxMarketplaceZapAddress)\r\n        else:\r\n            raise \"Unsupported collateral\"\r\n\r\n    elif IVault(vault).vaultName() == \"erc721\":\r\n        IERC721(_collateralAddress).approve(self.nftxMarketplaceZapAddress, _tokenId)\r\n\r\n    elif IVault(vault).vaultName() == \"cryptopunks\":\r\n        CryptoPunksMarket(_collateralAddress).offerPunkForSaleToAddress(_tokenId, 0, self.nftxMarketplaceZapAddress)\r\n\r\n    else:\r\n        raise \"Unsupported collateral\"\r\n\r\n\r\n    INFTXMarketplaceZap(self.nftxMarketplaceZapAddress).mintAndSell721WETH(\r\n        self._getNFTXVaultIdFromCollateralAddr(unwrappedCollateralAddress),\r\n        [_tokenId],\r\n        autoLiquidationPrice,\r\n        [self._getNFTXVaultAddrFromCollateralAddr(unwrappedCollateralAddress), wethAddress],\r\n        self\r\n    )\r\n\r\n    if liquidation.erc20TokenContract != wethAddress:\r\n        convertedAutoLiquidationPrice: uint256 = self._getConvertedAutoLiquidationPrice(autoLiquidationPrice, liquidation.erc20TokenContract)\r\n        autoLiquidationPrice = self._swapWETHForERC20Token(autoLiquidationPrice, convertedAutoLiquidationPrice, liquidation.erc20TokenContract)\r\n\r\n    lp_peripheral_address: address = self.lendingPoolPeripheralAddresses[liquidation.erc20TokenContract]\r\n    lp_core_address: address = ILendingPoolPeripheral(lp_peripheral_address).lendingPoolCoreContract()\r\n\r\n    IERC20(liquidation.erc20TokenContract).approve(\r\n        lp_core_address,\r\n        autoLiquidationPrice\r\n    )\r\n\r\n    principal: uint256 = liquidation.principal\r\n    interestAmount: uint256 = 0\r\n    distributeToProtocol: bool = True\r\n\r\n    if autoLiquidationPrice < liquidation.principal: # LP loss scenario\r\n        principal = autoLiquidationPrice\r\n    elif autoLiquidationPrice > liquidation.principal:\r\n        interestAmount = autoLiquidationPrice - liquidation.principal\r\n        protocolFeesShare: uint256 = ILendingPoolPeripheral(lp_peripheral_address).protocolFeesShare()\r\n        if interestAmount <= liquidation.interestAmount * (10000 - protocolFeesShare) / 10000: # LP interest less than expected and/or protocol interest loss\r\n            distributeToProtocol = False\r\n\r\n    ILendingPoolPeripheral(lp_peripheral_address).receiveFundsFromLiquidation(\r\n        self,\r\n        principal,\r\n        interestAmount,\r\n        distributeToProtocol,\r\n        liquidation.principal,\r\n        \"liquidation_nftx\"\r\n    )\r\n\r\n    log NFTPurchased(\r\n        liquidation.erc20TokenContract,\r\n        _collateralAddress,\r\n        self.nftxMarketplaceZapAddress,\r\n        liquidation.lid,\r\n        _collateralAddress,\r\n        _tokenId,\r\n        autoLiquidationPrice,\r\n        self.nftxMarketplaceZapAddress,\r\n        liquidation.erc20TokenContract,\r\n        liquidation.loansCoreContract,\r\n        \"BACKSTOP_PERIOD_NFTX\"\r\n    )\r\n\r\n\r\n@external\r\ndef adminWithdrawal(_walletAddress: address, _collateralAddress: address, _tokenId: uint256):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n\r\n    liquidation: Liquidation = ILiquidationsCore(self.liquidationsCoreAddress).getLiquidation(_collateralAddress, _tokenId)\r\n    assert block.timestamp > liquidation.lenderPeriodMaturity, \"liq not out of lenders period\"\r\n\r\n    ILiquidationsCore(self.liquidationsCoreAddress).removeLiquidation(_collateralAddress, _tokenId)\r\n\r\n    log LiquidationRemoved(\r\n        liquidation.erc20TokenContract,\r\n        liquidation.collateralAddress,\r\n        liquidation.lid,\r\n        liquidation.collateralAddress,\r\n        liquidation.tokenId,\r\n        liquidation.erc20TokenContract,\r\n        liquidation.loansCoreContract,\r\n        liquidation.loanId,\r\n        liquidation.borrower\r\n    )\r\n\r\n    ICollateralVaultPeripheral(self.collateralVaultPeripheralAddress).transferCollateralFromLiquidation(\r\n        _walletAddress,\r\n        _collateralAddress,\r\n        _tokenId\r\n    )\r\n\r\n    log AdminWithdrawal(\r\n        _collateralAddress,\r\n        liquidation.lid,\r\n        _collateralAddress,\r\n        _tokenId,\r\n        _walletAddress\r\n    )\r\n\r\n@external\r\ndef adminLiquidation(_principal: uint256, _interestAmount: uint256, _loanPrincipal: uint256, _liquidationId: bytes32, _erc20TokenContract: address, _collateralAddress: address, _tokenId: uint256):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert not ICollateralVaultPeripheral(self.collateralVaultPeripheralAddress).isCollateralInVault(_collateralAddress, _tokenId), \"collateral still owned by vault\"\r\n\r\n    liquidation: Liquidation = ILiquidationsCore(self.liquidationsCoreAddress).getLiquidation(_collateralAddress, _tokenId)\r\n    assert liquidation.lid == empty(bytes32), \"collateral still in liquidation\"\r\n\r\n    ILendingPoolPeripheral(self.lendingPoolPeripheralAddresses[_erc20TokenContract]).receiveFundsFromLiquidation(\r\n        msg.sender,\r\n        _principal,\r\n        _interestAmount,\r\n        True,\r\n        _loanPrincipal,\r\n        \"admin_liquidation\"\r\n    )\r\n\r\n    log NFTPurchased(\r\n        _erc20TokenContract,\r\n        _collateralAddress,\r\n        msg.sender,\r\n        _liquidationId,\r\n        _collateralAddress,\r\n        _tokenId,\r\n        _principal + _interestAmount,\r\n        msg.sender,\r\n        _erc20TokenContract,\r\n        self.loansCoreAddresses[_erc20TokenContract],\r\n        \"BACKSTOP_PERIOD_ADMIN\"\r\n    )\r\n\r\n@external\r\ndef storeERC721CollateralToVault(_collateralAddress: address, _tokenId: uint256):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert IERC721(_collateralAddress).ownerOf(_tokenId) == self, \"collateral not owned by contract\"\r\n\r\n    vault: address = ICollateralVaultPeripheral(self.collateralVaultPeripheralAddress).vaultAddress(_collateralAddress, _tokenId)\r\n    IERC721(_collateralAddress).safeTransferFrom(self, vault, _tokenId, b\"\")","ABI":"[{\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"ownerIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"proposedOwnerIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"owner\",\"type\":\"address\",\"indexed\":false},{\"name\":\"proposedOwner\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"OwnerProposed\",\"inputs\":[{\"name\":\"ownerIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"proposedOwnerIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"owner\",\"type\":\"address\",\"indexed\":false},{\"name\":\"proposedOwner\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"GracePeriodDurationChanged\",\"inputs\":[{\"name\":\"currentValue\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"newValue\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"LendersPeriodDurationChanged\",\"inputs\":[{\"name\":\"currentValue\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"newValue\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"AuctionPeriodDurationChanged\",\"inputs\":[{\"name\":\"currentValue\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"newValue\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"LiquidationsCoreAddressSet\",\"inputs\":[{\"name\":\"currentValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"newValue\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"LoansCoreAddressAdded\",\"inputs\":[{\"name\":\"erc20TokenContractIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"currentValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"newValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"LoansCoreAddressRemoved\",\"inputs\":[{\"name\":\"erc20TokenContractIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"currentValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"LendingPoolPeripheralAddressAdded\",\"inputs\":[{\"name\":\"erc20TokenContractIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"currentValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"newValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"LendingPoolPeripheralAddressRemoved\",\"inputs\":[{\"name\":\"erc20TokenContractIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"currentValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"CollateralVaultPeripheralAddressSet\",\"inputs\":[{\"name\":\"currentValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"newValue\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"NFTXVaultFactoryAddressSet\",\"inputs\":[{\"name\":\"currentValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"newValue\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"NFTXMarketplaceZapAddressSet\",\"inputs\":[{\"name\":\"currentValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"newValue\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SushiRouterAddressSet\",\"inputs\":[{\"name\":\"currentValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"newValue\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"WrappedPunksAddressSet\",\"inputs\":[{\"name\":\"currentValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"newValue\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"CryptoPunksAddressSet\",\"inputs\":[{\"name\":\"currentValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"newValue\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"MaxPenaltyFeeSet\",\"inputs\":[{\"name\":\"erc20TokenContractIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"currentValue\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"newValue\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"LiquidationAdded\",\"inputs\":[{\"name\":\"erc20TokenContractIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"collateralAddressIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"liquidationId\",\"type\":\"bytes32\",\"indexed\":false},{\"name\":\"collateralAddress\",\"type\":\"address\",\"indexed\":false},{\"name\":\"tokenId\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false},{\"name\":\"gracePeriodPrice\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"lenderPeriodPrice\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"gracePeriodMaturity\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"lenderPeriodMaturity\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"loansCoreContract\",\"type\":\"address\",\"indexed\":false},{\"name\":\"loanId\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"borrower\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"LiquidationRemoved\",\"inputs\":[{\"name\":\"erc20TokenContractIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"collateralAddressIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"liquidationId\",\"type\":\"bytes32\",\"indexed\":false},{\"name\":\"collateralAddress\",\"type\":\"address\",\"indexed\":false},{\"name\":\"tokenId\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false},{\"name\":\"loansCoreContract\",\"type\":\"address\",\"indexed\":false},{\"name\":\"loanId\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"borrower\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"NFTPurchased\",\"inputs\":[{\"name\":\"erc20TokenContractIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"collateralAddressIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"buyerAddressIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"liquidationId\",\"type\":\"bytes32\",\"indexed\":false},{\"name\":\"collateralAddress\",\"type\":\"address\",\"indexed\":false},{\"name\":\"tokenId\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"buyerAddress\",\"type\":\"address\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false},{\"name\":\"loansCoreContract\",\"type\":\"address\",\"indexed\":false},{\"name\":\"method\",\"type\":\"string\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"AdminWithdrawal\",\"inputs\":[{\"name\":\"collateralAddressIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"liquidationId\",\"type\":\"bytes32\",\"indexed\":false},{\"name\":\"collateralAddress\",\"type\":\"address\",\"indexed\":false},{\"name\":\"tokenId\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"wallet\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"PaymentSent\",\"inputs\":[{\"name\":\"walletIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"wallet\",\"type\":\"address\",\"indexed\":false},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"PaymentReceived\",\"inputs\":[{\"name\":\"walletIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"wallet\",\"type\":\"address\",\"indexed\":false},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"onERC721Received\",\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getLiquidation\",\"inputs\":[{\"name\":\"_collateralAddress\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"name\":\"lid\",\"type\":\"bytes32\"},{\"name\":\"collateralAddress\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"gracePeriodMaturity\",\"type\":\"uint256\"},{\"name\":\"lenderPeriodMaturity\",\"type\":\"uint256\"},{\"name\":\"principal\",\"type\":\"uint256\"},{\"name\":\"interestAmount\",\"type\":\"uint256\"},{\"name\":\"apr\",\"type\":\"uint256\"},{\"name\":\"gracePeriodPrice\",\"type\":\"uint256\"},{\"name\":\"lenderPeriodPrice\",\"type\":\"uint256\"},{\"name\":\"borrower\",\"type\":\"address\"},{\"name\":\"loanId\",\"type\":\"uint256\"},{\"name\":\"loansCoreContract\",\"type\":\"address\"},{\"name\":\"erc20TokenContract\",\"type\":\"address\"},{\"name\":\"inAuction\",\"type\":\"bool\"}]}]},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_liquidationsCoreAddress\",\"type\":\"address\"},{\"name\":\"_gracePeriodDuration\",\"type\":\"uint256\"},{\"name\":\"_lenderPeriodDuration\",\"type\":\"uint256\"},{\"name\":\"_auctionPeriodDuration\",\"type\":\"uint256\"},{\"name\":\"_wethAddress\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"proposeOwner\",\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claimOwnership\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setGracePeriodDuration\",\"inputs\":[{\"name\":\"_duration\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setLendersPeriodDuration\",\"inputs\":[{\"name\":\"_duration\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setAuctionPeriodDuration\",\"inputs\":[{\"name\":\"_duration\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setLiquidationsCoreAddress\",\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"addLoansCoreAddress\",\"inputs\":[{\"name\":\"_erc20TokenContract\",\"type\":\"address\"},{\"name\":\"_address\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"removeLoansCoreAddress\",\"inputs\":[{\"name\":\"_erc20TokenContract\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"addLendingPoolPeripheralAddress\",\"inputs\":[{\"name\":\"_erc20TokenContract\",\"type\":\"address\"},{\"name\":\"_address\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"removeLendingPoolPeripheralAddress\",\"inputs\":[{\"name\":\"_erc20TokenContract\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setCollateralVaultPeripheralAddress\",\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setNFTXVaultFactoryAddress\",\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setNFTXMarketplaceZapAddress\",\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setSushiRouterAddress\",\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setWrappedPunksAddress\",\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setCryptoPunksAddress\",\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setMaxPenaltyFee\",\"inputs\":[{\"name\":\"_erc20TokenContract\",\"type\":\"address\"},{\"name\":\"_fee\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"addLiquidation\",\"inputs\":[{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_loanId\",\"type\":\"uint256\"},{\"name\":\"_erc20TokenContract\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"payLoanLiquidationsGracePeriod\",\"inputs\":[{\"name\":\"_loanId\",\"type\":\"uint256\"},{\"name\":\"_erc20TokenContract\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"buyNFTLenderPeriod\",\"inputs\":[{\"name\":\"_collateralAddress\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"liquidateNFTX\",\"inputs\":[{\"name\":\"_collateralAddress\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"adminWithdrawal\",\"inputs\":[{\"name\":\"_walletAddress\",\"type\":\"address\"},{\"name\":\"_collateralAddress\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"adminLiquidation\",\"inputs\":[{\"name\":\"_principal\",\"type\":\"uint256\"},{\"name\":\"_interestAmount\",\"type\":\"uint256\"},{\"name\":\"_loanPrincipal\",\"type\":\"uint256\"},{\"name\":\"_liquidationId\",\"type\":\"bytes32\"},{\"name\":\"_erc20TokenContract\",\"type\":\"address\"},{\"name\":\"_collateralAddress\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"storeERC721CollateralToVault\",\"inputs\":[{\"name\":\"_collateralAddress\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admin\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"proposedOwner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"gracePeriodDuration\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lenderPeriodDuration\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"auctionPeriodDuration\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"liquidationsCoreAddress\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"loansCoreAddresses\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lendingPoolPeripheralAddresses\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"collateralVaultPeripheralAddress\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"nftxVaultFactoryAddress\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"nftxMarketplaceZapAddress\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"sushiRouterAddress\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"wrappedPunksAddress\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"cryptoPunksAddress\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"maxPenaltyFee\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]}]","ContractName":"LiquidationsPeripheral","CompilerVersion":"vyper:0.3.9","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"00000000000000000000000061be8ba3a56da7a57af6807e78928529698eff34000000000000000000000000000000000000000000000000000000000002a300000000000000000000000000000000000000000000000000000000000002a300000000000000000000000000000000000000000000000000000000000002a300000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}