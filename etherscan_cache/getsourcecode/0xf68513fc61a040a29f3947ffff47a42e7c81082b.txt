{"status":"1","message":"OK","result":[{"SourceCode":"# @version ^0.3.9\r\n\r\ninterface ERC20:\r\n  def name() -> String[64]: view\r\n  def symbol() -> String[8]: view\r\n  def decimals() -> uint8: view\r\n  def totalSupply() -> uint256: view\r\n  def balanceOf(_owner: address) -> uint256: view\r\n  def transfer(_to: address, _value: uint256) -> bool: nonpayable\r\n  def transferFrom(_from: address, _to: address, _value: uint256) -> bool: nonpayable\r\n  def approve(_spender: address, _value: uint256) -> bool: nonpayable\r\n  def allowance(_owner: address, _spender: address) -> uint256: view\r\n\r\nevent Transfer:\r\n  _from: indexed(address)\r\n  _to: indexed(address)\r\n  _value: uint256\r\n\r\nevent Approval:\r\n  _owner: indexed(address)\r\n  _spender: indexed(address)\r\n  _value: uint256\r\n\r\ninterface Minter:\r\n  def newMinter() -> address: view\r\n\r\nminter: Minter\r\n\r\n@external\r\ndef __init__(m: address):\r\n  self.minter = Minter(m)\r\n\r\n@external\r\ndef setMinter():\r\n  m: address = self.minter.newMinter()\r\n  if m != empty(address):\r\n    self.minter = Minter(m)\r\n\r\n# ERC20 functions\r\n\r\nname: public(constant(String[64])) = \"Lidont: Move Stake into the Vampire\"\r\nsymbol: public(constant(String[8])) = \"LIDONT\"\r\ndecimals: public(constant(uint8)) = 18\r\ntotalSupply: public(uint256)\r\nbalanceOf: public(HashMap[address, uint256])\r\nallowance: public(HashMap[address, HashMap[address, uint256]])\r\n\r\n@internal\r\ndef _transfer(_from: address, _to: address, _amount: uint256) -> bool:\r\n  balanceFrom: uint256 = self.balanceOf[_from]\r\n  if balanceFrom < _amount:\r\n    return False\r\n  self.balanceOf[_from] = unsafe_sub(balanceFrom, _amount)\r\n  self.balanceOf[_to] = self.balanceOf[_to] + _amount\r\n  log Transfer(_from, _to, _amount)\r\n  return True\r\n\r\n@external\r\ndef transfer(_to: address, _value: uint256) -> bool:\r\n  return self._transfer(msg.sender, _to, _value)\r\n\r\n@internal\r\ndef _approve(_owner: address, _spender: address, _value: uint256) -> bool:\r\n  self.allowance[_owner][_spender] = _value\r\n  log Approval(_owner, _spender, _value)\r\n  return True\r\n\r\n@external\r\ndef approve(_spender: address, _value: uint256) -> bool:\r\n  return self._approve(msg.sender, _spender, _value)\r\n\r\n@external\r\ndef transferFrom(_from: address, _to: address, _value: uint256) -> bool:\r\n  allowanceFrom: uint256 = self.allowance[_from][_to]\r\n  if allowanceFrom < _value:\r\n    return False\r\n  transferred: bool = self._transfer(_from, _to, _value)\r\n  if transferred:\r\n    self.allowance[_from][_to] = unsafe_sub(allowanceFrom, _value)\r\n  return transferred\r\n\r\nevent Mint:\r\n  amount: indexed(uint256)\r\n  recipient: indexed(address)\r\n\r\n@external\r\ndef mint(amount: uint256, recipient: address):\r\n  assert msg.sender == self.minter.address, \"auth\"\r\n  self.totalSupply += amount\r\n  self.balanceOf[empty(address)] += amount\r\n  self.allowance[empty(address)][recipient] += amount\r\n  log Mint(amount, recipient)","ABI":"[{\"name\":\"Transfer\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_to\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Approval\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_spender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Mint\",\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":true},{\"name\":\"recipient\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"m\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setMinter\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transfer\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferFrom\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"mint\",\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"decimals\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"allowance\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"},{\"name\":\"arg1\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.3.10","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000272347f941fb5f35854d8f5dbdcedef1a515db41","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":""}]}