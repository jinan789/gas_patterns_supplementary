{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.3.10\r\n\"\"\"\r\n@title OneWayLendingFactory\r\n@notice Factory of non-rehypothecated lending vaults: collateral is not being lent out.\r\n       Although Vault.vy allows both, we should have this simpler version and rehypothecating version.\r\n@author Curve.fi\r\n@license Copyright (c) Curve.Fi, 2020-2024 - all rights reserved\r\n\"\"\"\r\nfrom vyper.interfaces import ERC20\r\n\r\ninterface Vault:\r\n    def initialize(\r\n        amm_impl: address,\r\n        controller_impl: address,\r\n        borrowed_token: address,\r\n        collateral_token: address,\r\n        A: uint256,\r\n        fee: uint256,\r\n        price_oracle: address,\r\n        monetary_policy: address,\r\n        loan_discount: uint256,\r\n        liquidation_discount: uint256\r\n    ) -> (address, address): nonpayable\r\n    def amm() -> address: view\r\n    def controller() -> address: view\r\n    def borrowed_token() -> address: view\r\n    def collateral_token() -> address: view\r\n    def price_oracle() -> address: view\r\n\r\ninterface Controller:\r\n    def monetary_policy() -> address: view\r\n\r\ninterface AMM:\r\n    def get_dy(i: uint256, j: uint256, in_amount: uint256) -> uint256: view\r\n    def get_dx(i: uint256, j: uint256, out_amount: uint256) -> uint256: view\r\n    def get_dydx(i: uint256, j: uint256, out_amount: uint256) -> (uint256, uint256): view\r\n    def exchange(i: uint256, j: uint256, in_amount: uint256, min_amount: uint256, _for: address) -> uint256[2]: nonpayable\r\n    def exchange_dy(i: uint256, j: uint256, out_amount: uint256, max_amount: uint256, _for: address) -> uint256[2]: nonpayable\r\n\r\ninterface Pool:\r\n    def price_oracle(i: uint256 = 0) -> uint256: view  # Universal method!\r\n    def coins(i: uint256) -> address: view\r\n\r\n\r\nevent SetImplementations:\r\n    amm: address\r\n    controller: address\r\n    vault: address\r\n    price_oracle: address\r\n    monetary_policy: address\r\n    gauge: address\r\n\r\nevent SetDefaultRates:\r\n    min_rate: uint256\r\n    max_rate: uint256\r\n\r\nevent SetAdmin:\r\n    admin: address\r\n\r\nevent NewVault:\r\n    id: indexed(uint256)\r\n    collateral_token: indexed(address)\r\n    borrowed_token: indexed(address)\r\n    vault: address\r\n    controller: address\r\n    amm: address\r\n    price_oracle: address\r\n    monetary_policy: address\r\n\r\nevent LiquidityGaugeDeployed:\r\n    vault: address\r\n    gauge: address\r\n\r\n\r\nSTABLECOIN: public(immutable(address))\r\n\r\n# These are limits for default borrow rates, NOT actual min and max rates.\r\n# Even governance cannot go beyond these rates before a new code is shipped\r\nMIN_RATE: public(constant(uint256)) = 10**15 / (365 * 86400)  # 0.1%\r\nMAX_RATE: public(constant(uint256)) = 10**19 / (365 * 86400)  # 1000%\r\n\r\n\r\n# Implementations which can be changed by governance\r\namm_impl: public(address)\r\ncontroller_impl: public(address)\r\nvault_impl: public(address)\r\npool_price_oracle_impl: public(address)\r\nmonetary_policy_impl: public(address)\r\ngauge_impl: public(address)\r\n\r\n# Actual min/max borrow rates when creating new markets\r\n# for example, 0.5% -> 50% is a good choice\r\nmin_default_borrow_rate: public(uint256)\r\nmax_default_borrow_rate: public(uint256)\r\n\r\n# Admin is supposed to be the DAO\r\nadmin: public(address)\r\n\r\n# Vaults can only be created but not removed\r\nvaults: public(Vault[10**18])\r\namms: public(AMM[10**18])\r\n_vaults_index: HashMap[Vault, uint256]\r\nmarket_count: public(uint256)\r\n\r\n# Index to find vaults by a non-crvUSD token\r\ntoken_to_vaults: public(HashMap[address, Vault[10**18]])\r\ntoken_market_count: public(HashMap[address, uint256])\r\n\r\ngauges: public(address[10**18])\r\nnames: public(HashMap[uint256, String[64]])\r\n\r\n\r\n@external\r\ndef __init__(\r\n        stablecoin: address,\r\n        amm: address,\r\n        controller: address,\r\n        vault: address,\r\n        pool_price_oracle: address,\r\n        monetary_policy: address,\r\n        gauge: address,\r\n        admin: address):\r\n    \"\"\"\r\n    @notice Factory which creates one-way lending vaults (e.g. collateral is non-borrowable)\r\n    @param stablecoin Address of crvUSD. Only crvUSD-containing markets are allowed\r\n    @param amm Address of AMM implementation\r\n    @param controller Address of Controller implementation\r\n    @param pool_price_oracle Address of implementation for price oracle factory (prices from pools)\r\n    @param monetary_policy Address for implementation of monetary policy\r\n    @param gauge Address for gauge implementation\r\n    @param admin Admin address (DAO)\r\n    \"\"\"\r\n    STABLECOIN = stablecoin\r\n    self.amm_impl = amm\r\n    self.controller_impl = controller\r\n    self.vault_impl = vault\r\n    self.pool_price_oracle_impl = pool_price_oracle\r\n    self.monetary_policy_impl = monetary_policy\r\n    self.gauge_impl = gauge\r\n\r\n    self.min_default_borrow_rate = 5 * 10**15 / (365 * 86400)\r\n    self.max_default_borrow_rate = 50 * 10**16 / (365 * 86400)\r\n\r\n    self.admin = admin\r\n\r\n\r\n@internal\r\ndef _create(\r\n        borrowed_token: address,\r\n        collateral_token: address,\r\n        A: uint256,\r\n        fee: uint256,\r\n        loan_discount: uint256,\r\n        liquidation_discount: uint256,\r\n        price_oracle: address,\r\n        name: String[64],\r\n        min_borrow_rate: uint256,\r\n        max_borrow_rate: uint256\r\n    ) -> Vault:\r\n    \"\"\"\r\n    @notice Internal method for creation of the vault\r\n    \"\"\"\r\n    assert borrowed_token != collateral_token, \"Same token\"\r\n    assert borrowed_token == STABLECOIN or collateral_token == STABLECOIN\r\n    vault: Vault = Vault(create_minimal_proxy_to(self.vault_impl))\r\n\r\n    min_rate: uint256 = self.min_default_borrow_rate\r\n    max_rate: uint256 = self.max_default_borrow_rate\r\n    if min_borrow_rate > 0:\r\n        min_rate = min_borrow_rate\r\n    if max_borrow_rate > 0:\r\n        max_rate = max_borrow_rate\r\n    assert min_rate >= MIN_RATE and max_rate <= MAX_RATE and min_rate <= max_rate, \"Wrong rates\"\r\n    monetary_policy: address = create_from_blueprint(\r\n        self.monetary_policy_impl, borrowed_token, min_rate, max_rate, code_offset=3)\r\n\r\n    controller: address = empty(address)\r\n    amm: address = empty(address)\r\n    controller, amm = vault.initialize(\r\n        self.amm_impl, self.controller_impl,\r\n        borrowed_token, collateral_token,\r\n        A, fee,\r\n        price_oracle,\r\n        monetary_policy,\r\n        loan_discount, liquidation_discount\r\n    )\r\n\r\n    market_count: uint256 = self.market_count\r\n    log NewVault(market_count, collateral_token, borrowed_token, vault.address, controller, amm, price_oracle, monetary_policy)\r\n    self.vaults[market_count] = vault\r\n    self.amms[market_count] = AMM(amm)\r\n    self._vaults_index[vault] = market_count + 2**128\r\n    self.names[market_count] = name\r\n\r\n    self.market_count = market_count + 1\r\n\r\n    token: address = borrowed_token\r\n    if borrowed_token == STABLECOIN:\r\n        token = collateral_token\r\n    market_count = self.token_market_count[token]\r\n    self.token_to_vaults[token][market_count] = vault\r\n    self.token_market_count[token] = market_count + 1\r\n\r\n    ERC20(borrowed_token).approve(amm, max_value(uint256))\r\n    ERC20(collateral_token).approve(amm, max_value(uint256))\r\n\r\n    return vault\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef create(\r\n        borrowed_token: address,\r\n        collateral_token: address,\r\n        A: uint256,\r\n        fee: uint256,\r\n        loan_discount: uint256,\r\n        liquidation_discount: uint256,\r\n        price_oracle: address,\r\n        name: String[64],\r\n        min_borrow_rate: uint256 = 0,\r\n        max_borrow_rate: uint256 = 0\r\n    ) -> Vault:\r\n    \"\"\"\r\n    @notice Creation of the vault using user-supplied price oracle contract\r\n    @param borrowed_token Token which is being borrowed\r\n    @param collateral_token Token used for collateral\r\n    @param A Amplification coefficient: band size is ~1/A\r\n    @param fee Fee for swaps in AMM (for ETH markets found to be 0.6%)\r\n    @param loan_discount Maximum discount. LTV = sqrt(((A - 1) / A) ** 4) - loan_discount\r\n    @param liquidation_discount Liquidation discount. LT = sqrt(((A - 1) / A) ** 4) - liquidation_discount\r\n    @param price_oracle Custom price oracle contract\r\n    @param name Human-readable market name\r\n    @param min_borrow_rate Custom minimum borrow rate (otherwise min_default_borrow_rate)\r\n    @param max_borrow_rate Custom maximum borrow rate (otherwise max_default_borrow_rate)\r\n    \"\"\"\r\n    return self._create(borrowed_token, collateral_token, A, fee, loan_discount, liquidation_discount,\r\n                        price_oracle, name, min_borrow_rate, max_borrow_rate)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef create_from_pool(\r\n        borrowed_token: address,\r\n        collateral_token: address,\r\n        A: uint256,\r\n        fee: uint256,\r\n        loan_discount: uint256,\r\n        liquidation_discount: uint256,\r\n        pool: address,\r\n        name: String[64],\r\n        min_borrow_rate: uint256 = 0,\r\n        max_borrow_rate: uint256 = 0\r\n    ) -> Vault:\r\n    \"\"\"\r\n    @notice Creation of the vault using existing oraclized Curve pool as a price oracle\r\n    @param borrowed_token Token which is being borrowed\r\n    @param collateral_token Token used for collateral\r\n    @param A Amplification coefficient: band size is ~1/A\r\n    @param fee Fee for swaps in AMM (for ETH markets found to be 0.6%)\r\n    @param loan_discount Maximum discount. LTV = sqrt(((A - 1) / A) ** 4) - loan_discount\r\n    @param liquidation_discount Liquidation discount. LT = sqrt(((A - 1) / A) ** 4) - liquidation_discount\r\n    @param pool Curve tricrypto-ng, twocrypto-ng or stableswap-ng pool which has non-manipulatable price_oracle().\r\n                Must contain both collateral_token and borrowed_token.\r\n    @param name Human-readable market name\r\n    @param min_borrow_rate Custom minimum borrow rate (otherwise min_default_borrow_rate)\r\n    @param max_borrow_rate Custom maximum borrow rate (otherwise max_default_borrow_rate)\r\n    \"\"\"\r\n    # Find coins in the pool\r\n    borrowed_ix: uint256 = 100\r\n    collateral_ix: uint256 = 100\r\n    N: uint256 = 0\r\n    for i in range(10):\r\n        success: bool = False\r\n        res: Bytes[32] = empty(Bytes[32])\r\n        success, res = raw_call(\r\n            pool,\r\n            _abi_encode(i, method_id=method_id(\"coins(uint256)\")),\r\n            max_outsize=32, is_static_call=True, revert_on_failure=False)\r\n        coin: address = convert(res, address)\r\n        if not success or coin == empty(address):\r\n            break\r\n        N += 1\r\n        if coin == borrowed_token:\r\n            borrowed_ix = i\r\n        elif coin == collateral_token:\r\n            collateral_ix = i\r\n    if collateral_ix == 100 or borrowed_ix == 100:\r\n        raise \"Tokens not in pool\"\r\n    price_oracle: address = create_from_blueprint(\r\n        self.pool_price_oracle_impl, pool, N, borrowed_ix, collateral_ix, code_offset=3)\r\n\r\n    return self._create(borrowed_token, collateral_token, A, fee, loan_discount, liquidation_discount,\r\n                        price_oracle, name, min_borrow_rate, max_borrow_rate)\r\n\r\n\r\n@view\r\n@external\r\ndef controllers(n: uint256) -> address:\r\n    return self.vaults[n].controller()\r\n\r\n\r\n@view\r\n@external\r\ndef borrowed_tokens(n: uint256) -> address:\r\n    return self.vaults[n].borrowed_token()\r\n\r\n\r\n@view\r\n@external\r\ndef collateral_tokens(n: uint256) -> address:\r\n    return self.vaults[n].collateral_token()\r\n\r\n\r\n@view\r\n@external\r\ndef price_oracles(n: uint256) -> address:\r\n    return self.vaults[n].price_oracle()\r\n\r\n\r\n@view\r\n@external\r\ndef monetary_policies(n: uint256) -> address:\r\n    return Controller(self.vaults[n].controller()).monetary_policy()\r\n\r\n\r\n@view\r\n@external\r\ndef vaults_index(vault: Vault) -> uint256:\r\n    return self._vaults_index[vault] - 2**128\r\n\r\n\r\n@external\r\ndef deploy_gauge(_vault: Vault) -> address:\r\n    \"\"\"\r\n    @notice Deploy a liquidity gauge for a vault\r\n    @param _vault Vault address to deploy a gauge for\r\n    @return Address of the deployed gauge\r\n    \"\"\"\r\n    ix: uint256 = self._vaults_index[_vault]\r\n    assert ix != 0, \"Unknown vault\"\r\n    ix -= 2**128\r\n    assert self.gauges[ix] == empty(address), \"Gauge already deployed\"\r\n    implementation: address = self.gauge_impl\r\n    assert implementation != empty(address), \"Gauge implementation not set\"\r\n\r\n    gauge: address = create_from_blueprint(implementation, _vault, code_offset=3)\r\n    self.gauges[ix] = gauge\r\n\r\n    log LiquidityGaugeDeployed(_vault.address, gauge)\r\n    return gauge\r\n\r\n\r\n@view\r\n@external\r\ndef gauge_for_vault(_vault: Vault) -> address:\r\n    return self.gauges[self._vaults_index[_vault] - 2**128]\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef set_implementations(controller: address, amm: address, vault: address,\r\n                        pool_price_oracle: address, monetary_policy: address, gauge: address):\r\n    \"\"\"\r\n    @notice Set new implementations (blueprints) for controller, amm, vault, pool price oracle and monetary polcy.\r\n            Doesn't change existing ones\r\n    @param controller Address of the controller blueprint\r\n    @param amm Address of the AMM blueprint\r\n    @param vault Address of the Vault template\r\n    @param pool_price_oracle Address of the pool price oracle blueprint\r\n    @param monetary_policy Address of the monetary policy blueprint\r\n    @param gauge Address for gauge implementation blueprint\r\n    \"\"\"\r\n    assert msg.sender == self.admin\r\n\r\n    if controller != empty(address):\r\n        self.controller_impl = controller\r\n    if amm != empty(address):\r\n        self.amm_impl = amm\r\n    if vault != empty(address):\r\n        self.vault_impl = vault\r\n    if pool_price_oracle != empty(address):\r\n        self.pool_price_oracle_impl = pool_price_oracle\r\n    if monetary_policy != empty(address):\r\n        self.monetary_policy_impl = monetary_policy\r\n    if gauge != empty(address):\r\n        self.gauge_impl = gauge\r\n\r\n    log SetImplementations(amm, controller, vault, pool_price_oracle, monetary_policy, gauge)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef set_default_rates(min_rate: uint256, max_rate: uint256):\r\n    \"\"\"\r\n    @notice Change min and max default borrow rates for creating new markets\r\n    @param min_rate Minimal borrow rate (0 utilization)\r\n    @param max_rate Maxumum borrow rate (100% utilization)\r\n    \"\"\"\r\n    assert msg.sender == self.admin\r\n\r\n    assert min_rate >= MIN_RATE\r\n    assert max_rate <= MAX_RATE\r\n    assert max_rate >= min_rate\r\n\r\n    self.min_default_borrow_rate = min_rate\r\n    self.max_default_borrow_rate = max_rate\r\n\r\n    log SetDefaultRates(min_rate, max_rate)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef set_admin(admin: address):\r\n    \"\"\"\r\n    @notice Set admin of the factory (should end up with DAO)\r\n    @param admin Address of the admin\r\n    \"\"\"\r\n    assert msg.sender == self.admin\r\n    self.admin = admin\r\n    log SetAdmin(admin)\r\n\r\n\r\n@external\r\n@view\r\ndef coins(vault_id: uint256) -> address[2]:\r\n    vault: Vault = self.vaults[vault_id]\r\n    return [vault.borrowed_token(), vault.collateral_token()]","ABI":"[{\"name\":\"SetImplementations\",\"inputs\":[{\"name\":\"amm\",\"type\":\"address\",\"indexed\":false},{\"name\":\"controller\",\"type\":\"address\",\"indexed\":false},{\"name\":\"vault\",\"type\":\"address\",\"indexed\":false},{\"name\":\"price_oracle\",\"type\":\"address\",\"indexed\":false},{\"name\":\"monetary_policy\",\"type\":\"address\",\"indexed\":false},{\"name\":\"gauge\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetDefaultRates\",\"inputs\":[{\"name\":\"min_rate\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"max_rate\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetAdmin\",\"inputs\":[{\"name\":\"admin\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"NewVault\",\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\",\"indexed\":true},{\"name\":\"collateral_token\",\"type\":\"address\",\"indexed\":true},{\"name\":\"borrowed_token\",\"type\":\"address\",\"indexed\":true},{\"name\":\"vault\",\"type\":\"address\",\"indexed\":false},{\"name\":\"controller\",\"type\":\"address\",\"indexed\":false},{\"name\":\"amm\",\"type\":\"address\",\"indexed\":false},{\"name\":\"price_oracle\",\"type\":\"address\",\"indexed\":false},{\"name\":\"monetary_policy\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"LiquidityGaugeDeployed\",\"inputs\":[{\"name\":\"vault\",\"type\":\"address\",\"indexed\":false},{\"name\":\"gauge\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"stablecoin\",\"type\":\"address\"},{\"name\":\"amm\",\"type\":\"address\"},{\"name\":\"controller\",\"type\":\"address\"},{\"name\":\"vault\",\"type\":\"address\"},{\"name\":\"pool_price_oracle\",\"type\":\"address\"},{\"name\":\"monetary_policy\",\"type\":\"address\"},{\"name\":\"gauge\",\"type\":\"address\"},{\"name\":\"admin\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"create\",\"inputs\":[{\"name\":\"borrowed_token\",\"type\":\"address\"},{\"name\":\"collateral_token\",\"type\":\"address\"},{\"name\":\"A\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"loan_discount\",\"type\":\"uint256\"},{\"name\":\"liquidation_discount\",\"type\":\"uint256\"},{\"name\":\"price_oracle\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"create\",\"inputs\":[{\"name\":\"borrowed_token\",\"type\":\"address\"},{\"name\":\"collateral_token\",\"type\":\"address\"},{\"name\":\"A\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"loan_discount\",\"type\":\"uint256\"},{\"name\":\"liquidation_discount\",\"type\":\"uint256\"},{\"name\":\"price_oracle\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"min_borrow_rate\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"create\",\"inputs\":[{\"name\":\"borrowed_token\",\"type\":\"address\"},{\"name\":\"collateral_token\",\"type\":\"address\"},{\"name\":\"A\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"loan_discount\",\"type\":\"uint256\"},{\"name\":\"liquidation_discount\",\"type\":\"uint256\"},{\"name\":\"price_oracle\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"min_borrow_rate\",\"type\":\"uint256\"},{\"name\":\"max_borrow_rate\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"create_from_pool\",\"inputs\":[{\"name\":\"borrowed_token\",\"type\":\"address\"},{\"name\":\"collateral_token\",\"type\":\"address\"},{\"name\":\"A\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"loan_discount\",\"type\":\"uint256\"},{\"name\":\"liquidation_discount\",\"type\":\"uint256\"},{\"name\":\"pool\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"create_from_pool\",\"inputs\":[{\"name\":\"borrowed_token\",\"type\":\"address\"},{\"name\":\"collateral_token\",\"type\":\"address\"},{\"name\":\"A\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"loan_discount\",\"type\":\"uint256\"},{\"name\":\"liquidation_discount\",\"type\":\"uint256\"},{\"name\":\"pool\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"min_borrow_rate\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"create_from_pool\",\"inputs\":[{\"name\":\"borrowed_token\",\"type\":\"address\"},{\"name\":\"collateral_token\",\"type\":\"address\"},{\"name\":\"A\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"loan_discount\",\"type\":\"uint256\"},{\"name\":\"liquidation_discount\",\"type\":\"uint256\"},{\"name\":\"pool\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"min_borrow_rate\",\"type\":\"uint256\"},{\"name\":\"max_borrow_rate\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"controllers\",\"inputs\":[{\"name\":\"n\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"borrowed_tokens\",\"inputs\":[{\"name\":\"n\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"collateral_tokens\",\"inputs\":[{\"name\":\"n\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"price_oracles\",\"inputs\":[{\"name\":\"n\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"monetary_policies\",\"inputs\":[{\"name\":\"n\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"vaults_index\",\"inputs\":[{\"name\":\"vault\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deploy_gauge\",\"inputs\":[{\"name\":\"_vault\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"gauge_for_vault\",\"inputs\":[{\"name\":\"_vault\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_implementations\",\"inputs\":[{\"name\":\"controller\",\"type\":\"address\"},{\"name\":\"amm\",\"type\":\"address\"},{\"name\":\"vault\",\"type\":\"address\"},{\"name\":\"pool_price_oracle\",\"type\":\"address\"},{\"name\":\"monetary_policy\",\"type\":\"address\"},{\"name\":\"gauge\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_default_rates\",\"inputs\":[{\"name\":\"min_rate\",\"type\":\"uint256\"},{\"name\":\"max_rate\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_admin\",\"inputs\":[{\"name\":\"admin\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"coins\",\"inputs\":[{\"name\":\"vault_id\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address[2]\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"STABLECOIN\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"MIN_RATE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"MAX_RATE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"amm_impl\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"controller_impl\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"vault_impl\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pool_price_oracle_impl\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"monetary_policy_impl\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"gauge_impl\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"min_default_borrow_rate\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"max_default_borrow_rate\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admin\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"vaults\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"amms\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"market_count\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"token_to_vaults\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"},{\"name\":\"arg1\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"token_market_count\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"gauges\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"names\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}]}]","ContractName":"OneWayLendingFactory","CompilerVersion":"vyper:0.3.10","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000f939e0a03fb07f59a73314e73794be0e57ac1b4e000000000000000000000000cb8a15af05102713d4e9628f20824111f9331b2e000000000000000000000000dede1cce94cdaa3ce358e561895775db369b72e40000000000000000000000007e6c50f75badb725fddaa47c063d8f8407defc5c0000000000000000000000003b38ce23799dc56664ff6048892510abffdb7a250000000000000000000000002a28789645776eaa95f6d491ff375781ea5b40dd00000000000000000000000062191ef48bf8fd7a0e10ecb066b0350e6a9c18a900000000000000000000000040907540d8a6c65c637785e8f8b742ae6b0b9968","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}