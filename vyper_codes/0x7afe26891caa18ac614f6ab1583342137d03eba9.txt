# @version 0.3.10
"""
@title Updater
"""

interface OVMMessenger:
    def sendMessage(_target: address, _data: Bytes[1024], _gas_limit: uint32): nonpayable

interface OVMChain:
    def enqueueL2GasPrepaid() -> uint32: view

interface VotingEscrow:
    def epoch() -> uint256: view
    def point_history(_idx: uint256) -> Point: view
    def user_point_epoch(_user: address) -> uint256: view
    def user_point_history(_user: address, _idx: uint256) -> Point: view
    def locked(_user: address) -> LockedBalance: view
    def slope_changes(_ts: uint256) -> int128: view


struct LockedBalance:
    amount: int128
    end: uint256

struct Point:
    bias: int128
    slope: int128
    ts: uint256
    blk: uint256


WEEK: constant(uint256) = 86400 * 7
VOTING_ESCROW: public(constant(address)) = 0x5f3b5DfEb7B28CDbD7FAba78963EE202a494e2A2


ovm_chain: public(address)  # CanonicalTransactionChain
ovm_messenger: public(address)  # CrossDomainMessenger


@external
def __init__(_ovm_chain: address, _ovm_messenger: address):
    self.ovm_chain = _ovm_chain
    self.ovm_messenger = _ovm_messenger


@external
def update(_user: address = msg.sender, _gas_limit: uint32 = 0):
    # https://community.optimism.io/docs/developers/bridge/messaging/#for-l1-%E2%87%92-l2-transactions
    gas_limit: uint32 = _gas_limit
    if gas_limit == 0:
        gas_limit = OVMChain(self.ovm_chain).enqueueL2GasPrepaid()

    epoch: uint256 = VotingEscrow(VOTING_ESCROW).epoch()
    point_history: Point = VotingEscrow(VOTING_ESCROW).point_history(epoch)
    user_point_epoch: uint256 = VotingEscrow(VOTING_ESCROW).user_point_epoch(_user)
    user_point_history: Point = VotingEscrow(VOTING_ESCROW).user_point_history(_user, epoch)
    locked: LockedBalance = VotingEscrow(VOTING_ESCROW).locked(_user)

    start_time: uint256 = WEEK + (point_history.ts / WEEK) * WEEK
    slope_changes: int128[12] = empty(int128[12])

    for i in range(12):
        slope_changes[i] = VotingEscrow(VOTING_ESCROW).slope_changes(start_time + WEEK * i)

    OVMMessenger(self.ovm_messenger).sendMessage(
        self,
        _abi_encode(
            _user,
            epoch,
            point_history,
            user_point_epoch,
            user_point_history,
            locked,
            slope_changes,
            method_id=method_id("update(address,uint256,(int128,int128,uint256,uint256),uint256,(int128,int128,uint256,uint256),(int128,uint256),int128[12])")
        ),
        gas_limit
    )