I want you to help me find new gas-wasting patterns for Solidity. Gas is a unique pricing mechanism in Solidity, which measures the amount of computational resources put into the execution of Solidity codes. Gas is paid in money, so saving gas is saving money. The goal of gas optimization is to find an equivalent code instruction sequence that produces the same output while consuming less gas. This may misalign from how people typically write codes, since the gas pricing mechanism is less intuitive and code writers do not often keep it in mind. For example, storage variables in Solidity are expensive in terms of gas, while memory is not, so unnecessary storage operations should be avoided when possible, but programmers from other languages might not be aware of this. 

First, I will give you a list of known gas-wasting patterns as an example. The list is numbered, with each bullet point specifying one gas-wasting pattern and an explanation of why this pattern wastes gas. Please be creative and see if my provided codes contain any gas-wasting patterns beyond the provided ones. The list is as follows:

1. Repeated computation of the same expression: including repetitive reads of the same expensive storage variable (e.g. Overuse of expensive storage variables). This could be solved by introducing an intermediate variable to hold the value
2. Variable refactoring: by refactoring variable types and thus adjusting memory layout, we could save gas by saving the amount of storage space needed
3. Redundant operations with same effects: redundant operations that overwrite the effect of the previous operation, making the previous useless
4. Pre-computable operations on constants: performing comparisons (or other operations) to constants is useless and could be pre-computed
5. Simplifiable conditional operations: expressions that involve logical operations that could be simplified to reduce the amount of computational workload.
6. "Loop fusion." If two loops have the same starting and stopping conditions with the same increment steps, then we could consider combining them into one, if they have no dependencies. 
7. "Repeated computations in a loop." If there are expressions that produce the same outcome in each iteration of a loop, we could move it out of the loop and execute only once, which saves computation.
8. "Opaque predicate." If the outcome of a predicate could be inferred to be true/false without execution, then we could just replace it with the corresponding value to save the compuation during runtime.

For this analysis, assume that the EVM we are targeting includes the implementation of EIP-1153 and EIP-7609, which collectively introduced the TLOAD and TSTORE opcodes to manage transient storage in smart contracts. This type of storage is temporary, and is discarded at the end of each transaction, unlike the permanent storage accessed via SSTORE and SLOAD. The gas cost of TLOAD is 5 gas, and TSTORE is 8 gas plus expansion_cost. expansion_cost is 0 if the queried key is already in transient storage, and is computed as the number of keys already in transient storage otherwise (i.e., superlinear pricing).

Next, I will provide a chunk of Solidity codes from which you will identify any gas-inefficient patterns, considering the transient storage feature:contract presale is ReentrancyGuard {
    function buyTokensNative() public payable nonReentrant {

        require(msg.value > 0, "Must send BNB");
        
        uint ethUSD = get_feed_price();
        uint256 usdtAmount = msg.value.mul(ethUSD);
        uint256 amount_receieved = msg.value;

        require(!presaleEnded, "Presale has ended");

        uint256 tokens_purchased = usdtAmount * 10 ** 18; 
        tokens_purchased = tokens_purchased.div(ratePresale);

        buyers[msg.sender].bnb_sent += amount_receieved;
        buyers[msg.sender].tokens_purchased += tokens_purchased;
        buyers[msg.sender].buyer_address = msg.sender;

        total_bnb_received += amount_receieved;
        tokens_for_presale_left -= tokens_purchased;
        total_investors++;

        if(tokens_for_presale_left <= 0) {
            presaleEnded = true;
        }

        payment_wallet.transfer(address(this).balance);

        emit boughtTokens(amount_receieved, tokens_purchased, total_bnb_received);
    }

    //USDT
    function buyTokensUSDT(uint256 usdtAmount) public payable nonReentrant {
         
        require(usdtAmount > 0, "Must send USDT");

        require(!presaleEnded, "Presale has ended");

        uint256 tokens_purchased = usdtAmount * 10 ** 6; 
        tokens_purchased = tokens_purchased * 10 ** 18;
        tokens_purchased = tokens_purchased.div(ratePresaleStable);

        buyers[msg.sender].usdt_sent += usdtAmount * 10 ** 12; //convert to wei
        buyers[msg.sender].tokens_purchased += tokens_purchased;
        buyers[msg.sender].buyer_address = msg.sender;

        total_usdt_received += usdtAmount;
        tokens_for_presale_left -= tokens_purchased;
        total_investors++;

        if(tokens_for_presale_left <= 0) {
            presaleEnded = true;
        }

        IERC20_USDT(address(token_usdt)).transferFrom(msg.sender, payment_wallet, usdtAmount);

        emit boughtTokensUsdt(usdtAmount, tokens_purchased, total_usdt_received);
    }

    //either BUSD or USDC
    function buyTokensUSD(uint256 usdAmount) public payable nonReentrant {
        
        require(usdAmount > 0, "Must send USDC");

        require(!presaleEnded, "Presale has ended");

        uint256 tokens_purchased = usdAmount * 10 ** 6; 
        tokens_purchased = tokens_purchased * 10 ** 18;
        tokens_purchased = tokens_purchased.div(ratePresaleStable);

        buyers[msg.sender].usdt_sent += usdAmount * 10 ** 12; //convert to wei
        buyers[msg.sender].tokens_purchased += tokens_purchased;
        buyers[msg.sender].buyer_address = msg.sender;

        total_usdt_received += usdAmount;
        tokens_for_presale_left -= tokens_purchased;
        total_investors++;

        if(tokens_for_presale_left <= 0) {
            presaleEnded = true;
        }

        token_usd.transferFrom(msg.sender, payment_wallet, usdAmount);

        emit boughtTokensUsd(usdAmount, tokens_purchased, total_usdt_received);
    }

    //claim tokens
    function claimTokens() external payable nonReentrant {

        //check not cancelled
        require(claimOpened, "Claiming not opened.");

        //check claimant is valid
        require(isAddressInvestor(msg.sender) > 0, "Address not invested.");

        //check if address has already claimed
        require(isAddressClaimed(msg.sender) == 0, "This address has already claimed.");

        //allow to claim tokens
        distributeTokens(isAddressInvestor(msg.sender));
    }
    function distributeTokens(uint256 tokens_to_send) internal {

        uint256 tokenBalance = token_contract.balanceOf(address(this));

        require(tokens_to_send <= tokenBalance, "Not enough tokens to claim.");

        token_contract.transfer(msg.sender, tokens_to_send);
        total_tokens_sent += tokens_to_send;
        buyers[msg.sender].claimed_tokens = tokens_to_send;
    }
    function newRound(uint256 _tokens_for_round, uint256 _rate, uint256 _rateStable) external owner {

        tokens_for_presale = tokens_for_presale.add(_tokens_for_round);
        tokens_for_presale_left = _tokens_for_round;
        ratePresale = _rate;
        ratePresaleStable = _rateStable;
    }
    function fundTokens(address _contract, address _to) external owner {

         uint256 tokenBalance = IERC20(_contract).balanceOf(address(this));

         require(tokenBalance > 0, "No tokens available.");

         IERC20(_contract).transfer(_to, tokenBalance);
    }
    function fundUsdt(address _to) external owner {

         uint256 tokenBalance = IERC20(token_usdt).balanceOf(address(this));

         require(tokenBalance > 0, "No tokens available.");
         
         IERC20_USDT(address(token_usdt)).transfer(_to, tokenBalance);
    }
    function get_amount_of_tokens_native(uint256 amount) public view returns (uint256) {

        uint ethUSD = get_feed_price();
        uint256 usdtAmount = amount.mul(ethUSD);
        uint256 tokens_purchased = usdtAmount * 10 ** 18; 
        tokens_purchased = tokens_purchased.div(ratePresale);

        return tokens_purchased;
    }
    }

    modifier owner {

        bool isOwner = false;

        if(msg.sender == presale_owner) {
            isOwner = true;
        }

        require(isOwner == true, "Requires owner");

        _;
    }

    event boughtTokens(uint256 paid, uint256 tokens, uint256 raised);
    event boughtTokensUsdt(uint256 usdtAmount, uint256 tokens_purchased, uint256 total_usdt_received);
    event boughtTokensUsd(uint256 usdAmount, uint256 tokens_purchased, uint256 total_usdt_received);
Now I want you to help me find new gas-wasting patterns from the above codes and the list of example patterns, considering the introduction of transient storage. Please be creative and think outside the box beyond the patterns listed above. Please put the new gas-wasting patterns in bullet points, using Latex syntax. Also please answer the following questions for each of the found patterns:

1. How did you find this pattern? Could you explain the reasoning process, step by step, behind the discovery?
2. What should I do, step by step, to fix the found gas-wasting patterns? Could you explain the reasoning process, step by step, behind the reason why such a fix works?
3. On a score of 0 to 5, please rate this new pattern in terms of how much it is sacrificing readability, security, and maintainability in exchange for gas optimization (5 is the least impacted. For example, "Readability: 5; Security: 4; Maintainability: 1" means no effect on security while maintainability is largely affected.)

Here are some additional requirements:
1. If you think my prompt to you has any issues (e.g. ambiguity or lack of information), please tell me how I should improve it the next time.
2. Please reflect on your reasoning process and tell me how you could do better next time in terms of completing the given task. If you found any issues, please also make corresponding improvements to your output this time and tell me what you did and why such improvement is necessary, in a step-by-step manner.